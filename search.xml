<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDA操作总结</title>
      <link href="/2023/02/26/ida-zong-jie/"/>
      <url>/2023/02/26/ida-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="ida操作"><a href="#ida操作" class="headerlink" title="ida操作"></a>ida操作</h1><h3 id="基础必备操作"><a href="#基础必备操作" class="headerlink" title="基础必备操作"></a>基础必备操作</h3><p>1、<strong>反汇编：</strong>Tab\F5</p><p>2、<strong>IDA字符串表：</strong>shift+F12;或者直接找窗口</p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20230226175251517.png" alt="image-20230226175251517"></p><p>打开string窗口后，我们可以按Ctrl+F来调出搜索</p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20230226175638025.png" alt="image-20230226175638025"></p><p>在里面输入你想要查找的字符串，如果有原数据，就能成功找到。</p><p>双击数据，就能进入对应的内存</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023—VNCTF-re-PZGalaxy</title>
      <link href="/2023/02/26/2023-vnctf-re-pzgalaxy/"/>
      <url>/2023/02/26/2023-vnctf-re-pzgalaxy/</url>
      
        <content type="html"><![CDATA[<h1 id="PZGalaxy"><a href="#PZGalaxy" class="headerlink" title="PZGalaxy"></a>PZGalaxy</h1><p>这道题是用js写的代码</p><p>用浏览器打开 开发者工具查看源码</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled.png" alt="Untitled"></p><p>![Untitled 3](/Untitled 3.png)</p><p>源码很有特点，就是进行rc4加密。</p><p>![Untitled 2](/Untitled 2.png)</p><p>这里分析一下我们就可以知道，data和enc都传入了Leaf中进行加密，我们就可以推测出data,就是进行加密的密钥。</p><p>后面的一行代码，分别是判断flag前面四个字符，和data前面的四个字符，并且我们可以知道，data的长度为8.</p><p>![Untitled 1](/Untitled 1.png)</p><p>知道key的前四个字符，也知道key的前四个字符，自然想到对key进行爆破。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span><span class="token comment">//将数字转换为字符串</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ccc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> a <span class="token operator">/</span> x<span class="token punctuation">;</span>        key<span class="token punctuation">[</span>y<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        a <span class="token operator">%=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//s盒的初始化，生成密钥流</span><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span> <span class="token comment">// 对S盒进行初始化</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//rc4加密</span><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换s[x]和s[y]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//rc4执行函数</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">rc4_run</span><span class="token punctuation">(</span><span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    key<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token function">rc4_init</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span>    <span class="token punctuation">{</span>        s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pData<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token operator">*</span>key<span class="token punctuation">;</span><span class="token comment">//注意，最好将不变的数据放入静态数据区，以保障其值</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"flag"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x7c</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 密文</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20230000</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token comment">//遍历后四为可能出现的值，进行爆破</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">20239999</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> <span class="token function">ccc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token function">rc4_run</span><span class="token punctuation">(</span>pData<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寻找满足条件的，数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">rc4_run</span><span class="token punctuation">(</span>pData<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出flag：flag{HitYourSoulAndSeeYouInTheGalaxy}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第十二章 并发编程</title>
      <link href="/2023/02/09/csapp-di-shi-er-zhang-bing-fa-bian-cheng/"/>
      <url>/2023/02/09/csapp-di-shi-er-zhang-bing-fa-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><p>什么是并发？我们可以这样理解就是同时运行，做多件事情，比如，我们在看剧的同时，吃着薯片，像这种，在时间上重叠的现象，就是并发、</p><p><strong>并发的作用</strong> </p><ul><li><p>访问慢速i\o设备。访问慢速的i\o设备的时候，内核可以同时运行一些其他的数据，来等待。</p></li><li><p>与人进行交互。我们一般打开电脑，都会同时运行好几个程序。</p></li><li><p>服务器服务多个网络客户端。</p></li><li><p>在多核机器上进行并行计算。</p></li><li><p>多线程运行。</p><h3 id="基于进程的并发编程"><a href="#基于进程的并发编程" class="headerlink" title="基于进程的并发编程"></a>基于进程的并发编程</h3><p><img lazyload="" src="/images/loading.svg" data-src="/image-20230226165229824.png" alt="image-20230226165229824"></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame-2023-re-kmusic</title>
      <link href="/2023/02/06/hgame-2023-re-kmusic/"/>
      <url>/2023/02/06/hgame-2023-re-kmusic/</url>
      
        <content type="html"><![CDATA[<h1 id="kmusic"><a href="#kmusic" class="headerlink" title="kmusic"></a>kmusic</h1><h2 id="链接：https-pan-baidu-com-s-14vG-N5FLMpHKbEf9cfEzvA-pwd-etvs"><a href="#链接：https-pan-baidu-com-s-14vG-N5FLMpHKbEf9cfEzvA-pwd-etvs" class="headerlink" title="链接：https://pan.baidu.com/s/14vG_N5FLMpHKbEf9cfEzvA?pwd=etvs"></a>链接：<a class="link" href="https://pan.baidu.com/s/14vG_N5FLMpHKbEf9cfEzvA?pwd=etvs">https://pan.baidu.com/s/14vG_N5FLMpHKbEf9cfEzvA?pwd=etvs<i class="fas fa-external-link-alt"></i></a></h2><h2 id="提取码：etvs"><a href="#提取码：etvs" class="headerlink" title="提取码：etvs"></a>提取码：etvs</h2><p>打开找道题，我们可以知道这个是.net编写的程序，我们用dnSpy打开（64位）进行分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled.png" alt="Untitled"></p><p>我们可以看到这里对data进行了加密，我们运行到data结束，进入二进制界面。</p><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%201.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%202.png" alt="Untitled"></p><p>这里发现MZ头，可知是一个二进制文件。我们用winhex，dump出来。</p><p>将dump出来的文件放入dnSpy进行分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%203.png" alt="Untitled"></p><p>可以发现出现了一个大if,然后里面进行了限制计算。到这里我们可知道用z3进行求解。</p><p>用z3进行创建求解即可。</p><h1 id="关于z3"><a href="#关于z3" class="headerlink" title="关于z3"></a>关于z3</h1><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%204.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%205.png" alt="Untitled"></p><h3 id="一般的模板："><a href="#一般的模板：" class="headerlink" title="一般的模板："></a>一般的模板：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'x%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 将flag限制为可见字符</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token comment"># 中间添加程序的加密算法</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>    model <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    string <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>model<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>real<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于本道题，我们进行解题：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">246</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">243</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">172</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">171</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">179</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">162</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">236</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">]</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'x%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#</span><span class="token comment"># for i in range(47):</span><span class="token comment">#     s.add(num[i] &lt;= 127)</span><span class="token comment">#     s.add(num[i] &gt;= 32)</span><span class="token comment"># 中间添加程序的加密算法</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">52296</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">26211</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">11754</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">41236</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">63747</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">52714</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10512</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">12972</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">45505</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">21713</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">59122</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">12840</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">21087</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12702282</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25228</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">20699</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">8158</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">65307</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">30701</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">47555</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2557</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">49055</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">7992</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">57465</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">57426</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">13299</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50966</span> <span class="token operator">==</span> <span class="token number">9946829</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64801</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">60698</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">40853</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">54907</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">29882</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">13574</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">21310</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">47366</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">41784</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">53690</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">58436</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">15590</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">58225</span> <span class="token operator">==</span> <span class="token number">2372055</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61538</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">17121</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">58124</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8186</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">21253</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">38524</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48323</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">20556</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">56056</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">18568</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">12995</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">39260</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">25329</span> <span class="token operator">==</span> <span class="token number">6732474</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">42567</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">17743</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">47827</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10246</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">16284</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">39390</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">11803</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60332</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">18491</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">4795</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25636</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">16780</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">62345</span> <span class="token operator">==</span> <span class="token number">14020739</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10968</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">31780</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">31857</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">61983</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">31048</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">20189</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">12337</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">25945</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">7064</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25369</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">54893</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">59949</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">12441</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">14434062</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16689</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10279</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32918</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">57155</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">26571</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">15086</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">22986</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">23349</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">16381</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">23173</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">40224</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">31751</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">8421</span> <span class="token operator">==</span> <span class="token number">7433598</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">28740</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64696</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">60470</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">14752</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1287</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">35272</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">49467</span> <span class="token operator">+</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">33788</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20606</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">44874</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">19764</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48342</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">56511</span> <span class="token operator">==</span> <span class="token number">7989404</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">28978</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">23120</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">22802</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">31533</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">39287</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48576</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">28542</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">43265</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">22365</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61108</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2823</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">30343</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">14780</span> <span class="token operator">==</span> <span class="token number">3504803</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">22466</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">55999</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">53658</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">47160</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">12511</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">59807</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">46242</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3052</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">25279</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">30202</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">22698</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">33480</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">16757</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">11003580</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">57492</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">13421</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">13941</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">48092</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">38310</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">9884</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">45500</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">19233</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">58274</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">36175</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">18568</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">49694</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">9473</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">25546210</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">23355</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">50164</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">34618</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">52703</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">36245</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">46648</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">4858</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">41846</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">27122</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">42058</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">15676</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">31863</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">62510</span> <span class="token operator">==</span> <span class="token number">11333836</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">30523</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">7990</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">39058</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">57549</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">53440</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4275</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48863</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">55436</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">2624</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">13652</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">62231</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">19456</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">13195</span> <span class="token operator">==</span> <span class="token number">13863722</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>text <span class="token operator">=</span> <span class="token number">47</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> num<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">)</span>  <span class="token comment"># 添加约束条件,解出来的满足的num有很多，但是我们要的是能够解出可见字符的num，</span>                          <span class="token comment">#因此需要添加约束条件来解出可见的flag</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>  <span class="token comment"># 检测是否有解</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num<span class="token punctuation">:</span>  <span class="token comment"># 因为最后得出的是等式，先遍历 temp，把 temp 的每个依次赋给 i</span>        flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 然后找到每个 temp 对应的解，附加到空列表的后面</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无解'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%206.png" alt="Untitled"></p><p>这道题比较特殊的地方就是这里。由于我们z3是限制求解，解有很多，z3只会给我们一个，我们的限制越多，越接近准确答案。因而这步的原因就是对我们解出的num再解出的flag进行限制，来确保我们num解出来的flag都是可见字符。</p><p>可得num=[236, 72, 213, 106, 189, 86, 62, 53, 120, 199, 15, 93, 133]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">246</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">243</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">172</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">171</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">179</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">162</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">236</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">]</span>text <span class="token operator">=</span><span class="token string">""</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    text <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出flag: hgame{z3_1s_very_u5eful_1n_rever5e_engin3ering}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第十一章 网络编程##</title>
      <link href="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/"/>
      <url>/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="客户端—服务器编程模型"><a href="#客户端—服务器编程模型" class="headerlink" title="客户端—服务器编程模型"></a>客户端—服务器编程模型</h3><p>一个应用是由一个服务器进程和一个或者多个客户端进程组成。一对多的关系。</p><p>这个模型的基本操作的基本模型就是：</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/image-20221231210558360.png" alt="image-20221231210558360"></p><p>举个例子，当我们在去b站看视频，我们看到了一个比较吸引人的封面，想点进去一探究竟。我们点击视频，然后屏幕上播放视频这个过程就是我们客户端–服务器模型。</p><p>1、客户端发送请求。就是我们点击视频，准备播放视频的请求。</p><p>2、服务器处理请求。服务器（一个程序）接收我们要播放视频的请求，然后从库中取出这个视频。</p><p>3、服务器发送响应。服务器把这个视频发送给我们。</p><p>4、客户端处理响应。我们的电脑/手机的软件，收到这个视频，然后播放在屏幕上。</p><p><strong>一台主机上可以同时运行许多不同的客户端和服务器，而且一个客户端和服务器的事务可以在同一台或者不同的主机上。</strong></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li><p>从物理上来说，网络是一个按照远近组成的层次系统。最底层是LAN(局域网)，范围只有一栋楼或者校园内。目前，最流行的局域网技术是以太网</p></li><li><p>一个以太网段由一些电缆和一个叫集线器的小盒子组成</p></li><li><p>使用电缆和网桥的小盒子，可以组成一个较大的局域网，我们称之为桥接以太网。</p></li></ul><p>多个不兼容的局域网可以通过路由器进行连接，组成一个internet(互联网)。路由器可以用来由各种局域网和广域网构建互联网络。</p><p>互联网的一个重要的特性就是<em><strong>能由采用完全不同和不兼容技术的各种局域网和广域网组成</strong></em> 。</p><p>互联网兼容如此不同的各种局域网/广域网，是通过协议软件来实现的。</p><p> <strong>全球IP因特网</strong></p><p> 在全球因特网下，每个主机运行实现的都是TCP/IP协议（transmission control protocol/internet protocol,暨传输控住协议/互联网网络协议）</p><ul><li>IP地址结构中存放的地址总是以（大端法）网络字节顺序存放的，我们的主机的字节序为小端法。</li></ul><p><strong>连接</strong> </p><p>因特网客户端和服务器通过在连接上发送和接收字节流来通信，连接是点对点的。这里我们就需要知道一个东西。</p><p><em>套接字</em> 是连接的一个端点。每个套接字都有相应的套接字地址，由一个因特网地址和一个16位的整数端口组成，暨地址+端口。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/image-20230101210029557.png"></p><p>​    像这样我们的手机的app与b站的服务器的就对接上了。</p><ul><li>我们的客户端和服务器端使用socket函数来一个套接字描述符</li><li>客户端通过connect函数来建立和服务器的连接。</li><li>使用bind函数来告诉内核将addr中的服务器套接字地址和套接字描述符sockfd联系起来</li><li>服务器用listen函数来对端口进行监听，进而接受来自客户端的连接请求。</li><li>服务器通过调用accept函数来等待来自客户端的连接请求。</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/image-20230101211716102.png" alt="image-20230101211716102"></p><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><p>web客户端和服务器之间的交互作用的是一个基于文本的应用级协议—–http(超文本协议)</p><ul><li>URL就是我们俗称的网址。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第八章 异常控制流</title>
      <link href="/2022/12/30/csapp-di-ba-zhang-yi-chang-kong-zhi-liu/"/>
      <url>/2022/12/30/csapp-di-ba-zhang-yi-chang-kong-zhi-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h3 id="异常的类别"><a href="#异常的类别" class="headerlink" title="异常的类别"></a>异常的类别</h3><p>异常（Exception）都是运行时的。编译时产生的不是异常，而是错误（Error）。</p><p>异常分为四类：1，中断。2、陷阱。3、故障、4、终止。</p><p>异步异常是用外部的设备，输入输出设备中的事件产生的。同步异常是执行一条指令的产物。</p><h4 id="1、中断"><a href="#1、中断" class="headerlink" title="1、中断"></a>1、中断</h4><p>中断是异步发生的，是来自外部设备的结果。（硬件中断不是由任何一条专门的指令造成的）。</p><p>硬件中断的异常处理程序被称为<strong>中断处理程序</strong>。</p><p>这个中断，举个例子，比如我们生活中，家庭中有个电器的总闸，总闸里面有保险丝，当电流过大时，会使保险丝熔断，发生跳闸，这个时候，传输到我们家里面的电流，就中断了，需要我们排除异常之后，才能把闸拉上去。</p><h4 id="2、陷阱和系统调用"><a href="#2、陷阱和系统调用" class="headerlink" title="2、陷阱和系统调用"></a>2、陷阱和系统调用</h4><p>陷阱是有意的异常，是执行一条指令的结果。属于同步异常。陷阱的一个重要用途是在用户程序和内核提供一个像过程一样的接口，叫做<strong>系统调用</strong>。</p><p>用户程序（就是如我们的鼠标点击的运行的程序），需要经常向内核请求服务，比如读取一个文件，加载一个新的程序，或者终止当前的程序。为了允许这些请求，处理器提供了一条特殊的指令<strong>syscall</strong> .执行sycall指令会导致一个到异常处理程序的陷阱，从而调用适当的内核程序。</p><p>系统调用和普通函数调用是一样的，但是它们的实现有很大的不同，普通函数运行在用户模式中，而系统调用运行在内核模式中。</p><h4 id="3、-故障"><a href="#3、-故障" class="headerlink" title="3、 故障"></a>3、 故障</h4><p>由错误情况引起，它可能被故障处理程序修正。</p><h4 id="4、终止"><a href="#4、终止" class="headerlink" title="4、终止"></a>4、终止</h4><p>发生不可恢复的致命错误时，会发生终止异常，属于同步异常。通常是一些硬件错误</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h4><p>比如好几个程序运行,A程序运行一会儿,然后B程序运行一会儿,然后再C程序运行一会儿,这样交替运行,直到全部程序运行完.它提供了一个假象,好像我们的程序单独的占用处理器.</p><p><strong>关键点就在于进程是轮流使用处理器的,每个进程执行它的流的一部分,然后被”抢占”,暂时挂起,然后轮到其他的进程</strong></p><h4 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h4><p>一个逻辑流的执行在时间上与另一个流重叠,称为<strong>并发流</strong> ,这两个流被称为并发的运行.</p><p>多个流并发的执行的现象被称为<strong>并发</strong> </p><p>一个进程和其他进程轮流运行被称为<strong>多任务</strong> </p><p>一个进程执行它的控制流的一部分的每一段时间叫做<strong>时间片</strong> ,因而多任务也叫做<strong>时间分片</strong> </p><h4 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h4><p>处理器通过一个控制寄存器中的一个模式位来提供这种功能,当设置了模式位时,进程运行就运行在了内核模式中.这时,该进程就可以执行指令集的任何指令,并且可以访问系统中的任何位置.因此内核模式可以被称为超级用户模式.</p><p>在用户模式下,进程不允许执行特权指令,和直接引用地址空间中内核区的代码和数据,这样的任何尝试都会导致致命的保护故障.用户程序必须通过系统调用接口间接的访问内核代码和数据.</p><p>运行应用程序代码的进程初始时是在用户模式中的,进程从用户模式变为内核模式的唯一方法是通过诸如中端,故障或者陷入系统调用的异常.当异常发生时控制传递到异常处理程序,处理器将其从用户模式变成内核模式.</p><p>当程序返回到应用程序代码时,处理器就把模式从内核模式切换回用户模式.</p><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>什么是上下文切换呢？上下文切换就是内核重新启动一个暂时休眠的进程所需的状态，它由一些对象的值组成，包括通用目的寄存器，浮点寄存器，程序计数器，用户栈，状态寄存器，各种内核数据结构，比如进程表，页表，等等</p><p>进程在执行时，内核可以决定是否让当前进程运行，并让其他休眠的进程开始运行。这个决策就叫做<strong>调度</strong> ，由内核中调度器代码处理。当内核选择一个新的进程进行运行的时候，我们就称其为内核调度了这个进程，在这个过程中内核使用上下文切换机制来控制两个进程的休眠运行。</p><p>如果系统调用因为等待一个事件而发生阻塞，那么内核可以让当前进程休眠，然后切换到另一个进程。可以使用sleep系统调用，显式的请求让调用程序进行休眠。</p><p>如图就是两个进程进行切换的表示。</p><p>![image-20230219100641275](/../csapp 第八章 异常控制流/image-20230219100641275.png)</p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><h4 id="1获取进程ID"><a href="#1获取进程ID" class="headerlink" title="1获取进程ID"></a>1获取进程ID</h4><p>每一个进程都有一个唯一正数的进程ID（PID）</p><h4 id="2、创建和终止进程"><a href="#2、创建和终止进程" class="headerlink" title="2、创建和终止进程"></a>2、创建和终止进程</h4><p>我们可以认为进程总是存在三种状态：</p><ul><li>运行。</li><li>停止。进程的执行被挂起（休眠）</li><li>终止。进程永远的停止，不再执行。1、收到终止信号。2、从主程序返回。3、调用exit函数。</li></ul><p><strong>父进程可以通过调用fork函数来创建一个子进程（也就是在进程中再创建一个进程）</strong></p><p>fork函数创建进程的时候 的一些特点：</p><ul><li><p>调用一次，返回两次。</p></li><li><p>并发进行。</p></li><li><p>相同但是独立的地址空间。它们进程的地址空间是相同的，但是因为父进程和子进程是独立的进程，它们有着自己的私有空间。</p></li><li><p>共享文件。因为子进程会继承父进程大部分东西。相似但是有区别。</p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20230226154844867.png"></p></li></ul><h4 id="3、进程休眠"><a href="#3、进程休眠" class="headerlink" title="3、进程休眠"></a>3、进程休眠</h4><p>一般的，我们运用sleep函数将一个进程挂起指定的一段时间</p><h4 id="4、回收子进程"><a href="#4、回收子进程" class="headerlink" title="4、回收子进程"></a>4、回收子进程</h4><p>当一个进程由于某种原因终止的时候，内核并不会立即将它从系统中清除，而是保持在一种已终止的状态中，直到被父进程回收。一个终止了但是还未被回收的进程被称为僵死进程，虽然他们没有运行，但是它们仍然会消耗系统的内存资源。一般我们用waitpid函数来等待它的子进程终止或者停止。</p><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>信号的作用就是通知进程系统中发生的某种类型的事件。每种信号类型都对应着某种系统事件，当发生了一个异常，就会通知用户进程。</p><p><strong>信号表</strong> </p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20230226162021483.png" alt="image-20230226162021483"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第七章 链接</title>
      <link href="/2022/12/27/csapp-di-qi-zhang-lian-jie/"/>
      <url>/2022/12/27/csapp-di-qi-zhang-lian-jie/</url>
      
        <content type="html"><![CDATA[<p> 正如其名  链接就是将各种代码和数据片段收集组合成一个整体的过程</p><p>链接器的一个重要的用处就是进行分离编译。这样我们就不用将一个大型的项目写成一个非常大的源文件，我们可以将它分解许多小的部分。也就是说一个可以项目拆分，让不同的人负责不同的模块，进行分工。另一方面维护起来也更加方便，只需对相应模块进行调试和修改就行了。</p><p><strong>学习链接器我们可以干什么？</strong> </p><ul><li>帮助我们理解构建大型文件中出现的一些错误。</li><li>帮助我们避免一些危险的编译错误。</li><li>帮助我们理解语音的作用域规则是如何实现的。比如，全局变量与局部变量的区别。</li><li>帮助我们理解一些重要的系统概念。比如，虚拟内存，分页，内存映射。</li><li>让我们更好的利用共享库</li></ul><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>静态链接器以一组可重定位目标文件和命令行参数作为输入，生成一个完全的链接的，可以加载和运行的执行目标文件作为输出 。简单来说就是，把我们的程序由不可执行变成了可执行文件。在此过程中链接器需要完成的任务：</p><ul><li><p><strong>符号解释</strong>  将我们的数据，比如全局变量，静态变量等，属于static声明的数据，用链接器自己的符号来关联起来</p><blockquote><p><strong>符号</strong> 就是我们平常声明的那些东西比如int  a,char arr[5],等等</p><p><strong>符号表</strong> 将符号整合在一起就形成了符号表。</p></blockquote></li><li><p><strong>重定位</strong>  编译器与汇编器生成从0开始的地址，链接器将先前关联起来的符号，再与内存关联起来，就重定位了这些数据，然后再修改所有对这些符号的引用，使得它们指向内存的这个位置。</p></li></ul><p>总得来说，链接器就是将我们程序的各种块连接起来，然后再确定这些块的运行位置，并且定位这些块。</p><h3 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h3><p>目标文件可以分为三种：</p><ul><li>可重定位目标文件。 二进制代码和数据，在编译的时候可以与其他可重定位目标文件合并在一起，形成一个可执行目标文件。</li><li>可执行目标文件。包含二进制代码和数据，可以直接复制到内存中执行。</li><li>共享目标文件。特殊的可重定位目标文件，可以在加载或者运行时被动态的加载内存并链接。（也就是我们常说的动态链接库那些）</li></ul><h2 id="可重定位目标文件"><a href="#可重定位目标文件" class="headerlink" title="可重定位目标文件"></a>可重定位目标文件</h2><p>​      一个可重定位文件的组成如图所示：</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/27/csapp-di-qi-zhang-lian-jie/image-20221229165138290.png" alt="image-20221229165138290"></p><p><strong>elf头</strong>：描述了该文件的系统字的大小与字节顺序，还有帮助链接器语法分析和解释目标文件的信息。包括， elf头的大小，目标文件的类型（上面提到的三种），机器类型（X86-64）,字节头部表的文件偏移，节头部表中条目的大小和数量。</p><p><strong>.text</strong>  :已经编译程序的机器代码。</p><p><strong>.rodata</strong> :只读数据，如在printf语句中的格式串和开关语句的跳转表。</p><p><strong>.data</strong> ：已经初始化的全局和静态变量。而局部变量保存在栈中，没出现在.data和.bss区中。</p><p><strong>.bss</strong> :未初始化的全局和静态变量，和所有被初始为0的全局或者静态变量。在目标文件中这个节不占实际的空间，仅占位符。</p><p>（将目标文件格式区分为已初始化和未初始化变量是为了空间效率，为初始化变量不需要占用任何实际的磁盘空间。运行时，在内存中分配这些变量，初始值为0）</p><p><strong>.symtab</strong> 一个 符号表。存放着程序中定义和引用的函数和全局变量的信息。（每个可重定位目标文件在.symtab中都有一张符号表）</p><p><strong>rel.text</strong> : .text节中位置的列表，当链接器把这个目标文件和其他文件组合在一起时，需要修改这些位置。一般的，任何调用外部函数或者引用全局变量的指令都需要需改。（后面会讲，更好理解一些）</p><p><strong>rel.data</strong> : 被模块引用或定义的所有全局变量的重定位信息。一般的，任何已被初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义的地址，都需要被修改。(后面会讲，更好理解一些)</p><p><strong>debug</strong> :一个调试符号表。</p><p><strong>.line</strong> : 原始c源程序的行号和.text节中机器指令之间的映射。</p><p><strong>.strtab</strong> : 一个字符表，其中内容包括.symtab和.debug节的符号表，以及节头部中的节名字。</p><p><strong>符号和符号表</strong></p><p><strong>符号有三种</strong> ：</p><p><img lazyload="" src="/images/loading.svg" data-src="/./image-20221229203235962.png" alt="image-20221229203235962"></p><p><strong>符号表</strong> </p><p>由汇编器构造，使用编译器输入到汇编语言.s文件中的符号</p><h3 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h3><p>链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来。</p><p>当多个模块定义同名的全局符号时，Linux系统采用的方法：将全局符号，分为强和弱，一般函数和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。再由此定义，使用以下规则：</p><ul><li>不允许有多个同名的强符号。比如，一个项目中只能有一个main函数。</li><li>如果有一个强符号和多个弱符号同名，那么选择强符号来使用。</li><li>如果有多个弱符号同名，则在其中随机选择一个。（因为都没有初始化，所以都是一样的）——————》（书中有很经典的例子P510）</li></ul><h5 id="静态库链接（P511）"><a href="#静态库链接（P511）" class="headerlink" title="静态库链接（P511）"></a>静态库链接（P511）</h5><p>编译系统将所有相关的目标模块打包成一个单独的文件，这个文件我们称其为静态库，它可以作为链接器的输入，当链接器构造一个可执行文件时，它只需复制静态库里面被程序引用的目标块。（我们使用的printf,scanf这些标准函数利用的也是静态库）</p><h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p>重定位由两步组成：</p><ul><li>重定位节和符号定义。使得程序中的每条指令和全局变量都有唯一的运行时内存地址。</li><li>重定位节中的符号引用。链接器修改代码节和数据节中对每个符号的引用，使得其指向正确的运行时地址。</li></ul><p><strong>重定位条目</strong> </p><p>当汇编器生成一个目标模块时，它并不知道数据和代码最终将放在内存中的什么位置。也不知道这个模块引用的任何外部定义的函数或者全局变量的为，因而，当汇编器遇到对最终 未知的目标引用就会生成一个重定位条目，用来告诉链接器在将目标文件合成可执行文件时如何修改这个引用。（相当于汇编器不明确数据后面是怎么分配的，就把那些数据放在重定位条目里面，给链接器一个信息，让链接器处理）</p><ul><li>代码重定位条目放在.rel.text中，而已初始化了的放在.rel.data中。</li></ul><p><img lazyload="" src="/images/loading.svg" data-src="/./image-20221230145928033.png" alt="image-20221230145928033"></p><p>（书p517）</p><h2 id="可执行目标文件"><a href="#可执行目标文件" class="headerlink" title="可执行目标文件"></a>可执行目标文件</h2><p>一个比较典型的ELF可执行文件：</p><p><img lazyload="" src="/images/loading.svg" data-src="/./image-20221230150344932.png" alt="image-20221230150344932"></p><p>可执行文件与可重定位目标文件有些许差别：</p><ul><li>ELF头描述文件的总体格式，包括程序的入口点（oep）.</li><li>.init节，定义了一个函数_init。程序初始化代码时会调用它。</li></ul><h2 id="动态链接共享库"><a href="#动态链接共享库" class="headerlink" title="动态链接共享库"></a>动态链接共享库</h2><p>动态链接库是一个目标模块，在运行或加载时，可以加载到任意的内存地址，并和一个在内存中的程序链接起来，这个过程就是动态链接。Linux中通常为.so后缀，在微软的操作系统中为DLL.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第三章 程序的机器级表示</title>
      <link href="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/"/>
      <url>/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="程序编码"><a href="#程序编码" class="headerlink" title="程序编码"></a>程序编码</h3><ul><li>反汇编器是通过机器代码文件中的字节序列来确定汇编代码的。有着特点的机器码，例如：E8就代表call指令</li></ul><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ul><li>字—word，双字—double words ，四字—quad words</li><li><img lazyload="" src="/images/loading.svg" data-src="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/image-20221227230758891.png" alt="image-20221227230758891"></li></ul><h3 id="访问信息"><a href="#访问信息" class="headerlink" title="访问信息"></a>访问信息</h3><ul><li>一般局部变量是放在寄存器中的，而不是内存中，因为访问寄存器比访问内存要快得多</li><li>栈是一种数据结构，可以添加或者删除数据，但是必须遵守的是“先进后出原则”。相当于一个口管理进出，而这个删除和存入的这一个口，我们叫栈顶。</li></ul><h3 id="算数和逻辑操作"><a href="#算数和逻辑操作" class="headerlink" title="算数和逻辑操作"></a>算数和逻辑操作</h3><ul><li>lea为加载有地址，作用是从内存读取数据到寄存器中。作用就是取地址。</li><li>一元操作与二元操作，就是有几个操作数的意思，比如，++i,就是一元，x+Y,就是二元。</li><li>test与and 的作用都是进行逻辑与的运算，test与and 的区别，test不会改变ax与bx的值，而and是ax与bx计算之后，然后将值存储在ax中。</li><li>跳转表是一个数组，表项i是一个代码段的地址，起到索引的作用。用跳转表的一大优点就是执行开关语句的时间与开关情况的数量无关。意思就是，判断一次，然后就直接执行了，而像if–else这类，就需要分别进行判断，然后才能执行。</li></ul><h3 id="数组分配和访问"><a href="#数组分配和访问" class="headerlink" title="数组分配和访问"></a>数组分配和访问</h3><ul><li><p>c语音允许指针进行运算，，*运算和&amp;运算， *与&amp;是可以相互抵消的。</p></li><li><p>二维数组在内存中排列的顺序是按照<strong>行</strong>优先的原则。列如数组A [5] [3]</p></li><li><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/image-20221227210346634.png" alt="image-20221227210346634"></p><p>这里可以联想到，一个一维数组可以省略其大小，而二维数组可以省略其行，但是不能省略其列。此时二维数组就可以看做一维数组的嵌套，一维数组必须声明其为什么数组,以表明其装载的数据是int还是char,表明其存储数据的大小，同理二维数组，一维数组的数组，使用里面的数组我们必须表明其大小，而一维数组的大小就是其有多少个数据，因此代表里层数组大小，也就是二维数组的列不能省略。</p><h3 id="异质的数据结构（c语言中的结构体和联合体）"><a href="#异质的数据结构（c语言中的结构体和联合体）" class="headerlink" title="异质的数据结构（c语言中的结构体和联合体）"></a>异质的数据结构（c语言中的结构体和联合体）</h3><ul><li><p><strong>结构体</strong> 将可能不同类型的对象聚合到一个对象中。结构体的所有组成部分都存放在内存的连续的区域内，指向结构体的指针是结构体第一个 字节的地址</p></li><li><p><strong>联合体</strong> 允许多种类型来引用一个对象，一个联合体的总大小为其最大字段的大小</p></li><li><p><strong>数据对齐</strong> 计算机系统要求某种类型对象的地址必须为2、4、8的倍数。（对于x86指令来说，保持数据对齐能提高效率）</p></li><li><p>大多数函数的栈帧的边界都必须是16字节的倍数<img lazyload="" src="/images/loading.svg" data-src="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/image-20221227220154580.png" alt="image-20221227220154580"></p></li><li><p>在Linux系统中，栈随机化已经变成了标准行为，通过栈随机化使得栈的位置在程序每次运行时都有变化，以避免安全单一化。</p></li><li><p>栈破坏检测。栈保护者机制，在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值，由程序运行时随机产生。原理是，在恢复寄存器和从函数返回之前，程序会检测金丝雀值是否被函数某个操作改变，若改变，程序便会异常终止。（一般用于栈溢出）</p><h3 id="浮点代码"><a href="#浮点代码" class="headerlink" title="浮点代码"></a>浮点代码</h3><ul><li>把浮点值转换成整数时，指令会执行截断，把值向零进行舍入</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>脱壳</title>
      <link href="/2022/12/21/tuo-ke/"/>
      <url>/2022/12/21/tuo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="对于脱壳一些题型的记录"><a href="#对于脱壳一些题型的记录" class="headerlink" title="对于脱壳一些题型的记录"></a>对于脱壳一些题型的记录</h1><p>对于手动脱壳，我们有两种常用的安全工具，一个是od,另一个是ida。两个方法略有不同。对于脱一般的程序壳的时候，我主要用的是ida来脱壳，一般ida实在脱不了了再想到用od来脱，od,，所以我记录的大多都是用的ida来脱的。</p><h3 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h3><h5 id="1、寻找oep"><a href="#1、寻找oep" class="headerlink" title="1、寻找oep"></a>1、寻找oep</h5><p>因为我们的壳经过运行之后，会慢慢的自动解开壳，我们就要去寻找解开后的那个时候的程序入口。而oep就是程序的入口。</p><h5 id="2、寻找到加密函数"><a href="#2、寻找到加密函数" class="headerlink" title="2、寻找到加密函数"></a>2、寻找到加密函数</h5><p>找到oep之后，运行下来，我们的程序就出来了。我们就可以去寻找了。string里面去寻找字符串，然后再跳到函数里面，去就可以直接分析了。</p><h5 id="3、dump与修复"><a href="#3、dump与修复" class="headerlink" title="3、dump与修复"></a>3、dump与修复</h5><p>有些时候，可能我们要将程序剥离出来，这个时候就在oep口的地方将全部程序dump出来即可，dump出来之后还要进行修复文件，因为它的程序地址那些会发生改变，因此我们需要修复IAT。</p><p><strong>对于脱壳运用最多的方法，一个是单步调试法，另一个就是ESP定律来脱壳</strong></p><h3 id="单步调试法"><a href="#单步调试法" class="headerlink" title="单步调试法"></a>单步调试法</h3><p>正如其名，单步调试法就是进行动态调试文件，分析汇编指令，找到关键点,寻找oep</p><h3 id="esp定律（堆栈平衡）"><a href="#esp定律（堆栈平衡）" class="headerlink" title="esp定律（堆栈平衡）"></a>esp定律（堆栈平衡）</h3><p>由于我们壳会在内存中还原程序，跳到oep，执行我们的程序。大致过程就是运行壳程序解壳，然后退出解壳程序，加载原本程序。有着壳程序的运行与退出，根据堆栈平衡原理，壳退出后，必然会操作堆栈指针为进入之前的堆栈指针。因此根据这个原理，我们可以在堆栈处，设置访问断点，让程序运行，当程序暂停的时候，就是壳程序即将执行完的时候，然后在其附近单步跟踪就可以找到原始OEP了。</p><h3 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h3><h3 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h3><h3 id="链接：https-pan-baidu-com-s-1teQgV5kgKpuNJ60o0byYVg-pwd-j8mj"><a href="#链接：https-pan-baidu-com-s-1teQgV5kgKpuNJ60o0byYVg-pwd-j8mj" class="headerlink" title="链接：https://pan.baidu.com/s/1teQgV5kgKpuNJ60o0byYVg?pwd=j8mj"></a>链接：<a class="link" href="https://pan.baidu.com/s/1teQgV5kgKpuNJ60o0byYVg?pwd=j8mj">https://pan.baidu.com/s/1teQgV5kgKpuNJ60o0byYVg?pwd=j8mj<i class="fas fa-external-link-alt"></i></a></h3><h3 id="提取码：j8mj"><a href="#提取码：j8mj" class="headerlink" title="提取码：j8mj"></a>提取码：j8mj</h3><h6 id="单步调试法-1"><a href="#单步调试法-1" class="headerlink" title="单步调试法"></a>单步调试法</h6><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221172644959.png" alt="image-20221221172644959"></p><p>这个jmp非常可疑（一般那种jmp有大跳转就要注意），我们在这里按下f2 下断点，运行之后，按f7跟入。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221174102488.png" alt="image-20221221174102488"></p><p>到这里大致就可以猜出我们找对了。</p><p>按f8，运行到  jmp,f7跟入</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221175001632.png" alt="image-20221221175001632"></p><p>到这里就差不多知道找到oep了，由于这样ida没有将它分析出来，我们按p，将其分析出来</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221175423558.png" alt="image-20221221175423558"></p><p>进行反汇编之后发现看不懂，也没有找到我们的函数。这里有两个方法，一个就是单步，直到程序等待输入，另一个方法就是直接去string中搜索，字符串。我运用的是第二种。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203234327.png"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203609175.png" alt="image-20221221203609175"></p><p>按键盘上的X快捷键。<img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203438864-1671634100072-1.png" alt="image-20221221203438864-1671634100072-1"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203345394.png" alt="image-20221221203345394"></p><p>查询交叉引用就可以找到我们的加密函数，按f5反汇编即可。然后进行分析即可。</p><h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><h3 id="链接：https-pan-baidu-com-s-1-e-A7gJow71q4s8KYs0JfQ-pwd-fycv"><a href="#链接：https-pan-baidu-com-s-1-e-A7gJow71q4s8KYs0JfQ-pwd-fycv" class="headerlink" title="链接：https://pan.baidu.com/s/1_e_A7gJow71q4s8KYs0JfQ?pwd=fycv"></a>链接：<a class="link" href="https://pan.baidu.com/s/1_e_A7gJow71q4s8KYs0JfQ?pwd=fycv">https://pan.baidu.com/s/1_e_A7gJow71q4s8KYs0JfQ?pwd=fycv<i class="fas fa-external-link-alt"></i></a></h3><h3 id="提取码：fycv"><a href="#提取码：fycv" class="headerlink" title="提取码：fycv"></a>提取码：fycv</h3><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095122670.png" alt="image-20221227095122670"></p><p>直接在程序的第一条指令上下一个断点。然后运行，寻找可疑点。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095328753.png" alt="image-20221227095328753"></p><p>指令的最后有个retn,这里我们按f4运行到此处，再按f7跟入。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095542230.png" alt="image-20221227095542230"></p><p>进入之后发现最后的jmp,我们继续像先前一样，f4,f7跟入。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095720390.png" alt="image-20221227095720390"></p><p>继续重复上面步骤。</p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20221227095757480.png" alt="image-20221227095757480"></p><p>继续</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095822799.png" alt="image-20221227095822799"></p><p>继续</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095854783.png" alt="image-20221227095854783"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095925714.png" alt="image-20221227095925714"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095948589.png" alt="image-20221227095948589"></p><p>跟到了这里我们就大致可以知道了，我们马上成功了，我们找到了oep。继续</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103349134.png" alt="image-20221227103349134"></p><p>到这里之后按p分析，就成了现在的样子，到这里就找到了我们的oep了。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103532762.png" alt="image-20221227103532762"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103552479.png" alt="image-20221227103552479"></p><p>在这里按c,再按p，再反汇编就可以得到我们的加密函数了</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103659899.png" alt="image-20221227103659899"></p><hr><p>通过这两到题，我们大致可以发现，upx脱壳，就是去寻找可疑点，jmp,或者ret，因为壳是一个程序，因此我们脱壳就是要其运行完成的结果，所以我们在脱壳过程中总是要跳到ret，也就是这个原因。最后到oep的时候也很有特点，多脱几次就有感觉了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第二章 信息的表示和处理</title>
      <link href="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/"/>
      <url>/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="信息的表示和处理"><a href="#信息的表示和处理" class="headerlink" title="信息的表示和处理"></a>信息的表示和处理</h1><p><strong>本章的话，深入的讲解了我们的数据（信息）是如何在内存中表示，以及存储，后面的部分主要是讲解了我们的整数与浮点数的存储与运算，并且在数学上进行了证明与推导。总的来说，在数学证明与推导上，有点晦涩难懂（数学太菜了）。而且在一定程度上，我们平常也用不到这个，我们只需要了解一下就行了，重点关注比较常用的知识点</strong></p><h3 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h3><p><strong>信息是怎么表示？</strong> 我们知道，我们的信息是由位组成的，我们的位就是0,1的集合，这样的表示被成为二进制，由于0101010这样相对于我们人类的十进制，太难理解和阅读了，为了更加简便，人们就思考怎样可以更加简便？因此找到了十六进制来表示。二进制和十六进制的转换很简单而且直观。</p><p><strong>我们存储数据的大小是多少呢？</strong> 我们应该知道的是，在不同的计算机上，我们的一些数据的大小存储是不同的，比如，我们熟悉的int ，在不同的计算机上有的是占4个字节（大多数），有的计算机上占的是2个字节。因此在讨论所占大小时我们应该考虑计算机本身的存储。下面就是32位，与64位的一些区别。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221222221354739.png" alt="image-20221222221354739"></p><p><strong>有一个需要注意的点就是，64位的计算机能够兼容32位的程序，也就是说32位的程序能在64位上跑，64位不的能在32位上跑</strong></p><p><strong>内存中如何排列这些字节序？</strong> 在不同的计算机中对于字节的排序是不同的，因而对于同一个文本，它的解释方式是不一样的。计算机有两种方式，一个是大端法，一个是小端法。对于大小端可以这样记，所谓大端就是大的位存储在前面（也就是低位），小端就是小的位存储在前面。比如1234，有空间0xa,0xb,0xc,0xd。按照大端存储就是1放在0xa,2放在0xb,3放在0xc,4放在0xd.按照小端排序的话，4放在0xa,3放在0xb,2放在0xc,1放在0xd.</p><p><strong>布尔代数</strong> </p><p>这个就只有两个，一个是ture，一个是false。就是真和假，和我们高中学的知识一样，或，且，非，异或，四中逻辑运算。因为ture和false,刚好和我们的存储的二进制0,1对应，因此计算机上运用广泛。</p><p><strong>位运算和逻辑运算</strong> </p><p>主要区别就是位运算处理的是数据运算，而逻辑运算处理的是一种判断，真假。</p><p><em><strong>位运算</strong></em> </p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223002053291.png" alt="image-20221223002053291"></p><p><em><strong>逻辑运算</strong></em></p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223002128217.png" alt="image-20221223002128217"></p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p><strong>整数的数据类型</strong> </p><p>对于整数来说，整数可以分为有符号数和无符号数。在不同的机器上，我们的整数的表示范围有着不同的差别。</p><p><em><strong>32位机器上</strong></em> </p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223120246269.png" alt="image-20221223120246269"></p><p><em><strong>64位机器上</strong></em> </p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223120356826.png" alt="image-20221223120356826"></p><p>这个我们可以发现一个问题，有符号数的负数比整数多表示了一个数，这里是因为有一个整数用来表示0去了。</p><ul><li>我们大多数机器都是用补码的形式来表示有符号整数</li><li>对于强制转换类型，是保持位不变改变了解释这些位的解释方式。也就是说存储的数据（0，1）并没有改变，仅仅是解释的方式变了，上下文变了。</li><li>大多数数字是默认有符号的，如果要创建无符号常量就需要在数字后面加上一个u。</li><li>强制转换有显式和隐式的，显式强制转换在前面加括号，在写上要转换的类型。隐式强制转换，由编译器自动进行。比如printf中，一个int型，打印用%x，就是隐式转换。</li><li>一个小的数据类型（float），可以转换为一个交大的数据类型(double)（对位进行扩展），而一个大的数据类型，可能转换不到较小的去（对数字进行截断），因为可能会发生溢出。</li><li>乘法，与除法，在机器上运行是很慢的，我们可以通过位运算，加法和减法的组合运算来实现，从而提高速度。</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><strong>舍入</strong> </p><p>对于一个浮点数，或者说对于一个小数，我们计算机是怎么取舍的呢？如果我们学习过c语音可以知道，浮点数是有精度的，也就是说我们的数都是由无限逼近的数进行取舍的，也就是说，举个例子：5/2=2.5，在我们的计算机中这个2.5并不是准确的2.5，可能是2.49876765.有些时候可能我们会纳闷，有些时候计算机是进行的四舍五入，有些时候我们的计算机又进行的是直接抹除小数后面位数。那么到底是怎么取舍的呢？通常情况下我们采取的舍入规则是在原来的值是舍入值的中间值时，采取向偶数舍入（四舍五入）<strong>而它的原理</strong> 二进制中，末尾为0的数为偶数。而若不是这样的话，我们的计算机一般会有选择性的使用向上和向下舍入，但最终还是会向最接近的值舍入。这是IEEE采取的默认的舍入方式，因为这种舍入方式总是向最近的值的舍入，从而让我们的舍入更加精确。也就是大部分都是四舍五入，只有下面的一种是向零舍入。</p><p><strong>浮点运算</strong> </p><p>这里我们需要知道：</p><ul><li>浮点运算没有结合律和分配律，打个比方（3-3）+0.0000000000002=0.00000000000002，（3+0.0000000000002）-3=0，按照我们的数学来说很奇怪是不是？出现这个的原因，就是因为浮点数有着舍入与精度规则，第二个式子的值被抹去了。</li></ul><p>对此推广开来，我们就可以知道一些问题：</p><ul><li>int转换成float，不会发生溢出，但是可能会发生舍入。</li><li>double转换成int，与float，可能会发生溢出。</li><li><strong>由浮点数转换为整数，float,double,转换成int会发生取舍，取舍规则为向零取舍，即小数点后面的数全部抹除</strong></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cs:app 第一章 计算机系统漫游</title>
      <link href="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/"/>
      <url>/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/</url>
      
        <content type="html"><![CDATA[<h1 id="cs-app-第一章-计算机系统漫游"><a href="#cs-app-第一章-计算机系统漫游" class="headerlink" title="cs:app 第一章 计算机系统漫游"></a>cs:app 第一章 计算机系统漫游</h1> <div class="wb"><div class="t">  </div><div class="c">本章总的来说是本书的一个引入，通过我们所写的一个.c文件由书写到执行的全过程中所经历的历程，从而对于计算机系统的总体进行一个一个大致的描述，和概念的提出，起到一个抛砖引玉的效果。     </div> </div><h3 id="1-1信息就是位-上下文"><a href="#1-1信息就是位-上下文" class="headerlink" title="1.1信息就是位+上下文"></a>1.1信息就是位+上下文</h3><p>这里提到了信息是由位+上下文。那么什么是位呢？什么又是上下文呢？</p><p>我们的所写的程序，本质上都是由值0和1组成的位（bit 比特）。这就是所谓的位，而8个位组成一组，我们称之为字节。而字节可以表示程序的一些文本字符，一群文本字符的集合构成了我们的程序。</p><blockquote><p>大部分的现代计算机系统都使用ASCII标准来表示文本字符。只由ASCII字符构成的文件称为文本文件，所有其他文件都称为二进制文件。</p></blockquote><p>到此我们可以知道了，我们数据就是一串串的比特来表示的。然而面对众多数据，例如：我们的程序数据，我们网上邮箱的数据，我们打游戏而储存的数据……等等，如何区别这些信息（数据）呢？这个时候就需要了解这些数据对象的上下文。在不同的的上下文中，同一个数据，可能表示为数值，可能表示字符串（英文，汉字等），也可能表示某条指令。</p><p>因此我们说位（比特）与该数据对象的上下文构成了信息。</p><h3 id="1-2程序被其他程序翻译成不同的格式"><a href="#1-2程序被其他程序翻译成不同的格式" class="headerlink" title="1.2程序被其他程序翻译成不同的格式"></a>1.2程序被其他程序翻译成不同的格式</h3><p>对于我们写的第一个程序hello，我们得到的是hello.c的文件，而要到我们所执行的hello.exe可执行文件就需要经过一系列的路程，在这个过程中我们的程序就会被翻译成不同的格式。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/image-20221214130847881.png" alt="image-20221214130847881"></p><p>具体有四个过程：</p><ul><li>预处理阶段。将我们.c文件里面的对#开头的命令，例如引用的文件，define 的数据等，插入到文本中，得到.i文件。</li><li>编译阶段。编译器将我们的.i文本翻译成汇编语言。文件由.i变成.s.</li><li>汇编阶段。汇编器将我们的.s文本翻译成机器语言指令（0，1），如何把这些指令打包成可重定位目标程序。到这里.s文件变成了.o文件。这里得到的.o文件属于二进制文件。</li><li>链接阶段。在我们程序中引用了c语言的库函数。而这个时候链接器就将我们引用的库函数，链接合并到我们的文件中。到此处.o文件转化成了.exe文件。</li></ul><p>.exe就可以加载到内存中，由系统执行了。</p><h3 id="1-3了解编译系统的益处"><a href="#1-3了解编译系统的益处" class="headerlink" title="1.3了解编译系统的益处"></a>1.3了解编译系统的益处</h3><ul><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞</li></ul><h3 id="1-4处理器读并解释储存在内存中的指令"><a href="#1-4处理器读并解释储存在内存中的指令" class="headerlink" title="1.4处理器读并解释储存在内存中的指令"></a>1.4处理器读并解释储存在内存中的指令</h3><p>当我们运行.exe文件的时候，这个时候就需要我们的系统进行进行执行，而我们的系统是由硬件组成的，在的硬件配合才能成功的执行我们的.exe文件。首先这里我们要了解我们系统的硬件组成，以及其运行原理。</p><p><strong>硬件组成</strong></p><ol><li><p><strong>总线</strong></p><p>贯穿整个系统的是一组电子管道，称作总线，它 携带信息字节并负责在各个部件间传递。</p></li></ol><p>总线就像我们的公路一般，起到连接作用。</p><ol start="2"><li><p><strong>I/O设备</strong></p><p>I/O（即in与out的缩写，输入/输出），I/O设备就是我们与计算机进行交互的通道。常见的输入设备：鼠标，键盘，USB..等等；输出设备：显示屏，磁盘驱动器。</p><p>这里需要提到的是每个I/O设备都通过一个控制器与适配器与I/O总线相连。控制器与适配器的区别。</p><blockquote><p>控制器是I/O设备本身或者系统的主印制电路板（主板）：适配器是一块插在主板插槽上的卡。</p></blockquote><p>3.<strong>主存</strong></p><p>主存是一个临时储存设备，在程序运行时用来存放程序和程序处理的数据。这个就像是我们做菜的菜板，将要处理的东西临时的放在上面。</p><p>4.<strong>处理器</strong></p><p>中央处理单元（cpu）,即为处理器。作用是解释或者执行存储在主存中的指令引擎。而它的核心是寄存器，又称程序计数器。它的特点是时刻指向主存中的某条机器语言指令。处理器从通电开始，就时刻的在执行寄存器指向的指令。CPU在指令的要求下大致会执行一下操作：</p><blockquote><ul><li><strong>加载</strong> ：从主存复制一个字节或者一个字到寄存器中，以覆盖寄存器原来的内容。</li><li><strong>存储</strong> ：从寄存器复制一个字符或者一个字到主存的某个位置，以覆盖寄存器原来的内容。</li><li><strong>操作</strong> ：把两个寄存器的内容复制到ALU（算术/逻辑单元），ALU对这两个字做算术运算，并将结果存放到一个寄存器中，以覆盖该寄存器中原来的内容。</li><li><strong>跳转</strong>：从指令本身中抽取一个字，并将这个字复制到程序计数（PC）中，以覆盖PC中原来的值。</li></ul></blockquote></li></ol><p>上面就是对于主要硬件的大致介绍，通过硬件的配合，我们的程序就能运行起来了。</p><h3 id="1-5高速缓存至关重要"><a href="#1-5高速缓存至关重要" class="headerlink" title="1.5高速缓存至关重要"></a>1.5高速缓存至关重要</h3><p>为什么说高速缓存至关重要呢？通过上面硬件的流程我们可以知道，程序的机器指令到运行的时候，要经过多次复制，为了提高性能，系统设计者需要设计一个东西使得复制操作尽快完成。然而加快处理器的运行速度比加快主存的运行速度要容易和便宜得多，也就说优化处理器性价比更高，从而系统设计者采用了高速缓存存储器（高速缓存），利用高速缓存的局部性原理，来提高性能。因而我们能够利用高速缓存将程序的性能提高一个数量级。</p><h3 id="1-6存储设备形成层次结构"><a href="#1-6存储设备形成层次结构" class="headerlink" title="1.6存储设备形成层次结构"></a>1.6存储设备形成层次结构</h3><p>计算机系统的存储设备都被组织成了一个存储器层次结构，如图，从上到下设备的访问速度越来越慢，而容量越来越大，造价也越来越便宜。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/image-20221214181429916.png" alt="image-20221214181429916"></p><p>我们可以通过利用对整个存储器层次结构的理解来提高程序性能。</p><h3 id="1-7操作系统管理硬件"><a href="#1-7操作系统管理硬件" class="headerlink" title="1.7操作系统管理硬件"></a>1.7操作系统管理硬件</h3><p>当我们运行输入命令或者运行程序的时候，其实他们并不是直接去访问我们的硬件的（键盘，显示器 等），而是需要通过一个“媒介”——操作系统。可以这样说，所有应用程序对应硬件的操作尝试都通过操作系统。这里的操作系统就好比一个对于程序与硬件的管理者，一个方面防止硬件被失控的应用程序滥用，另一方面向应用程序提供简单一致的机制来控制复制而又不相同的低级硬件设备。而操作系统通过，进程，虚拟内存，文件，这三个方面实现的。</p><h6 id="进程与线程"><a href="#进程与线程" class="headerlink" title="#进程与线程"></a>#进程与线程</h6><p>什么是进程呢？所谓进程就是操作系统对于一个正在运行的程序的一种抽象，换个方式来理解，一个程序从开始运行到结束这个过程，就是进程。而进程又是由线程组成的，线程指的就是我们程序里面一个个的执行单元。举个例子，当你打开音乐播放器，将音乐播放器运行起来，这个时候，就相当于一个进程，这个时候，你想听歌，这就相当于一个线程，如果你想在听歌的时候同时把歌曲下载下来，这个时候就变成了所谓的多线程。</p><h6 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="#虚拟内存"></a>#虚拟内存</h6><p>我们都知道我们的内存是有限，当我们运行多个进程的时候，就有可能出现主存不足的情况，因此虚拟空间就出现了。虚拟空间的作用就是创建一个更大的连续的空间——利用一部分磁盘的空间。由于是由主存和磁盘上空间上的，物理上并不是连续的，但是逻辑是连续的，虚拟一词就由此而来。</p><p>虚拟空间大致组成就如下图一般：</p><p><img lazyload="" src="/images/loading.svg" data-src="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/image-20221216233613136.png" alt="image-20221216233613136"></p><blockquote><ul><li><strong>程序代码和数据</strong> 。正如其名，这里面就是我们所写的代码和一些数据。</li><li><strong>堆</strong> 这里是我们个人可以管理的空间，比如，c语言中的malloc申请一片空间，free释放一片空间。</li><li><strong>共享库</strong> 这里面存放的是我们的一些c语言库，数学库等等，一些库的代码和数据。</li><li><strong>栈</strong> 这是由编译器管理的空间。存储着我们调用的函数，设置的变量和一些对象的引用，等等，由编译器分配。</li><li><strong>内核存虚拟内存</strong> 系统内核区域</li></ul></blockquote><h6 id="文件"><a href="#文件" class="headerlink" title="#文件"></a>#文件</h6><p>文件就是字节序列。就是一堆0,1构成的的集合体。万物皆文件，在系统里面的所有数据我们都可以称之为文件。</p><h3 id="1-8系统之间利用网络通信"><a href="#1-8系统之间利用网络通信" class="headerlink" title="1.8系统之间利用网络通信"></a>1.8系统之间利用网络通信</h3><p>我们的个人计算机，就是一个单独的系统，然而我们的计算机可以通过网络实现对于其他计算机的连接，这样我们单独的系统就可以连进一个大家庭了。利用网路完成信息的交互。实现上网。</p><p>比如我们去b站看视频。大致过程就是，我们本地的客户端，向着远程的服务端进行传输数据，发送我们的视频请求，服务端接收到数据之后，经过一系列的操作，将我们所请求的视频数据返回到我们本地的客服端，我们接收之后，客户端进行操作，然后显示到我们的显示屏上，这样我们就可以看到视频的内容了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/15/xin-pian-zhang/"/>
      <url>/2022/12/15/xin-pian-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一次搭建博客记录一下"><a href="#第一次搭建博客记录一下" class="headerlink" title="第一次搭建博客记录一下"></a>第一次搭建博客记录一下</h2><p>2022.12.15，记录一下二木的博客小屋的诞生。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
