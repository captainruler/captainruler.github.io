<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ollvm相关逆向题目的解决方法</title>
      <link href="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/"/>
      <url>/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/</url>
      
        <content type="html"><![CDATA[<h1 id="ollvm相关逆向题目的解决方法"><a href="#ollvm相关逆向题目的解决方法" class="headerlink" title="ollvm相关逆向题目的解决方法"></a>ollvm相关逆向题目的解决方法</h1><p>对于我们常见的ollvm混淆无非就三种，一种是控制流平坦化，一种是指令替换，一种是虚假控制流。针对这三种混淆，我们可以分别利用不同的方式来进行清除，在一定程度上有利于我们的分析，毕竟那那些让让望而生却的代码，感觉有点头大，就着我们所遇见的题目，进行简单的归纳一下我们对于其的解决方式。</p><h1 id="控制流平坦化"><a href="#控制流平坦化" class="headerlink" title="控制流平坦化"></a>控制流平坦化</h1><p>控制流平坦化的大致逻辑就是将我们的代码分割为许多的块，通过一个分发器将我们的代码各个块联系起来，结构就类似while() switch case的结构。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled.png" alt="Untitled"></p><p>控制流平坦化，这个看过都知道，不去混淆根本就看不了</p><p>去除混淆我们有一个大佬写的一个脚本，感觉还是非常有用的</p><p>一个简单的版本</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled1.png" alt="Untitled"></p><p>一个困难版本</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled2.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled3.png" alt="Untitled"></p><p><a href="ollvm%E7%9B%B8%E5%85%B3%E9%80%86%E5%90%91%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20e169461974154ef2b13378877ee5b2c8/am_graph.py">am_graph.py</a></p><p><a href="ollvm%E7%9B%B8%E5%85%B3%E9%80%86%E5%90%91%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20e169461974154ef2b13378877ee5b2c8/deflat.py">deflat.py</a></p><p>脚本的具体使用：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 deflat.py attachment <span class="number">0x005290</span>   <span class="comment">#python版本+脚本名+文件名+平坦化（main）起始地址</span></span><br></pre></td></tr></tbody></table></figure></div><p>去除之后感觉还是非常清晰的</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled4.png" alt="Untitled"></p><h1 id="虚假控制流"><a href="#虚假控制流" class="headerlink" title="虚假控制流"></a>虚假控制流</h1><p>对于虚假控制流，我们简单了解一下其原理。虚假控制流混淆通过加入含不透明谓词的条件跳转和永远不可以到达的基本块，来干扰IDA的控制流分析和反汇编。</p><p>下面有一个大佬对不透明谓词的解释。</p><p><a class="link" href="https://www.zhihu.com/question/46259412/answer/199689652">(65 封私信 / 22 条消息) 利用不透明谓词混淆代码的原理是什么？ - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p><p>举一个简单的例子：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">printf(<span class="string">"123'"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">printf(<span class="string">"2222"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>这个if下，在永真条件下，打印我们的2222是永远到达不了的，在逻辑上我们很好理解，但是会干扰我们的IDA控制分析，而且在一大串的混淆之下，不去除的话会让我们花很多时间在分析上。</p><p>就看一个实际例子[RoarCTF 2019]polyre</p><p>前面有个控制流平坦化去除平坦化之后我们可以发现，这题下面有很多永真但是没有执行的代码，但是因为它多，而且ida分析出来很混乱，会造成我分析起来很困难。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled5.png" alt="Untitled"></p><p>理解虚假控制流的原理，其实我们思考起来，想要去除它很简单。它不是有永真条件嘛，也就是说当我们运行一遍程序之后，走的路径全是需要执行的，因此只要我标记一下没有走的地方，将其全部nop掉即可。我们会想到一种方式就是通过我们的angr来模拟执行一下代码，然后将不执行的代码全部nop掉。</p><p>一个大佬写的关于此的研究文章，非常不错。</p><p><a class="link" href="https://bbs.kanxue.com/thread-266005.htm">[原创]利用angr符号执行去除虚假控制流-软件逆向-看雪-安全社区|安全招聘|kanxue.com<i class="fas fa-external-link-alt"></i></a></p><p>另一种就是直接从源头处理将不透明谓词改为0，这样我们ida也就能进行处理了</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line">st = <span class="number">0x403580</span>    //需要处理函数的起始地址</span><br><span class="line">end = <span class="number">0x4055FE</span>   //需要处理函数的结束地址</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch_nop</span>(<span class="params">start, end</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        idaapi.patch_byte(i, <span class="number">0x90</span>)  <span class="comment"># 修改指定地址处的指令 0x90是最简单的1字节nop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_instr</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">return</span> addr + idaapi.get_item_size(addr)  <span class="comment"># get_item_size获取指令或数据长度，这个函数的作用就是去往下一条指令</span></span><br><span class="line"></span><br><span class="line">addr = st</span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"ds:dword_603054"</span> <span class="keyword">in</span> idc.GetDisasm(addr):  <span class="comment"># GetDisasm(addr)得到addr的反汇编语句</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            addr = <span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"jnz"</span> <span class="keyword">in</span> idc.GetDisasm(addr):</span><br><span class="line">                dest = idc.get_operand_value(addr, <span class="number">0</span>)  <span class="comment"># 使用idc.get_operand_value来获取操作数</span></span><br><span class="line">                idaapi.patch_byte(addr, <span class="number">0xe9</span>)</span><br><span class="line">                idaapi.patch_byte(addr + <span class="number">5</span>, <span class="number">0x90</span>)</span><br><span class="line">                offset = dest - (addr + <span class="number">5</span>)</span><br><span class="line">                idaapi.patch_dword(addr + <span class="number">1</span>, offset)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"patch bcf: 0x%x"</span> % addr)</span><br><span class="line">                addr = <span class="built_in">next</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        addr = <span class="built_in">next</span></span><br></pre></td></tr></tbody></table></figure></div><p>我们看一下处理之后的代码，可以发现还是很清爽的。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled6.png" alt="Untitled"></p><h1 id="指令替换"><a href="#指令替换" class="headerlink" title="指令替换"></a>指令替换</h1><p>所谓指令替换，就是将我们的原来的计算指令，从一个简单易懂的，变成难以理解的，但是等效的代码指令。</p><p>举一个简单的例子</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> = <span class="number">1</span>+<span class="number">1</span></span><br><span class="line"><span class="number">2</span> = （<span class="number">10</span>+<span class="number">5</span>-<span class="number">12</span>）*<span class="number">12</span>-<span class="number">34</span></span><br></pre></td></tr></tbody></table></figure></div><p>这样就会加大我们的分析难度，下面有一个推荐的博客，介绍了一下常见的指令替换</p><p><a class="link" href="https://blog.csdn.net/qq_42308741/article/details/114579940">ollvm源码分析之指令替换（1）_ollvm 花指令-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p>以2023楚慧杯 babyre这道题为例子，我们去除了前面的控制流平坦化之后，我们进入我们的加密函数，可以发现一大串难以识别具体加密的混淆，可能通过逆向经验能猜出这个加密，但是如果遇到我们不熟悉的加密就有点困难了。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled7.png" alt="Untitled"></p><p>对于我们的指令替换的处理，有个大佬写一个ida的插件，关于去除指令替换的插件</p><p>d801插件（网上能下的）：</p><p><a href="ollvm%E7%9B%B8%E5%85%B3%E9%80%86%E5%90%91%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%20e169461974154ef2b13378877ee5b2c8/d810-master.zip">d810-master.zip</a></p><p>只需要将这个解压之后的文件，复制到我们的ida插件文件夹里面就行。</p><p>具体使用方法就是</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled8.png" alt="Untitled"></p><p>接着它会自动识别，我们只需要点击star即可</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled9.png" alt="Untitled"></p><p>然后针对伪代码，我们按f5重新分析即可</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/12/25/ollvm-xiang-guan-ni-xiang-ti-mu-de-jie-jue-fang-fa-e169461974154ef2b13378877ee5b2c8/Untitled10.png" alt="Untitled"></p><p>解完我们的指令替换，看起来舒服多了。</p><p>上面是针对一下比较标准的ollvm混淆，如果题目作者研究过ollvm混淆，针对原版混淆的解密可能就会失效了。对于做题倒是够用了，如果真的魔改了，到那个时候再学学，或者直接关闭ida吧.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>左值，右值，将亡值，左值引用，右值引用的归纳与辨析</title>
      <link href="/2023/12/04/zuo-zhi-you-zhi-jiang-wang-zhi-zuo-zhi-yin-yong-you-zhi-yin-yong-de-gui-na-yu-bian-xi-ff54a3ed8db64167a97c79bd50ffe6e5/"/>
      <url>/2023/12/04/zuo-zhi-you-zhi-jiang-wang-zhi-zuo-zhi-yin-yong-you-zhi-yin-yong-de-gui-na-yu-bian-xi-ff54a3ed8db64167a97c79bd50ffe6e5/</url>
      
        <content type="html"><![CDATA[<h1 id="左值，右值，将亡值，左值引用，右值引用的归纳与辨析"><a href="#左值，右值，将亡值，左值引用，右值引用的归纳与辨析" class="headerlink" title="左值，右值，将亡值，左值引用，右值引用的归纳与辨析"></a>左值，右值，将亡值，左值引用，右值引用的归纳与辨析</h1><p>Owner: 二木</p><h2 id="什么是左值，右值，将亡值？"><a href="#什么是左值，右值，将亡值？" class="headerlink" title="什么是左值，右值，将亡值？"></a>什么是左值，右值，将亡值？</h2><p>这个见字知意，简单的来说所谓左值，就是处于等号左边的值，右值就是等号右边的值。</p><p>比如</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>a就是左值，10就是右值，这个是简单的理解</p><p>用更准确的来说</p><p><strong>左值（lvalue）</strong>&nbsp;：表达式结束后依然存在的<strong>持久对象</strong>。</p><p><strong>右值（rvalue）</strong>&nbsp;：表达式结束后就不再存在的<strong>临时对象</strong>。</p><p>左值的英文简写为“lvalue”，右值的英文简写为“rvalue”。很多人认为它们分别是”left value”、”right value” 的缩写，其实不然。lvalue 是“loactor value”的缩写，可意为<code>存储在内存</code>中、有<code>明确存储地址</code>（可寻址）的数据，而 rvalue 译为 “read value”，指的是那些可以<code>提供数据值的数据</code>（不一定可以寻址，例如存储于寄存器中的数据）</p><p><strong>将亡值 ： 所谓将亡值，将亡。就是将要消失的值，有个很典型，也是将亡经常出现的地方的例子，就是移动构造函数</strong></p><h2 id="什么是左值引用-右值引用？"><a href="#什么是左值引用-右值引用？" class="headerlink" title="什么是左值引用,右值引用？"></a>什么是左值引用,右值引用？</h2><p>对于引用在学习c++基础应该还是比较了解的</p><p>所谓<strong>引用</strong>就是给一个存在的对象定义的别名，一个变量可以有多个引用，引用必须初始化，引用只能在初始化的时候引用一次，不能更改引用其他变量。这就是一个一对多的映射，相当于一个地址存在对应存在着多个映射，在不同的别名下，都能访问到这个位置。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;a = num;</span><br></pre></td></tr></tbody></table></figure></div><p>这就相当于对num取了一个别名叫a.这个引用也叫<strong>左值引用</strong></p><h3 id="对于右值引用的引入"><a href="#对于右值引用的引入" class="headerlink" title="对于右值引用的引入"></a>对于右值引用的引入</h3><p>引用使用“&amp;”符号，但是此种引用有一个缺陷，即正常情况下只能操作 C++ 中的左值，无法对右值添加引用。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = num; <span class="comment">//正确</span></span><br><span class="line"><span class="type">int</span> &amp;c = <span class="number">10</span>; <span class="comment">//不行</span></span><br></pre></td></tr></tbody></table></figure></div><p>编译器允许我们为 num 左值建立一个引用，但不可以为 10 这个右值建立引用。</p><p>“&amp;”表示的引用又称为左值引用。</p><p>常量左值引用既可以操作左值，也可以操作右值。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b = num;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;c = <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>右值往往是没有名称的，因此要使用它只能借助引用的方式。这就产生一个问题，实际开发中我们可能需要对右值进行修改（主要是实现移动语义时就需要），显然左值引用的方式是行不通的。</p><p>右值引用，用 “&amp;&amp;” 表示。</p><h3 id="右值引用的使用"><a href="#右值引用的使用" class="headerlink" title="右值引用的使用"></a>右值引用的使用</h3><p>和声明左值引用一样，右值引用也必须立即进行初始化操作，且只能使用右值进行绑定</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int &amp;&amp; a = num;  //右值引用不能初始化为左值</span></span><br><span class="line"><span class="type">int</span> &amp;&amp; a = <span class="number">10</span>;</span><br></pre></td></tr></tbody></table></figure></div><p> 右值引用可以修改右值</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp; a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">11</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;   <span class="comment">//输出结果为11</span></span><br></pre></td></tr></tbody></table></figure></div><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>&amp;&amp; a = <span class="number">10</span>;<span class="comment">//编译器不会报错</span></span><br></pre></td></tr></tbody></table></figure></div><p>但这种形式的右值引用并没有实际用处。右值引用主要用于**<code>移动语义和完美转发</code>**，其中前者需要有修改右值的权限</p><h2 id="什么是将亡值？"><a href="#什么是将亡值？" class="headerlink" title="什么是将亡值？"></a>什么是将亡值？</h2><p>将亡值是<strong>右值的一种特殊类型，</strong>表示该右值即<strong>将被销毁或移动</strong>。通过使用将亡值，我们可以利用移动语义来避免不必要的复制操作，提高代码的效率。</p><h3 id="将亡值的一下使用："><a href="#将亡值的一下使用：" class="headerlink" title="将亡值的一下使用："></a>将亡值的一下使用：</h3><p>将亡值有三种常用的情况，分别为移动语义，完美转发，右值引用。</p><p><strong>移动语义：</strong></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::string <span class="title">createString</span><span class="params">()</span> </span>{</span><br><span class="line">    std::string str = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="keyword">return</span> str;  <span class="comment">// 返回将亡值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">std::string str = <span class="built_in">createString</span>();  <span class="comment">// 将亡值被移动到 str 中</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>像这里，我们声明的std::string str = “Hello”;由于在函数内部，当退出函数的时候，std::string str = “Hello”;这个字符串就会被销毁，然而<code>createString()</code>&nbsp;函数返回将亡值（<code>str</code>），然后将亡值被移动到&nbsp;<code>str</code>&nbsp;变量中，避免了不必要的字符串复制操作。就使得函数内部str的”Hello”;的所有权，转移到了函数外std::string str = createString();   这个str上，实现了所有权的转移。</p><p><strong>完美转发：</strong></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">forwardValue</span><span class="params">(T&amp;&amp; value)</span> </span>{</span><br><span class="line">    <span class="built_in">process</span>(std::forward&lt;T&gt;(value));  <span class="comment">// 完美转发将亡值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">std::string str = <span class="string">"Hello"</span>;</span><br><span class="line">forwardValue(std::<span class="built_in">move</span>(str));  <span class="comment">// 将亡值被完美转发</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>在这个例子中，<code>forwardValue()</code>&nbsp;函数使用完美转发来接收参数，并将参数完美转发给&nbsp;<code>process()</code>&nbsp;函数。通过使用&nbsp;<code>std::forward</code>，将亡值的值类别被保留，确保参数以原始的值类别传递。</p><p><strong>右值引用：</strong></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">createVector</span><span class="params">()</span> </span>{</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">    <span class="keyword">return</span> vec;  <span class="comment">// 返回将亡值</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; &amp;&amp; rvalueRef = <span class="built_in">createVector</span>();  <span class="comment">// 将亡值绑定到右值引用</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>在这个例子中，<code>createVector()</code>&nbsp;函数返回一个将亡值（<code>vec</code>），然后将亡值通过右值引用&nbsp;<code>&amp;&amp;</code>&nbsp;绑定到&nbsp;<code>rvalueRef</code>&nbsp;变量上。</p><p>像上面几种，对将亡值的使用，使得我们的代码，并没有对数据进行了大量的复制，就将我们的数据从一个变量转移到另一个变量上，对于处理大的数据的时候，这样格外节省内存资源与效率。</p><p><a class="link" href="https://avdancedu.com/a39d51f9/">C++高阶知识：深入分析移动构造函数及其原理 | 音视跳动科技 (avdancedu.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/Jacky_Feng/article/details/120742414">【C++】左值和右值、左值引用（&amp;）和右值引用（&amp;&amp;）_c++ arg&amp;&amp;_Jacky_Feng的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>std::move详解</title>
      <link href="/2023/12/04/std-move-xiang-jie-7ef52dbec8fd49ca9521157a058ca556/"/>
      <url>/2023/12/04/std-move-xiang-jie-7ef52dbec8fd49ca9521157a058ca556/</url>
      
        <content type="html"><![CDATA[<h1 id="std-move详解"><a href="#std-move详解" class="headerlink" title="std::move详解"></a>std::move详解</h1><p>Owner: 二木</p><p>在我们使用移动构造函数的时候,我们会用到move</p><p>例如:</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function">MyVector <span class="title">vec2</span><span class="params">(std::move(vec1))</span></span>;</span><br></pre></td></tr></tbody></table></figure></div><p>将我们的vec1从左值强制转换为右值</p><h2 id="std-move源码"><a href="#std-move源码" class="headerlink" title="std::move源码"></a>std::move源码</h2><p>这里运用到了模板的知识</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> remove_reference&lt;T&gt;::<span class="function">type&amp;&amp; <span class="title">move</span><span class="params">(T&amp;&amp; t)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> static_case&lt;<span class="keyword">typename</span> remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这里将remove_reference<t>::type&amp;&amp;重命名为了move, 内部返回了</t></p><p>这里使用的是元编程中的类型萃取表达式，remove_reference萃取模板的源码</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">remove_reference</span> {</span><br><span class="line">    <span class="keyword">using</span> type = T;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;   <span class="comment">//如果传入的值为左值引用，返回传入传入类型的原本类型</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">remove_reference</span>&lt;T&amp;&gt; {</span><br><span class="line">    <span class="keyword">using</span> type = T;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//如果传入的值为右值引用，返回传入传入类型的原本类型</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">remove_reference</span>&lt;T&amp;&amp;&gt; {</span><br><span class="line">    <span class="keyword">using</span> type = T;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>remove_reference这里使用了模板的特化与偏特化，通过传入的类型来命中对应的特化模板，两个特化模板实现的操作都是将传入的引用去除。使得其能够返回我们原来传入的非引用类型。</p><p>我们继续看到这个代码</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> remove_reference&lt;T&gt;::<span class="function">type&amp;&amp; <span class="title">move</span><span class="params">(T&amp;&amp; t)</span> </span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> static_case&lt;<span class="keyword">typename</span> remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><code>typename remove_reference&lt;T&gt;::type&amp;&amp;</code> 就是我们的返回值类型，typename的作用是告诉编译器我们这里的<code>remove_reference&lt;T&gt;::type&amp;&amp;</code> 是表示的是一个数据类型</p><p>对于<code>static_case</code>  的常用的用法</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_case</span>&lt;<span class="type">int</span>&gt;(a) </span><br></pre></td></tr></tbody></table></figure></div><p>这里表示的是将我们的a强制转换为int类型</p><p>对于强制转换c++有四种使用发生，下面有个大佬写的总结非常不错。</p><p><a class="link" href="https://c.biancheng.net/view/410.html">C++强制类型转换运算符（static_cast、reinterpret_cast、const_cast和dynamic_cast） (biancheng.net)<i class="fas fa-external-link-alt"></i></a></p><p><code>static_case&lt;typename remove_reference&lt;T&gt;::type&amp;&amp;&gt;(t)</code> 对于这一句，就是调用我们的一个强制类型准换符<code>static_case</code> 将我们传入的T 强制转换为<code>typename remove_reference&lt;T&gt;::type&amp;&amp;</code> 类型，而我们的<code>typename remove_reference&lt;T&gt;::type</code> 的返回值为就是传入数据的非引用类型，然后加上外面的<code>&amp;&amp;</code> 就变成了 T &amp;&amp;，从而完成了左值对于右值的转换。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于typename与using/typedef的使用归纳</title>
      <link href="/2023/12/04/guan-yu-typename-yu-using-typedef-de-shi-yong-gui-na-43f9f49137134a508d0bf0315fc31f27/"/>
      <url>/2023/12/04/guan-yu-typename-yu-using-typedef-de-shi-yong-gui-na-43f9f49137134a508d0bf0315fc31f27/</url>
      
        <content type="html"><![CDATA[<h1 id="关于typename与using-x2F-typedef的使用归纳"><a href="#关于typename与using-x2F-typedef的使用归纳" class="headerlink" title="关于typename与using/typedef的使用归纳"></a>关于typename与using/typedef的使用归纳</h1><p>Owner: 二木</p><h1 id="typename"><a href="#typename" class="headerlink" title="typename"></a>typename</h1><p>其实对于typename.在以前的编程中并没有typename这个关键字的，在以前我们写模板时，使用的</p><p>都是class这个关键字</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; x, T&amp; y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">int</span> temp;</span><br><span class="line">temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在编译器中，我们使用这个写法也能通过编译</p><p>在当时创造者为 了省掉不必要的关键字，所以给了calss这么多的特性</p><h2 id="那为啥calss不用了而加入了typename呢？"><a href="#那为啥calss不用了而加入了typename呢？" class="headerlink" title="那为啥calss不用了而加入了typename呢？"></a>那为啥calss不用了而加入了typename呢？</h2><p>对于我们的写的类,对于我们类成员外部引用常用的就是这三种，我们常常使用<code>类名::静态成员变量名</code></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Myclass</span></span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> A;  <span class="comment">//静态数据成员</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">B</span><span class="params">()</span></span>; <span class="comment">//静态函数成员</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> C; <span class="comment">//嵌套类型</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>在针对下面的这中情况</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">T::iterator * iter;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>我们会发现这里的语义发生歧义了。如果T::iterator表示静态数据成员，那么这里表示的是两数相乘，如果这里的T::iterator表示嵌套类型，（假设是针对与int 的重命名C） 那么这里的语句就变成了声明一个名为iter的int指针。这样编译器就不知道具体你想要表示的啥。</p><p>后面就出现了tpyename来进行区分</p><p>typename这个关键字用于指出模板声明（或定义）中的非独立名称（dependent names）是类型名，而非变量名：</p><p>也就是说，c++直接给我我们一个关键字，专门来处理类型名与变量名的歧义问题，使用了typename的作用就是明确的告知编译器，这里的是类型名，而没有歧义。</p><p>所以现在的模板，我们都是采用的这种写法。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; x, T&amp; y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  <span class="type">int</span> temp;</span><br><span class="line">temp = x;</span><br><span class="line">  x = y;</span><br><span class="line">  y = temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="对于using与typedef的使用"><a href="#对于using与typedef的使用" class="headerlink" title="对于using与typedef的使用"></a>对于using与typedef的使用</h1><h2 id="using"><a href="#using" class="headerlink" title="using"></a>using</h2><h3 id="1、使用命名空间"><a href="#1、使用命名空间" class="headerlink" title="1、使用命名空间"></a>1、使用命名空间</h3><p>我们写代码会这样使用</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> namespase std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  ..............</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure></div><p>using的用途就是导入我们的命名空间，像这里就是将我们的std命名空间导入到我们的代码中，这样我们在调用std命名空间中的东西就不用写std::了直接使用即可。</p><h3 id="2、定义别名"><a href="#2、定义别名" class="headerlink" title="2、定义别名"></a>2、定义别名</h3><p>对于定义别名我们或许很快能想到typedef，对我们的名称进行取别名，</p><p>对于typedef的使用</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> myint <span class="type">int</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>using也有对数据取别名的作用，其语法为</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> myint = <span class="type">int</span>;</span><br></pre></td></tr></tbody></table></figure></div><p>在一般的使用上，using与typedef并没有很大的区别</p><p>但是，对于定义别名上， typename 不支持给模板定义别名，而可以通过使用 using 来为一个模板定义别名</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> mymap = map&lt;<span class="type">int</span>, T&gt;;</span><br></pre></td></tr></tbody></table></figure></div><p>在模板中我们常常见到使用using来对数据进行取别名，一般情况下对我们常常见到使用typedef来对其取别名。</p><p><a class="link" href="https://www.cnblogs.com/LubinLew/p/Cpp-ClassMember.html">C++类的成员 - LubinLew - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://zhuanlan.zhihu.com/p/335777990">C++typename的由来和用法 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://zhuanlan.zhihu.com/p/617664673">C++ typedef &amp; typename知识点总结 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>构造函数相关知识</title>
      <link href="/2023/12/01/gou-zao-han-shu-xiang-guan-zhi-shi-76466d74d74d493b8cbf7cd2d7eaf438/"/>
      <url>/2023/12/01/gou-zao-han-shu-xiang-guan-zhi-shi-76466d74d74d493b8cbf7cd2d7eaf438/</url>
      
        <content type="html"><![CDATA[<h1 id="构造函数相关知识"><a href="#构造函数相关知识" class="headerlink" title="构造函数相关知识"></a>构造函数相关知识</h1><h3 id="关于普通构造函数的两种写法"><a href="#关于普通构造函数的两种写法" class="headerlink" title="关于普通构造函数的两种写法"></a>关于普通构造函数的两种写法</h3><p>一种是我们常见的普通写法</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">text</span>(<span class="type">int</span> num1, <span class="type">int</span> num2)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">this</span>-&gt;a = num1;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = num2;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">geta</span><span class="params">()</span></span>{<span class="keyword">return</span> a;}</span><br><span class="line"><span class="keyword">private</span> : </span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b ;</span><br><span class="line">    </span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">text <span class="title">arr</span><span class="params">(<span class="number">10</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; arr.<span class="built_in">geta</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>另一种就是初始化列表的使用</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> <span class="comment">//从算法哥们那里学来的万能开头，平常使用很方便，但是加载的库很多，写项目不能使用</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">text</span>(<span class="type">int</span> num1, <span class="type">int</span> num2): <span class="built_in">a</span>(num1),<span class="built_in">b</span>(num2) <span class="comment">//直接进行初始</span></span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">geta</span><span class="params">()</span></span>{<span class="keyword">return</span> a;}</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> : </span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b ;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">text <span class="title">arr</span><span class="params">(<span class="number">10</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    cout &lt;&lt; arr.<span class="built_in">geta</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>使用构造函数初始化列表的<strong>好处</strong>是可以在对象创建时直接初始化成员变量，而不是在构造函数体内部进行赋值操作。这样可以提高效率，并且在某些情况下，还可以避免一些潜在的问题，比如 const 成员变量或引用类型成员变量的初始化。</p><h2 id="复制构造函数（拷贝构造函数）"><a href="#复制构造函数（拷贝构造函数）" class="headerlink" title="复制构造函数（拷贝构造函数）"></a>复制构造函数（拷贝构造函数）</h2><p>在我们写代码的时候，会遇到这样一个需求，我们需要将我们的这个现有的类，复制给另外一个新创建的一个类。c++中会提供默认的拷贝构造函数，但是默认构造函数实现的拷贝为浅拷贝，也就是说，如果在类中如果有指针操作，在调用两个对应的析构函数的时候，就会造成对同一空间释放两次的操作，会出现问题，因此就需要我们自己在类中写一个拷贝构造函数来拷贝我们类中的数据。进行显示的复制</p><p>下面是一个简单的演示，关于怎么调用与怎么写：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">text</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">text</span>(){  <span class="comment">//无参构造函数</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">text</span>(<span class="type">int</span> num1, <span class="type">int</span> num2): <span class="built_in">a</span>(num1),<span class="built_in">b</span>(num2){  <span class="comment">//初始化列表式的构造函数</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">geta</span><span class="params">()</span></span>{<span class="keyword">return</span> a;}</span><br><span class="line"></span><br><span class="line">    <span class="built_in">text</span>(text&amp; T)   <span class="comment">//复制构造函数</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">this</span>-&gt;a =T.a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b =T.b;</span><br><span class="line">    }</span><br><span class="line"><span class="keyword">private</span> : </span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b ;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">text <span class="title">arr</span><span class="params">(<span class="number">10</span>,<span class="number">30</span>)</span></span>; </span><br><span class="line">    cout &lt;&lt; arr.<span class="built_in">geta</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="function">text <span class="title">arr2</span><span class="params">(arr)</span></span>;          <span class="comment">//调用arr2的拷贝构造函数对于arr中的数据进行拷贝</span></span><br><span class="line">    cout &lt;&lt; arr2.<span class="built_in">geta</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h2 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h2><p>在我们显式的调用复制构造函数我们可以发现，我们调用复制构造函数，使用的是一个一个的进行复制，也就是说在中途，会产生一个空间的周转，从而产生浪费，试想一下，如果我要复制的数据很多，比如一万个，甚至更多，这样就会对空间产生巨大的浪费，因此我们需要使用移动构造函数来帮我们解决这个问题。</p><p>对于移动构造，我们对常常听到移动语义的概念。所谓移动语义，指的就是以移动而非深拷贝的方式初始化含有指针成员的类对象。简单的理解，移动语义指的就是将其他对象（通常是临时对象）拥有的内存资源“移为己用”。实现将资源的所有权从一个对象转移到另一个对象，而不进行资源的复制。移动语义允许将右值（临时对象、将被销毁的对象）的资源转移到新的对象中，而不进行资源的复制。这对于大型对象或拥有独占资源的对象来说，可以显著提高性能。</p><p>移动构造函数和移动赋值运算符通常使用<strong>右值引用（R-value reference）</strong>来实现。通过使用&nbsp;<code>&amp;&amp;</code>&nbsp;符号来声明右值引用，可以明确指明一个对象是一个右值，从而触发移动语义。</p><p>下面是一个移动构造函数的实现</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVector</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="built_in">MyVector</span>() : <span class="built_in">data</span>(<span class="literal">nullptr</span>), <span class="built_in">size</span>(<span class="number">0</span>) {}</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动构造函数</span></span><br><span class="line">    <span class="built_in">MyVector</span>(MyVector &amp;&amp;other) : <span class="built_in">data</span>(other.data), <span class="built_in">size</span>(other.size) <span class="comment">//</span></span><br><span class="line">    {</span><br><span class="line">        other.data = <span class="literal">nullptr</span>; <span class="comment">// 将源对象的指针置为空，避免重复释放资源</span></span><br><span class="line">        other.size = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数</span></span><br><span class="line">    ~<span class="built_in">MyVector</span>()</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用链表,实现元素的添加,动态存储</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addElement</span><span class="params">(<span class="type">int</span> element)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="type">int</span> *newData = <span class="keyword">new</span> <span class="type">int</span>[size + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        {</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        }</span><br><span class="line">        newData[size] = element;</span><br><span class="line">        <span class="keyword">delete</span>[] data;</span><br><span class="line">        data = newData;</span><br><span class="line">        size++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">printElements</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        {</span><br><span class="line">            std::cout &lt;&lt; data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        }</span><br><span class="line">        std::cout &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> *data; <span class="comment">//链表头</span></span><br><span class="line">    <span class="type">int</span> size; <span class="comment">//实时数组大小</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// 创建一个 MyVector 对象并添加元素</span></span><br><span class="line">    MyVector vec1;</span><br><span class="line">    vec1.<span class="built_in">addElement</span>(<span class="number">1</span>);</span><br><span class="line">    vec1.<span class="built_in">addElement</span>(<span class="number">2</span>);</span><br><span class="line">    vec1.<span class="built_in">addElement</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用移动构造函数创建一个新的 MyVector 对象,vec1 被释放, vec1 不再包含元素</span></span><br><span class="line">    <span class="function">MyVector <span class="title">vec2</span><span class="params">(std::move(vec1))</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印 vec2 的元素</span></span><br><span class="line">    vec2.<span class="built_in">printElements</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这里通过使用move函数将左值强制转化为右值.这里我们可以看到, 如果我们使用普通的构造函数, 在使用深拷贝的时候,需要将我们内存中的所有数据都要一次复制到一个新的空间中去,如果我们建立的这个数组非常大的话,这对于内存来说是一个极大的浪费,因此使用移动构造,使用转移所有权的方式,将我们的一个类下的数据,转移到另一个类之下,这样就避免的内存空间巨大的无谓使用, 实现了提高代码的效率和性能。</p><p><a class="link" href="https://zhuanlan.zhihu.com/p/168787937">C++构造函数的三种写法 - 知乎 (zhihu.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://avdancedu.com/a39d51f9/">C++高阶知识：深入分析移动构造函数及其原理 | 音视跳动科技 (avdancedu.com)<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++命名空间（std::）</title>
      <link href="/2023/11/24/c-ming-ming-kong-jian/"/>
      <url>/2023/11/24/c-ming-ming-kong-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="什么需要命名空间？"><a href="#什么需要命名空间？" class="headerlink" title="什么需要命名空间？"></a>什么需要命名空间？</h1><p>我们知道，在我们写大型项目的时候，可能需要合作，这个时候就可能出现，文件一中有一个swap函数，文件二中也有一个swap函数，当我们写主程序的时候，调用swap,那会调用哪个swap函数呢？为了解决像这样的问题，我们出现了命名空间</p><p>在我们写代码的时候就写一个text1命名空间，里面放swap,再写一个text2命名空间里面再放另一个swap,在调用的时候，就不会出现冲突的问题了。</p><h1 id="命名空间的书写"><a href="#命名空间的书写" class="headerlink" title="命名空间的书写"></a>命名空间的书写</h1><p><strong>例子：</strong></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> text1 <span class="comment">//声明一个命名空间</span></span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> num =<span class="number">10</span>; <span class="comment">//数据</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span>   <span class="comment">//swap函数的具体实现</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">namespace</span> text2   </span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">float</span> &amp;a, <span class="type">float</span> &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">70</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">20</span>, d = <span class="number">90</span>;</span><br><span class="line">    text1::<span class="built_in">swap</span>(a, b);  <span class="comment">//调用text1命名空间下的swap函数</span></span><br><span class="line">    text2::<span class="built_in">swap</span>(c, d);  </span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; c &lt;&lt; <span class="string">" "</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这里text1::中的：：表示**作用域限定符::**访问命名空间，：：前面代表得是我们的命名空间，：：后面代表的是我们要调用的东西，可以是函数，或者是一个数据，例如可以</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text1::num</span><br></pre></td></tr></tbody></table></figure></div><p>通过这样来获取text1命名空间中的num中的值</p><h3 id="命名空间的嵌套"><a href="#命名空间的嵌套" class="headerlink" title="命名空间的嵌套"></a>命名空间的嵌套</h3><p>命名空间是可以嵌套的</p><p>我们修改一下上面的代码，将text2嵌入text1中去</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> text1</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">namespace</span> text2</span><br><span class="line">    {</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">float</span> &amp;a, <span class="type">float</span> &amp;b)</span></span></span><br><span class="line"><span class="function">        </span>{</span><br><span class="line">            <span class="type">int</span> temp;</span><br><span class="line">            temp = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">70</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">20</span>, d = <span class="number">90</span>;</span><br><span class="line">    text1::<span class="built_in">swap</span>(a, b);</span><br><span class="line">    text1::text2::<span class="built_in">swap</span>(c, d);<span class="comment">//调用嵌套后的函数</span></span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; c &lt;&lt; <span class="string">" "</span> &lt;&lt; d &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="std-的使用"><a href="#std-的使用" class="headerlink" title="std::的使用"></a>std::的使用</h1><p>我们看其他人的代码的时候总会看到这样写的代码(就上面举例的代码）</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt; std::endl;</span><br></pre></td></tr></tbody></table></figure></div><p>通过上面的例子，我们可以类似的解决这个问题，这里的意思就是调用std命名空间下的cout函数与调用endl函数。</p><p>在写代码时，我们也会见到这样的写法</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{ </span><br><span class="line">    cout&lt;&lt;<span class="string">"this is texe one"</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>这里使用了了一个</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></tbody></table></figure></div><p>使用using namespace引入命名空间std中的所有成员，并对其直接使用，因此写的时候我们就可以省略std::，从而简化代码。</p><h1 id="不建议直接导入全部命名空间"><a href="#不建议直接导入全部命名空间" class="headerlink" title="不建议直接导入全部命名空间"></a>不建议直接导入全部命名空间</h1><p>针对于自己写一个小的程序，直接使用类似的using namespace std;确实能简化部分代码，但是其实并不建议直接这样写的，因为我们写命名空间的目的就是为了解决命名冲突的问题，如果我们将命名空间全部导入我们的代码中，一方面会造成我们的文件变大，另一方面与我使用命名空间背道而驰。</p><p>举一个例子(错误示范）：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> text1;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> text2;</span><br><span class="line"><span class="keyword">namespace</span> text1</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">namespace</span> text2</span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">float</span> &amp;a, <span class="type">float</span> &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="type">int</span> temp;</span><br><span class="line">        temp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">70</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">20</span>, d = <span class="number">90</span>;</span><br><span class="line">   <span class="built_in">swap</span>(a, b); <span class="comment">//调用哪一个？</span></span><br><span class="line">   <span class="built_in">swap</span>(c, d);</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b &lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; <span class="string">" "</span> &lt;&lt; d &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>可以发现，我们脑抽了才这样写，全部导入了，就相当于没有写命名空间。因此这就是是为什么大多数都不建议我们使用using namespace std;将其命名空间库全部导入。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>模板知识</title>
      <link href="/2023/11/22/mo-ban-zhi-shi/"/>
      <url>/2023/11/22/mo-ban-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="模板知识"><a href="#模板知识" class="headerlink" title="模板知识"></a>模板知识</h1><p>模板，学习c++，只要深入一点，我们都会解接触到的，然而，就简单的函数模板来说，理解起来并不困难，但是随着深入的学习，我们会发现，c++就开始变成”天书”，各种组合让人难以理解，或者说，得花一些时间去分析才知道它到底是什么？刚开始学习c++的时候，当时因为学的比较浅，感觉和c的区别不是很大，就是多了一个面向对象而已，不过如此。随着深入的学习，恨不得扇当时自己两巴掌，越深入学习，便越感觉c++精妙与强大，当然每个语言都有其优缺点，c++做为一门古老的c语言发展而来的语言，难免相对来说有一些遗留的“不好”的操作，这个每个语言都会存在的，这个学多了我们自然会知道各种特点。</p><h1 id="我们为什么需要模板？"><a href="#我们为什么需要模板？" class="headerlink" title="我们为什么需要模板？"></a>我们为什么需要模板？</h1><p>对于为什么需要模板？我们在网上应该可以看到许多文章都是用的一个很经典的例子。</p><p>这里我们也举例这个例子</p><p>我们在编程中会遇到这样一个场景，我们写一个交换函数</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>像这样，我们写出了一个对于int类型数据的交换，但是，下一次我需要对两个float类型的数据进行交换，我们就又需要写一个函数来进行接收，下次如果需要double,需要char,需要long……….，如果这样代码就太过于冗杂的，这个时候，模板就产生了。</p><p>我们写一个模板函数</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    T temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>T相当于我们不知道的类型的代替，T当我们传入什么类型，我们的编译器就行帮我们推导出它的类型，然后T就变成了那个类型</p><p>比如我们传入</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> a = <span class="number">123.222</span>,b = <span class="number">3123.22</span>;</span><br><span class="line"><span class="built_in">swap2</span>(a,b)</span><br></pre></td></tr></tbody></table></figure></div><p>这里的T就会推导成float.</p><h1 id="模板的使用"><a href="#模板的使用" class="headerlink" title="模板的使用"></a>模板的使用</h1><p>我们写模板主要写的是两个方向，一个是写函数模板，一个是写结构体模板</p><h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><p>对于函数模板我们前面就已经看到了</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(T &amp;a, T &amp;b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    T temp;</span><br><span class="line">    temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><code>template</code>是模板关键字，其表示后面即将定义一个模板。后面尖括号中的就是「模板参数」，这里的T 就是一个占位符号，也就是对应推导出的类型，如果传入int类型，那么T 就相当于int. 而且这里的T 是我们给它的名字，其实可以写成T1 , T2 ,T3,t123，都行。</p><p>这里我们再声明一个不一样的a,b类型都行，然后函数里面对其进行操作</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(T a, T2 b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  std::cout&lt;&lt;a&lt;&lt;b&lt;&lt;std::endl;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>对于这里的调用，有两种方式，一种是显式推导，一种是编译器进行隐式推导</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">text</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">swap2</span>&lt;<span class="type">int</span>&gt;(a,b);<span class="comment">//显式的告诉编译器，我们传入的是int类型</span></span><br><span class="line"><span class="built_in">swap2</span>&lt;<span class="type">int</span>&gt;(a,b); <span class="comment">//让编译器进行隐式的推导</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><h2 id="模板类"><a href="#模板类" class="headerlink" title="模板类"></a>模板类</h2><p>对于模板类，我们有两种写法</p><p>一种是用class来进行声明</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> {</span><br><span class="line">  T1 t1;</span><br><span class="line">  T2 t2;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>一种是用struct来进行声明</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Test</span> {</span><br><span class="line">  T1 t1;</span><br><span class="line">  T2 t2;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></div><p>这两种方法声明的类是等价的</p><p>在模板类中，对于两种关键词的声明，如果是用于「生成对象」的模板类，我们一般习惯用<code>class</code>进行声明，而对于「模板元编程」的静态语言描述中，我们更习惯用<code>struct</code> 进行声明。</p><p>对于c++中来说,struct与class其实是很相似的，在某些时候甚至可以等价，struct内部也可以声明一个函数啥的。class与struct的最大的区别主要在于默认权限上，class的默认权限是private,而struct的默认权限是public。</p><h3 id="类模板的实例化"><a href="#类模板的实例化" class="headerlink" title="类模板的实例化"></a>类模板的实例化</h3><p>类模板的实例化也有两种方式</p><p><strong>显式的定义类型</strong></p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyContainer</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MyContainer</span>(<span class="type">const</span> T&amp; value) : <span class="built_in">data</span>(value) {}</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>{</span><br><span class="line">    std::cout &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">  }</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T data;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="function">MyContainer&lt;<span class="type">int</span>&gt; <span class="title">container1</span><span class="params">(<span class="number">5</span>)</span></span>;  <span class="comment">// 使用 int 类型实例化 MyContainer</span></span><br><span class="line">  container1.<span class="built_in">print</span>();  <span class="comment">// 输出: 5</span></span><br><span class="line"></span><br><span class="line">  <span class="function">MyContainer&lt;<span class="type">double</span>&gt; <span class="title">container2</span><span class="params">(<span class="number">3.14</span>)</span></span>;  <span class="comment">// 使用 double 类型实例化 MyContainer</span></span><br><span class="line">  container2.<span class="built_in">print</span>();  <span class="comment">// 输出: 3.14</span></span><br><span class="line"></span><br><span class="line">  <span class="function">MyContainer&lt;std::string&gt; <span class="title">container3</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;  <span class="comment">// 使用 std::string 类型实例化 MyContainer</span></span><br><span class="line">  container3.<span class="built_in">print</span>();  <span class="comment">// 输出: Hello</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>隐式的自动推导</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyContainer</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MyContainer</span>(<span class="type">const</span> T&amp; value) : <span class="built_in">data</span>(value) {}</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>{</span><br><span class="line">    std::cout &lt;&lt; data &lt;&lt; std::endl;</span><br><span class="line">  }</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  T data;</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="function">MyContainer&lt;<span class="type">int</span>&gt; <span class="title">container1</span><span class="params">(<span class="number">5</span>)</span></span>;  <span class="comment">// 使用 int 类型实例化 MyContainer</span></span><br><span class="line">  container1.<span class="built_in">print</span>();  <span class="comment">// 输出: 5</span></span><br><span class="line">  <span class="function">MyContainer&lt;<span class="type">double</span>&gt; <span class="title">container2</span><span class="params">(<span class="number">3.14</span>)</span></span>;  <span class="comment">// 使用 double 类型实例化 MyContainer</span></span><br><span class="line">  container2.<span class="built_in">print</span>();  <span class="comment">// 输出: 3.14</span></span><br><span class="line">  <span class="function">MyContainer&lt;std::string&gt; <span class="title">container3</span><span class="params">(<span class="string">"Hello"</span>)</span></span>;  <span class="comment">// 使用 std::string 类型实例化 MyContainer</span></span><br><span class="line">  container3.<span class="built_in">print</span>();  <span class="comment">// 输出: Hello</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>对于类模板的实例化，我们使用时，如果类型知道，防止错误，最好是我们进行指定的显式推导</p><h3 id="对于类模板的重命名"><a href="#对于类模板的重命名" class="headerlink" title="对于类模板的重命名"></a>对于类模板的重命名</h3><p>在学c编程的时候，我们接触的很多都是使用typedef</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> enco <span class="comment">//将int重命名为enco，之后enco就能声明int类型数据了</span></span><br></pre></td></tr></tbody></table></figure></div><p>C++中的类型重命名主要有两种方法，一种是使用<code>typedef</code>，另一种是使用<code>using</code>，它们都支持模板生成，并且效果是相同的。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的模板类</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">size_t</span> size&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span> </span><br><span class="line">{</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//对模板偏特化作用的模板重命名</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> DefaultArray = Array&lt;T, <span class="number">16</span>&gt;;  <span class="comment">//确定了其中一个值或者类型，就称之为偏特化</span></span><br><span class="line"><span class="comment">//重命名了一个DefaultArray来替代声明Array&lt;T, 16&gt;</span></span><br><span class="line"><span class="comment">//typedef语法</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typedef</span> DefaultArray&lt;T *&gt; DefaultPtrArray; <span class="comment">//这里使用了模板嵌套，将DefaultPtrArray，重命名为</span></span><br><span class="line"><span class="comment">//DefaultArray&lt;T *&gt;,也就是Array&lt;T *, 16&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Demo</span><span class="params">()</span> </span>{</span><br><span class="line">  DefaultArray&lt;<span class="type">int</span>&gt; arr1; <span class="comment">// 相当于Array&lt;int, 16&gt; arr1;</span></span><br><span class="line">  DefaultPtrArray&lt;<span class="type">char</span>&gt; arr2; <span class="comment">// 相当于Array&lt;char *, 16&gt; arr2;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h3 id="关于模板需要注意的地方"><a href="#关于模板需要注意的地方" class="headerlink" title="关于模板需要注意的地方"></a>关于模板需要注意的地方</h3><p>我们实例化模板必须要传入，常量，常量表达式，由于模板是编译期语法，因此，这里的我们的数据也必须是编译期能确定的，比如说常数、常量表达式等，而不可以是动态的数据。就算是传入的是指针，这个地址也需要一直只表示确定的数据，不会改变（即为不会被释放，然后重新分配给其他数据）下面是一个例子：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MyArray</span>() {</span><br><span class="line">    std::cout &lt;&lt; <span class="string">"MyArray size: "</span> &lt;&lt; N &lt;&lt; std::endl;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::array&lt;<span class="type">int</span>, N&gt; data;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  MyArray&lt;<span class="number">5</span>&gt; arr1;  <span class="comment">// 常数OK</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line">  MyArray&lt;a&gt; arr2;  <span class="comment">// 常量表达式OK</span></span><br><span class="line"></span><br><span class="line">  <span class="type">const</span> <span class="type">int</span> b = <span class="number">6</span>;</span><br><span class="line">  MyArray&lt;b&gt; arr3;  <span class="comment">// ERR，b是只读变量，不是常量</span></span><br><span class="line"></span><br><span class="line">  MyArray&lt;a * <span class="number">3</span>&gt; arr4;  <span class="comment">// 常数运算OK</span></span><br><span class="line"></span><br><span class="line">  std::array&lt;<span class="type">int</span>, 3&gt; arr5 {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">  MyArray&lt;arr5.<span class="built_in">size</span>()&gt; arr6;  <span class="comment">// ERR，size是运行时数据</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> arr7[] {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>};</span><br><span class="line">  MyArray&lt;arr7[<span class="number">0</span>]&gt; arr8;  <span class="comment">// ERR，arr7的成员是运行时数据</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">int</span> arr9[] {<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>};</span><br><span class="line">  MyArray&lt;arr9[<span class="number">1</span>]&gt; arr10;  <span class="comment">// 常量表达式修饰的普通数组成员OK</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><h1 id="初学模板让人迷糊的一些写法"><a href="#初学模板让人迷糊的一些写法" class="headerlink" title="初学模板让人迷糊的一些写法"></a>初学模板让人迷糊的一些写法</h1><p>在我们看别人的代码的时候，模板这里我们会看到一些我们不知道的声明</p><p>比如</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br></pre></td></tr></tbody></table></figure></div><p>其实下面的这两个在声明上都是等价的，都是声明一个模板，因为在以前写模板声明参数类型的时候都是用的class，但是class会与我们声明一个类写时容易搞混，所以转而使用typename来代替了class来声明模板，但是class的写法一直兼容，所以出现了这两种写法</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br></pre></td></tr></tbody></table></figure></div><h1 id="使用模板来对stl进行扩展"><a href="#使用模板来对stl进行扩展" class="headerlink" title="使用模板来对stl进行扩展"></a>使用模板来对stl进行扩展</h1><p>这里实现了一个对stl中vector模板的内容进行复制，这个是一个例子，我们可以写很多关于如此的对stl扩展的代码</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CopyVec2Buf</span><span class="params">(<span class="type">const</span> std::vector&lt;T&gt; &amp;ve, <span class="type">void</span> *buf, <span class="type">size_t</span> buf_size)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (buf_size &lt; ve.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(T)) {</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line">  std::<span class="built_in">memcpy</span>(buf, ve.<span class="built_in">data</span>(), ve.<span class="built_in">size</span>() * <span class="built_in">sizeof</span>(T));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Demo</span><span class="params">()</span> </span>{</span><br><span class="line">  std::vector&lt;<span class="type">int</span>&gt; ve{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>};</span><br><span class="line">  std::byte buf[<span class="number">64</span>];</span><br><span class="line">  <span class="comment">// 把ve的内容连续地复制到buf中</span></span><br><span class="line">  <span class="built_in">CopyVec2Buf</span>(ve, buf, <span class="number">64</span>); <span class="comment">// 这里会推导出CopyVec2Buf&lt;int&gt;</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>香山杯RE-URL从哪儿来(生成临时文件+动态调试)</title>
      <link href="/2023/11/07/xiang-shan-bei-re-url-cong-na-er-lai-91a265c284cd40aa92097843a3c182a6/"/>
      <url>/2023/11/07/xiang-shan-bei-re-url-cong-na-er-lai-91a265c284cd40aa92097843a3c182a6/</url>
      
        <content type="html"><![CDATA[<h1 id="香山杯RE-URL从哪儿来"><a href="#香山杯RE-URL从哪儿来" class="headerlink" title="香山杯RE-URL从哪儿来"></a>香山杯RE-URL从哪儿来</h1><p>把题放入IDA，我们可以分析到大致逻辑就是将对某些字符串进行加密，然后在内存中找到字符串的地址然后运行ou.exe这个程序</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/07/xiang-shan-bei-re-url-cong-na-er-lai-91a265c284cd40aa92097843a3c182a6/Untitled.png" alt="Untitled"></p><p>由于没有输入，我们直接进行动态调试即可</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%201.png" alt="Untitled"></p><p>进入buffer</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%202.png" alt="Untitled"></p><p>可以看到，这是将程序临时储存到了C盘。</p><p>我们直接进入这个文件目录</p><p>将其后缀修改为exe</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%203.png" alt="Untitled"></p><p>放入IDA分析</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%204.png" alt="Untitled"></p><p>直接动态调试</p><p>v13这里有一个可疑数组，我们跟进去</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%205.png" alt="Untitled"></p><p>将数据转换一下，转换为地址</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%206.png" alt="Untitled"></p><p>可以看到到lflag的地址</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%207.png" alt="Untitled"></p><p>可以发现flag</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%208.png" alt="Untitled"></p><p>flag{6469616e-6369-626f-7169-746170617761}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>re-not_gcc(.bc后缀文件+中间编译+数独)</title>
      <link href="/2023/11/07/re-not-gcc-e5897ede627446e59fb904e35a513405/"/>
      <url>/2023/11/07/re-not-gcc-e5897ede627446e59fb904e35a513405/</url>
      
        <content type="html"><![CDATA[<h1 id="re-not-gcc"><a href="#re-not-gcc" class="headerlink" title="re-not_gcc"></a>re-not_gcc</h1><p>拿到题目我们可以发现是.bc文件</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/07/re-not-gcc-e5897ede627446e59fb904e35a513405/Untitled.png" alt="Untitled"></p><p>经过搜索我们可以知道，bc文件为LLVM IR bitcode文件，所谓LLVM IR bitcode文件，就是代码到可执行文件的中间码。我们可以使用命令将其继续编译下去，生成可执行文件</p><p>在linux下，我们使用命令</p><p>clang not_gcc.bc -o not_gcc(这里文件需要改名，题目文件有空格，将其改为_)</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%201.png" alt="Untitled"></p><p>生成可执行文件</p><p>我们放入ida中进行分析</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%202.png" alt="Untitled"></p><p>各种跳转，有点花，不好厘清逻辑</p><p>动态调试，厘清一下思路</p><p>先判断字符长度，81位</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%203.png" alt="Untitled"></p><p>判断第一个输入的字符是否为0</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%204.png" alt="Untitled"></p><p>判断输入，输入字符的都必须满足1~9</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%205.png" alt="Untitled"></p><p>进入关键逻辑</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%206.png" alt="Untitled"></p><p>函数内部，分析逻辑可以知道，是生成了9*9的数独盘，以0为标志，作为未填充</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%207.png" alt="Untitled"></p><p>因此需要我们写脚本将数独解出。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">board, row, col, num</span>):</span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> board[row * <span class="number">9</span>: (row + <span class="number">1</span>) * <span class="number">9</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> [board[i * <span class="number">9</span> + col] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>)]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    start_row, start_col = <span class="number">3</span> * (row // <span class="number">3</span>), <span class="number">3</span> * (col // <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_row, start_row + <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(start_col, start_col + <span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> board[i * <span class="number">9</span> + j] == num:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="comment">#解数独</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sudoku</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">            <span class="keyword">if</span> board[row * <span class="number">9</span> + col] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">if</span> is_valid(board, row, col, num):</span><br><span class="line">                        board[row * <span class="number">9</span> + col] = num</span><br><span class="line">                        <span class="keyword">if</span> solve_sudoku(board):</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                        board[row * <span class="number">9</span> + col] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例数独板，0表示需要填充的位置</span></span><br><span class="line">sudoku_board = [<span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000008</span>, <span class="number">0x00000005</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000009</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000000</span>, <span class="number">0x00000008</span>,</span><br><span class="line">    <span class="number">0x00000006</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000007</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000006</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x00000004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>]</span><br><span class="line"><span class="keyword">if</span> solve_sudoku(sudoku_board):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        row = sudoku_board[i * <span class="number">9</span>:(i + <span class="number">1</span>) * <span class="number">9</span>]</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"无解"</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>我们可以解出</p><p>497513268538426917612987354759164823261839475843275196986351742125748639374692581</p><p>这个就是我们的解出来的数独，但是由于程序有第一位检测，所以我们需要将第一位的4改我0</p><p>因此</p><p>097513268538426917612987354759164823261839475843275196986351742125748639374692581</p><p>检测</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%208.png" alt="Untitled"></p><p>可以发现解成功了。</p><p>交时对数据md5即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>re(安卓逆向+广播问题+四大组件)</title>
      <link href="/2023/11/06/re-guang-bo-b4c4e7a68e964011a8de0a8bdbfa0b59/"/>
      <url>/2023/11/06/re-guang-bo-b4c4e7a68e964011a8de0a8bdbfa0b59/</url>
      
        <content type="html"><![CDATA[<h1 id="re-广播"><a href="#re-广播" class="headerlink" title="re-广播"></a>re-广播</h1><p>关于广播，就是相当于系统发一段通知，然后所有程序收到对应信号之后，对于特定的标识进行特定的反应</p><p>对于广播的触发点，我们一般写广播都会重写**<code>onReceive</code>，因此我们直接搜索这个函数**</p><p>可以找到我们的逻辑，需要输入一个用户名，然后进行哈希验证，成功就打印我们的flag</p><p>因此在use这个变量名后面需要接入用户名</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/06/re-guang-bo-b4c4e7a68e964011a8de0a8bdbfa0b59/Untitled.png" alt="Untitled"></p><p>对于创建一个广播，我们还需要知道类型。</p><p>我们去写一个广播来看看</p><p>书写之后可以知道一般会写一个**<code>onCreate</code> 函数来进行声明**</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%201.png" alt="Untitled"></p><p>这里就找到了我们的广播类型</p><p>接下来，手机连接之后</p><p>在adb中输入我们刚刚得到的信息，然后发送广播</p><p>adb shell am broadcast -a com.examp1e.oc4an -e user “admin”</p><p>发生广播之后</p><p>查看手机</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/06/re-guang-bo-b4c4e7a68e964011a8de0a8bdbfa0b59/Untitled.jpeg" alt="Untitled"></p><p>发送成功</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>re-ti(迷宫+迷宫步骤解密)</title>
      <link href="/2023/11/05/re-tiger/"/>
      <url>/2023/11/05/re-tiger/</url>
      
        <content type="html"><![CDATA[<h1 id="RE-Tiger"><a href="#RE-Tiger" class="headerlink" title="RE-Tiger"></a>RE-Tiger</h1><p>迷宫题</p><p>这里unk_7ff706BA3520是我们迷宫的地图,我们可以动态调试将其提取出来</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled.png" alt="Untitled"></p><p>12结合我们提取的数据分析,可以知道是12*12的棋盘</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%201.png" alt="Untitled"></p><p>分析可知,墙面为’O’ 终点为0x16,起点为0x01</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%202.png" alt="Untitled"></p><p>先用这个脚本提取出我们的迷宫,打印出迷宫</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="built_in">map</span>[<span class="number">144</span>] = {<span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x01</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, </span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x16</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>, <span class="number">0x4F</span>};</span><br><span class="line">     <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">144</span>; i++)</span><br><span class="line">     {</span><br><span class="line">         </span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%02x "</span>, <span class="built_in">map</span>[i]);</span><br><span class="line">         num++;</span><br><span class="line">         <span class="keyword">if</span> (num == <span class="number">12</span>)</span><br><span class="line">         {</span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">             num = <span class="number">0</span>;</span><br><span class="line">         }</span><br><span class="line">            </span><br><span class="line">    }</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>用我们常用的wasd来走迷宫</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%203.png" alt="Untitled"></p><p>ddssddddsdssassssaaaww</p><p>我们分析可以发现我们的步数是加密了的,因此基于脚本分析,将我们awsd转化为对应的上下,然后再以此为密文,进行解密</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%204.png" alt="Untitled"></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">char</span> arr[<span class="number">30</span>] = {<span class="number">0x2D</span>, <span class="number">0x3A</span>, <span class="number">0x14</span>, <span class="number">0x1B</span>, <span class="number">0x37</span>, <span class="number">0x3D</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x1E</span>, <span class="number">0x1F</span>, <span class="number">0x22</span>, <span class="number">0x29</span>, <span class="number">0x05</span>, <span class="number">0xEF</span>, <span class="number">0xDE</span>, <span class="number">0xE3</span>,</span><br><span class="line">                    <span class="number">0xF1</span>, <span class="number">0x17</span>, <span class="number">0x2C</span>, <span class="number">0x0D</span>, <span class="number">0xE4</span>, <span class="number">0xF9</span>, <span class="number">0x38</span>, <span class="number">0x43</span>, <span class="number">0x89</span>, <span class="number">0x62</span>, <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x07</span>, <span class="number">0x7A</span>, <span class="number">0x2B</span>, <span class="number">0x63</span>};</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> a[<span class="number">24</span>] = {<span class="string">"ddssddddsdssassssaaaww"</span>};</span><br><span class="line">    <span class="type">char</span> a2[<span class="number">24</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span> (a[i])</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'w'</span>:</span><br><span class="line">             a2[i] = <span class="number">141</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">             a2[i] = <span class="number">155</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">             a2[i] = <span class="number">137</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">             a2[i] = <span class="number">158</span>;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">23</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        flag[i] = ((a2[i] ^ <span class="number">0xfa</span>) + i) ^ arr[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, flag[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>得到flag</p><p>I_am_Tiger_Who_are_you</p><p><img lazyload="" src="/images/loading.svg" data-src="/./Untitled%205.png" alt="Untitled"></p><p>加上头</p><p>Redrock{I_am_Tiger_Who_are_you}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023网络安全四川省省赛</title>
      <link href="/2023/10/24/2023-si-chuan-sheng-sheng-sai-re/"/>
      <url>/2023/10/24/2023-si-chuan-sheng-sheng-sai-re/</url>
      
        <content type="html"><![CDATA[<p> 拿到题目，我们可以分析出程序的逻辑，首先判断是否是二进制数据，然后将我们输入的二进制数据，转换为内存中存储的二进制数据，前面的逻辑大致就是做了这些操作</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/24/2023-si-chuan-sheng-sheng-sai-re/image-20231024115650096.png" alt="image-20231024115650096"></p><p>接下来我们分析一下，这个加密的核心算法</p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20231024120019917.png" alt="image-20231024120019917"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023-re4(SEH异常控制流+花指令+异或)</title>
      <link href="/2023/10/16/2023re4/"/>
      <url>/2023/10/16/2023re4/</url>
      
        <content type="html"><![CDATA[<p> 拿到题我们可以发现，有一个简单的反调试，调试很好过，我们直接NOP或者进行附加调试皆可</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017091327367.png" alt="image-20231017091327367"></p><p>限制了输入，指定输入的flag的长度为40.</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017091608472.png" alt="image-20231017091608472"></p><p>这一部分实现了SHE异常处理，人为的做出了访问不可地址的访问。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017091729756.png" alt="image-20231017091729756"></p><p>如果是熟悉SEH这个考点的话，那就方向其实很简单。直接找它所隐藏的代码即可。</p><p>但是对于这道题，我们可以发现一个很有趣的地方，我们直接静态分析，是不能直接分析出隐藏代码在哪儿的。</p><p>我们仔细看可以发现一个可疑地方</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017092721102.png" alt="image-20231017092721102"></p><p>对于这里有一个jmp_except 就是我们需要处理的代码，我们可以看到，有一个是退出，一个是向下执行，我们所以下面的那段代码就是我们需要的隐藏代码，这里我们只需修改jmp即可。</p><p>修改之后，被隐藏的代码逻辑就出现了</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017092942023.png" alt="image-20231017092942023"></p><p>所以对于此方面的处理，由于出题人会将我们的关键代码，放入SEH断下来之后，从而实现了代码的隐藏，所以处理此类题目我们的思路就是，就是去寻找出题人隐藏的代码，其中有两方面，一方面就是观察主程序的汇编，对于jmp要特别主要，大多数，就会出现一个莫名的jmp跳过了一大段的内容，这是因为使用了SEH处理机制，将SEH断入，就会执行我们那跳过的代码。所以我们只需修改跳转即可，另外如果主程序没有而是在其他地方调用，这就需要我们进行动态调试了，通过动态调试确定我们数据被修改的地方，也能找到被出题人隐藏的代码。</p><p>我们可以知道，前面的循环并没有对我们的输入数据进行处理，下面的函数对我们的数据进行了修改（v19）</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017093031969.png" alt="image-20231017093031969"></p><p>进入之后，我们可以发现有一个小花指令，很简单，将无关数据nop掉就行。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017093152905.png" alt="image-20231017093152905"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017093509437.png" alt="image-20231017093509437"></p><p>很简单的异或</p><p>下面的，又对v19进行了异或操作，这里我们动态调试，但是我们不能直接查看具体v10的值为多少，这里我是进行前后数据调试，将前后数据dump下来进行异或，可以得出对前32为异或上139,对后八位异或上1.</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/2023re4/image-20231017093606811.png" alt="image-20231017093606811"></p><p>写出我们的脚本</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">40</span>] = {</span><br><span class="line">        <span class="number">0xCB</span>, <span class="number">0xCD</span>, <span class="number">0xD8</span>, <span class="number">0xC9</span>, <span class="number">0xDF</span>, <span class="number">0xCC</span>, <span class="number">0xF4</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0xCE</span>, <span class="number">0xE4</span>, <span class="number">0xB7</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE7</span>, <span class="number">0xE3</span>,</span><br><span class="line">        <span class="number">0xF1</span>, <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0xF2</span>, <span class="number">0xFF</span>, <span class="number">0xFB</span>, <span class="number">0xFF</span>, <span class="number">0xF7</span>, <span class="number">0xEC</span>, <span class="number">0xED</span>, <span class="number">0xF4</span>, <span class="number">0xA7</span>, <span class="number">0xE6</span>, <span class="number">0xF3</span>, <span class="number">0xE4</span>, <span class="number">0xF8</span>,</span><br><span class="line">        <span class="number">0xC8</span>, <span class="number">0xC0</span>, <span class="number">0xD5</span>, <span class="number">0xC7</span>, <span class="number">0xC8</span>, <span class="number">0xC4</span>, <span class="number">0x8A</span>, <span class="number">0xD7</span>};</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">          {</span><br><span class="line">               data[i] ^= <span class="number">139</span>;</span><br><span class="line">          }</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>;i++)</span><br><span class="line">          {</span><br><span class="line">               data[i] = (i ^ data[i]  ^ <span class="number">5</span>)<span class="number">-1</span>;</span><br><span class="line">          }</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">                   <span class="built_in">printf</span>(<span class="string">"%c"</span>,data[i]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div><p>DASCTF{SEH_1s_fan_and_fmyy_1s_shenxian!}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RoarCTF-2019-polyre(控制流平坦化+虚假控制流+CRC32校验)</title>
      <link href="/2023/10/16/roarctf-2019-polyre/"/>
      <url>/2023/10/16/roarctf-2019-polyre/</url>
      
        <content type="html"><![CDATA[<p>拿到题目我们可以发现，这个是开了ollvm控制流平坦化的题目,优化有点高，不好直接进行分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/roarctf-2019-polyre/image-20231017160156261.png" alt="image-20231017160156261"></p><p>对于ollvm控制流平坦化，对于一般的开得比较少的，没有控制流没有那么复杂的，一般的的我们都在最后进行下断点，然后直接分析汇编代码即可，对于像这种，我们就需要使用脚本去除控制流，让我们的题目能更好的分析，对于脚本，使用的原理大都是使用的符号执行，例如angr等符号执行，先将整个程序跑一遍，将不执行的代码进行nop,将执行的代码进行Jmp等的链接。</p><p>使用的脚本为</p><p> <a href="......%5Cquestion%5Cnss%5CRoarCTF-2019-polyre%5Cdeflat.py">deflat.py</a> </p><p> <a href="......%5Cquestion%5Cnss%5CRoarCTF-2019-polyre%5Cam_graph.py">am_graph.py</a> </p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python deflat.py RoarCTF<span class="number">-2019</span>-polyre1 <span class="number">0x400620</span>    <span class="meta">#python版本 + 脚本名 + 文件名 + 混淆起始地址”</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/roarctf-2019-polyre/image-20231017163633118.png" alt="image-20231017163633118"></p><p>这里我们就解出了ollvm的混淆，但是我们将生成的文件放入IDA中分析，我们可以发现，还是很花，有着许多if与while无从下手，这个就是加了虚假控制流的混淆。基本上还是能看了，如果头铁可以直接进行分析了，但是。。。。有点恼火。</p><p>所以我们写个脚本来自动去除虚假控制流。在idapython中书写以下脚本运行</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> idaapi</span><br><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line">st = <span class="number">0x0000000000401117</span></span><br><span class="line">end = <span class="number">0x0000000000402144</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch_nop</span>(<span class="params">start, end</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end):</span><br><span class="line">        idaapi.patch_byte(i, <span class="number">0x90</span>)  <span class="comment"># 修改指定地址处的指令 0x90是最简单的1字节nop</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">next_instr</span>(<span class="params">addr</span>):</span><br><span class="line">    <span class="keyword">return</span> addr + idaapi.get_item_size(addr)  <span class="comment"># get_item_size获取指令或数据长度，这个函数的作用就是去往下一条指令</span></span><br><span class="line"></span><br><span class="line">addr = st</span><br><span class="line"><span class="keyword">while</span> addr &lt; end:</span><br><span class="line">    <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"ds:dword_603054"</span> <span class="keyword">in</span> idc.GetDisasm(addr):  <span class="comment"># GetDisasm(addr)得到addr的反汇编语句</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            addr = <span class="built_in">next</span></span><br><span class="line">            <span class="built_in">next</span> = next_instr(addr)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"jnz"</span> <span class="keyword">in</span> idc.GetDisasm(addr):</span><br><span class="line">                dest = idc.get_operand_value(addr, <span class="number">0</span>)  <span class="comment"># 使用idc.get_operand_value来获取操作数</span></span><br><span class="line">                idaapi.patch_byte(addr, <span class="number">0xe9</span>)</span><br><span class="line">                idaapi.patch_byte(addr + <span class="number">5</span>, <span class="number">0x90</span>)</span><br><span class="line">                offset = dest - (addr + <span class="number">5</span>)</span><br><span class="line">                idaapi.patch_dword(addr + <span class="number">1</span>, offset)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"patch bcf: 0x%x"</span> % addr)</span><br><span class="line">                addr = <span class="built_in">next</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        addr = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>成功的可以看到了美丽的代码，真的，这个时候这个反汇编出的代码太美丽了，舒服多了，直接进行分析，干！</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/16/roarctf-2019-polyre/image-20231017163330517.png" alt="image-20231017163330517"></p><p>最后我们可以发现，程序使用的是CRC32的加密校验的方法</p><p>我们可以找到此题加密的CRC32的源码原型</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">GenerateTable</span><span class="params">(<span class="type">uint32_t</span> polynomial)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> byte = <span class="number">0</span>; byte &lt; <span class="number">256</span>; ++byte)</span><br><span class="line"> {</span><br><span class="line"><span class="type">uint32_t</span> crc = byte;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> bit = <span class="number">32</span>; bit &gt; <span class="number">0</span>; --bit)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span> (crc &amp; <span class="number">0x80000000</span>)</span><br><span class="line">{</span><br><span class="line">  crc = (crc &lt;&lt; <span class="number">1</span>) ^ polynomial;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">  crc &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">crcTable[byte] = crc;</span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p><a class="link" href="https://blog.csdn.net/tilblackout/article/details/131198350">CRC校验(2)：CRC32查表法详解、代码实现和CRC反转-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p>基于正向代码，我们可以写出逆向代码</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">secret = [<span class="number">0xBC8FF26D43536296</span>, <span class="number">0x520100780530EE16</span>, <span class="number">0x4DC0B5EA935F08EC</span>,</span><br><span class="line">          <span class="number">0x342B90AFD853F450</span>, <span class="number">0x8B250EBCAA2C3681</span>, <span class="number">0x55759F81A2C68AE4</span>]</span><br><span class="line">key = <span class="number">0xB0004B7679FA26B3</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生CRC32查表法所用的表</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> secret:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        sign = s &amp; <span class="number">1</span>  <span class="comment"># 数乘以二，必为偶数，再异或上奇数，得奇数 所以最后一位为1的数还原前为负。</span></span><br><span class="line">        <span class="keyword">if</span> sign == <span class="number">1</span>:</span><br><span class="line">            s ^= key</span><br><span class="line">        s //= <span class="number">2</span></span><br><span class="line">        <span class="comment"># 防止负值除2，溢出为正值</span></span><br><span class="line">        <span class="keyword">if</span> sign == <span class="number">1</span>:</span><br><span class="line">            s |= <span class="number">0x8000000000000000</span>  <span class="comment"># 让数回到负数</span></span><br><span class="line"></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="number">8</span>:</span><br><span class="line">        flag += <span class="built_in">chr</span>(s &amp; <span class="number">0xFF</span>)  <span class="comment"># &amp;0xff可以将高的24位置为0，低8位保持原样。</span></span><br><span class="line">        s &gt;&gt;= <span class="number">8</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></tbody></table></figure></div><p>可以解出flag</p><p>flag{6ff29390-6c20-4c56-ba70-a95758e3d1f8}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023-柏鹭杯-re1-imm</title>
      <link href="/2023/10/12/2023-bo-lu-bei/"/>
      <url>/2023/10/12/2023-bo-lu-bei/</url>
      
        <content type="html"><![CDATA[<p>我们拿到这道题,判断输入，可以知道验证我们的输入为64个字节，存储在buffer中,下面有一个判断，我们可以知道我们输入的字符范围为0 ~ 9，A ~ F.</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/12/2023-bo-lu-bei/image-20231012103158670.png" alt="image-20231012103158670"></p><p>其实我们通过整体来看，我们可以发现，在这个大的while循环中就只对这个encode返回的值进行判断，然后break，然后通过后面的flag输出，我们可以推断出主要的逻辑就是，将我们的输入的64进行一系列的操作，与对比，之后再做一系列的操作运算出我们的flag.也就是说我们的加密与对比逻辑就在这个encode函数之中。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/12/2023-bo-lu-bei/image-20231012103510111.png" alt="image-20231012103510111"></p><p>我们进入encode函数，我们会发现以下三段的汇编代码，如果学过一点点汇编，对1与3的汇编代码还是好理解，第一个mov,与xor，就是将我们的数据与上面的字符进行异或。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/12/2023-bo-lu-bei/image-20231012103953758.png" alt="image-20231012103953758"></p><p>第三段汇编，cmp,mov,zero，很能看出，这里实现的操作就是将加密后的结果，与其上面的数据进行对比</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/12/2023-bo-lu-bei/image-20231012104011950.png" alt="image-20231012104011950"></p><p>对于第二段汇编，视乎X86体系并不常见，经过搜索，我们可以得知这个汇编实现的操作就是这样。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/12/2023-bo-lu-bei/image-20231012104002124.png" alt="image-20231012104002124"></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line"> {</span><br><span class="line">     a[i] = flag[index[i]];</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure></div><p>就是将上面的数据作为索引，然后去我们flag里面去寻找对于字符。实现就是将我们原来的数据进行打乱。</p><p>由此我们就将加密逻辑分析完了，开始写脚本。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">32</span>] = {</span><br><span class="line">        <span class="number">0xCD</span>, <span class="number">0xEB</span>, <span class="number">0x5E</span>, <span class="number">0x76</span>, <span class="number">0x0F</span>, <span class="number">0x22</span>, <span class="number">0xAF</span>, <span class="number">0x31</span>, <span class="number">0x82</span>, <span class="number">0x92</span>, <span class="number">0x3C</span>, <span class="number">0xEF</span>, <span class="number">0xB8</span>, <span class="number">0xC1</span>, <span class="number">0x76</span>, <span class="number">0x06</span>,</span><br><span class="line">        <span class="number">0x18</span>, <span class="number">0x2F</span>, <span class="number">0xB5</span>, <span class="number">0x7D</span>, <span class="number">0x7F</span>, <span class="number">0x0A</span>, <span class="number">0xEA</span>, <span class="number">0x85</span>, <span class="number">0x92</span>, <span class="number">0x00</span>, <span class="number">0x89</span>, <span class="number">0xA3</span>, <span class="number">0x2C</span>, <span class="number">0xE2</span>, <span class="number">0xE7</span>, <span class="number">0x32</span>};</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> index[<span class="number">32</span>] = {</span><br><span class="line">        <span class="number">0x0A</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x0F</span>, <span class="number">0x08</span>, <span class="number">0x0C</span>,</span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x18</span>, <span class="number">0x17</span>, <span class="number">0x1F</span>, <span class="number">0x14</span>, <span class="number">0x1E</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x15</span>, <span class="number">0x1D</span>, <span class="number">0x16</span>, <span class="number">0x1C</span>, <span class="number">0x11</span>, <span class="number">0x10</span>, <span class="number">0x19</span>, <span class="number">0x1A</span>};</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">32</span>] = {</span><br><span class="line">        <span class="number">0x5F</span>, <span class="number">0x91</span>, <span class="number">0x99</span>, <span class="number">0xE8</span>, <span class="number">0x4E</span>, <span class="number">0xD0</span>, <span class="number">0xB0</span>, <span class="number">0x92</span>, <span class="number">0xB1</span>, <span class="number">0x3C</span>, <span class="number">0x4F</span>, <span class="number">0xF4</span>, <span class="number">0x17</span>, <span class="number">0x76</span>, <span class="number">0xDA</span>, <span class="number">0x12</span>,</span><br><span class="line">        <span class="number">0x2A</span>, <span class="number">0x35</span>, <span class="number">0x01</span>, <span class="number">0x15</span>, <span class="number">0xF9</span>, <span class="number">0x97</span>, <span class="number">0x5E</span>, <span class="number">0x19</span>, <span class="number">0x9D</span>, <span class="number">0xC2</span>, <span class="number">0x15</span>, <span class="number">0x99</span>, <span class="number">0x70</span>, <span class="number">0x7D</span>, <span class="number">0x9F</span>, <span class="number">0xCC</span>};</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> a[<span class="number">32</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> c[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">        c[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> b[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        b[c[index[i]]] = flag[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    {</span><br><span class="line">        b[i] ^= data[i];</span><br><span class="line">    }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; ++k)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%X"</span>, b[k]);</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>可以得到：825A10C618D636A058AE633FAA539E70655FEB648697FF84A79F4589B5207027</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/12/2023-bo-lu-bei/image-20231012104914540.png" alt="image-20231012104914540"></p><p>放入程序输入，即可得到我们的flag</p><p> flag{ISEC-a49d6b847bdba62c5bfa0a43b69c8575}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2022-鹏城杯-rota</title>
      <link href="/2023/10/09/2022-peng-cheng-bei-rato/"/>
      <url>/2023/10/09/2022-peng-cheng-bei-rato/</url>
      
        <content type="html"><![CDATA[<p>我们拿到题，我们可以直接发现我们最后的对比数据</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009151020000.png" alt="image-20231009151020000"></p><p>跟踪我们输入的数据，我们可以很容易的识别这个是一个base64换表的加密</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009151155784.png"></p><p>这里，我们会发现许多很花的伪代码，也不好分析是干什么的，这里，我们使用我们的动态调试</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009151323193.png" alt="image-20231009151323193"></p><p>经分析这里的a2就是我们的前面加密后的数据，我们在这之前下一个断点。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009151643476.png" alt="image-20231009151643476"></p><p>我们输入24个A，动态调试之后，我们可以发现，我们的输入被加密成了如下样子，我们拿脚本解来看看。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009151605430.png" alt="image-20231009151605430"></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">str1 = <span class="string">"M9uiM9uiM9uiM9uiM9uiM9uiM9uiM9uiXXXXXXXXXXX="</span></span><br><span class="line">str2 = <span class="string">'ksPhS/34MXifj+Ibtjud2Tikj5HkA7iTpbaNELBebOaIm'</span></span><br><span class="line">str3 = <span class="string">"W6slMFL/TSPXeZuWqGxMjcKTV2OemQUq+AhjbYIV4fpIm"</span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">"XiIzDuAoGlaK6JcjM3g/9YQmHBOsxn1hLZ4w7Tt0PV5pNqUFC+rE2dSfyvWe8kRb="</span></span><br><span class="line">string2 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (base64.b64decode(str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))))</span><br></pre></td></tr></tbody></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009152019580.png" alt="image-20231009152019580"></p><p>可以发现，就是通过换表的base64,进行加密的，我们可以再输入32个A，进行测试，通过两次调试结果我们可以发现，那一部分很花的代码，实现的效果就是将我们的输入补齐，补齐到32位，，由此，我们可以大致推测出，我们的flag的长度就是32位。</p><p>下面我们分析下面这两个函数，这两个函数需要联合分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009152343563.png" alt="image-20231009152343563"></p><p>点开上面的data函数，我们也会发现很花的代码，作者开的优化有点高，这里我们动态调试与分析，我们可以知道，a1生成的其实就是一个类似S盒的一个表，会在待会儿的加密中进行使用。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009152434187.png" alt="image-20231009152434187"></p><p>对于下面的加密函数，我们从整体来看，我们可以发现，用一个循环，一次循环有四个着相同的加密块，也就是说一次循环加密四个数据，因为加密块相同，我们就只需要分析一个加密块即可。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009152718771.png" alt="image-20231009152718771"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009152815407.png" alt="image-20231009152815407"></p><p>对于每个加密块的前面的一个循环，其逻辑就是实现一个查表，然后返回数据的索引功能</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009153020747.png" alt="image-20231009153020747"></p><p>下面的这部分，对于a1中的128是不是很熟悉？就是上面生成a1时候，就使用了128，这里实现的逻辑就是将索引与循环相加，作为索引，取出a1前半部分的值，然后由此作为索引，有去找a1后半部分的值，将其作为索引，去找table里面的值。就是作者自定义的一个查表加密，开的优化有点高，造成分析相对变难了。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/09/2022-peng-cheng-bei-rato/image-20231009153207159.png" alt="image-20231009153207159"></p><p>复原的逻辑就是这样</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        idx = Maps.find(inp[j*<span class="number">5</span>+i])</span><br><span class="line">        <span class="keyword">if</span> idx == -<span class="number">1</span>: </span><br><span class="line">            idx = <span class="number">0</span></span><br><span class="line">        v12 = (idx_2 + box1[(idx_1 + idx) &amp; <span class="number">0x3f</span>]) &amp; <span class="number">0x3f</span></span><br><span class="line">        v14 = box3[(idx_3 + box2[v12]) &amp; <span class="number">0x3f</span>]</span><br><span class="line">        out[j*<span class="number">5</span>+i] = Maps[v14]</span><br><span class="line">        </span><br><span class="line">        idx_1 = (idx_1 + <span class="number">1</span>) &amp; <span class="number">0x3F</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>由此，我们逆向，我们可以写出脚本</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line">arr =[ 51, 52, 44, 54, 29, 18, 30, 12, 26, 60, 41, 16, 32, 20, 61, 59, 25, 8, 14, 31, 48, 5, 56, 3, 17, 27, 23, 33, 46, 4, 24, 35, 43, 2, 39, 55, 28, 36, 57, 63, 53, 45, 38, 19, 42, 10, 0, 7, 62, 1, 40, 47, 50, 34, 13, 6, 37, 58, 9, 15, 22, 11, 21, 49, 12, 44, 13, 33, 34, 9, 2, 57, 49, 23, 26, 51, 6, 36, 16, 4, 27, 11, 52, 18, 56, 39, 14, 32, 43, 46, 0, 19, 62, 58, 5, 30, 54, 8, 50, 41, 25, 35, 61, 59, 60, 63, 55, 48, 24, 22, 53, 37, 10, 45, 40, 38, 21, 17, 7, 29, 42, 15, 31, 20, 1, 28, 3, 47, 19, 13, 53, 49, 7, 17, 27, 35, 11, 12, 16, 37, 43, 33, 51, 24, 39, 41, 2, 47, 40, 48, 14, 25, 60, 8, 52, 32, 61, 46, 5, 21, 44, 28, 54, 34, 30, 36, 56, 10, 63, 26, 4, 38, 22, 42, 58, 31, 45, 50, 6, 55, 3, 59, 0, 23, 29, 18, 9, 1, 62, 57, 15, 20, 1, 0, 0, 77, 252, 127, 0, 0, 4, 1, 0, 0, 252, 127, 0, 0, 107, 115, 80, 104, 83, 47, 51, 52, 77, 88, 105, 102, 106, 43, 73, 98, 116, 106, 117, 100, 50, 84, 105, 107, 106, 53, 72, 107, 65, 55, 105, 84, 112, 98, 97, 78, 69, 76, 66, 101, 98, 79, 97, 73, 109, 0, 0, 0]</span><br><span class="line"></span><br><span class="line">base_tab = "XiIzDuAoGlaK6JcjM3g/9YQmHBOsxn1hLZ4w7Tt0PV5pNqUFC+rE2dSfyvWe8kRb="</span><br><span class="line">enc = "ksPhS/34MXifj+Ibtjud2Tikj5HkA7iTpbaNELBebOaIm"</span><br><span class="line">o_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span><br><span class="line">my_table = "XiIzDuAoGlaK6JcjM3g/9YQmHBOsxn1hLZ4w7Tt0PV5pNqUFC+rE2dSfyvWe8kRb"</span><br><span class="line"></span><br><span class="line">out = ""</span><br><span class="line"></span><br><span class="line">for t in range(0, len(enc) - 1):</span><br><span class="line">    c = enc[t]</span><br><span class="line">    for k in range(0, 64):</span><br><span class="line">        cnt = k</span><br><span class="line">        cnt = arr[(t + cnt)&amp;0x3f] &amp; 0x3f</span><br><span class="line">        cnt = arr[cnt + 64] &amp; 0x3f</span><br><span class="line">        cnt = arr[cnt + 128]</span><br><span class="line">        if c == base_tab[cnt]:</span><br><span class="line">            out += base_tab[k]</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(out.translate(str.maketrans(my_table, o_table))))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>解出flag   PCL{8cdd01062b7e90dd372c3ea9977be53e}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯-2020-青龙组-jocker</title>
      <link href="/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/"/>
      <url>/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/</url>
      
        <content type="html"><![CDATA[<p>(SMC自解密+XOR+猜!)</p><p>正如这道题的名字,我做的时候就挺jocker的,题不是很难,但是最后的猜猜大法才能出flag是我没想到的,而且就算是把flag解出来了,给程序也不会有正确的回显,这就挺…..jocker</p><p>IDA打开,很容易知道flag为24位,进行了三个加密,我们分别分析</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/image-20231004181449084.png" alt="image-20231004181449084"></p><p>wrong函数,就是一个简单的加密函数</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/image-20231004181735810.png" alt="image-20231004181735810"></p><p>omg函数就是对上面那个函数的检验</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/image-20231004181820843.png" alt="image-20231004181820843"></p><p>这里我们就可以解出第一层密码,我们可以知道这个密码是假的</p><p>下面的两个函数需要进行SMC解密</p><p>对于SMC两种方法,一种用脚本,一种直接动调</p><p>脚本:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc_bc695 <span class="keyword">import</span> *</span><br><span class="line">s=<span class="number">0x402219</span>                   <span class="comment">#加密地址</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">224</span>):            <span class="comment">#循环</span></span><br><span class="line">    PatchByte(s+i,Byte(s+i)^<span class="number">0x41</span>)          <span class="comment">#加密的间隔   Byte(s+i)^0x99表示需要进行的加密操作</span></span><br></pre></td></tr></tbody></table></figure></div><p>使用动调其实更好追踪</p><p><strong>动调</strong></p><p>对于encrypt函数,就是一个简单的异或加密,这里我们提取数据,进行异或就可以解出前十八个字符</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/image-20231004182807653.png" alt="image-20231004182807653"></p><p>接下来就到了最jocker的时刻,</p><p>finally函数,这里通过合理猜测,我们可以知道%tp&amp;:这五个就是我们的对比字符,然后仔细分析下面的代码,我们可以惊奇的发现,这个代码是无意义的!!!!!</p><p>后来乱猜,异或,把:异或了}试了试,最后解出flag…….</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/04/wang-ding-bei-2020-qing-long-zu-jocker/image-20231004182948862.png" alt="image-20231004182948862"></p><p>flag{d07abccf8a410cb37a}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GWCTF-2019-re3</title>
      <link href="/2023/09/25/gwctf-2019-re3/"/>
      <url>/2023/09/25/gwctf-2019-re3/</url>
      
        <content type="html"><![CDATA[<p>题不是很难，但是自己做的时候过于Sb了，也不能这样说，害，就是自己想多了，不久前自己魔改了一下AES，所以一直想得是魔改的AES，在哪儿整了半天，越想越不对，其实就是没有魔改AES，调试一下把KEY调试出来即可。我去看了一些WP,有点离谱，有些把密钥的MD5分析出来了，然后解密。。。。确实也加深学到了如何去识别MD5算法，还是很有收获。</p><p>这道打开，是很经典的SMC解密。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/gwctf-2019-re3/image-20230925204147871.png" alt="image-20230925204147871"></p><p>对于SMC我们有两种解法，一种是写IDC脚本，一种是直接动态调试，让它自己把密文解密出来。</p><p>对于IDC脚本:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> idc_bc695 <span class="keyword">import</span> * s=<span class="number">0x402219</span>                   <span class="comment">#加密地址 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">224</span>):            <span class="comment">#循环    </span></span><br><span class="line">PatchByte(s+i,Byte(s+i)^<span class="number">0x99</span>) </span><br></pre></td></tr></tbody></table></figure></div><p>进行动态分析</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/gwctf-2019-re3/image-20230925204510681.png" alt="image-20230925204510681"></p><p>分析这这个函数，我们可以知道，第一个sub_400A71就是我们AES的密钥扩展。</p><p>下面的函数就是AES加密函数，我们点开即可分析出。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/gwctf-2019-re3/image-20230925204719724.png" alt="image-20230925204719724"></p><p>对于密钥，我们可以知道，密钥扩展，会在原来的密钥基础上进行扩展，也就是说，当密钥扩展后，我们扩展后的前16位，就是我们的原始密钥，我们动态调试提取出来即可。</p><p>先前我准备用赛博厨房来解的，但是不知道为啥解不出来（可能我不熟悉它的原因。。。）</p><p>所以就写一个py脚本来解</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">decodedata = <span class="string">'BC0AADC0147C5ECCE0B140BC9C51D52B46B2B9434DE5324BAD7FB4B39CDB4B5B'</span>    <span class="comment">#数据</span></span><br><span class="line">key = <span class="string">'CB8D493521B47A4CC1AE7E62229266CE'</span>           <span class="comment">#密钥</span></span><br><span class="line">aeskey = AES.new(<span class="built_in">bytes</span>.fromhex(key), AES.MODE_ECB)    <span class="comment">#初始化加密器</span></span><br><span class="line">decode = aeskey.decrypt(<span class="built_in">bytes</span>.fromhex(decodedata))      <span class="comment">#加密器解密</span></span><br><span class="line"><span class="built_in">print</span>(decode)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>解出我们的FlAG:</p><p>flag{924a9ab2163d390410d0a1f670}</p><p>对于密钥，我看了他们的WP可以发现，居然是用MD5加密了BASE64表，然后在进行操作来生成的。</p><p>对于MD5特征码</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/gwctf-2019-re3/image-20230925205323221.png" alt="image-20230925205323221"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/gwctf-2019-re3/image-20230925210004320.png" alt="image-20230925210004320"></p><p>一般的MD5的两个特征。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第五空间-2021-StrangeLanguage</title>
      <link href="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/"/>
      <url>/2023/09/25/di-wu-kong-jian-2021-strangelanguage/</url>
      
        <content type="html"><![CDATA[<h1 id="py打包-brainfuck语言-bf反编译-异或）"><a href="#py打包-brainfuck语言-bf反编译-异或）" class="headerlink" title="(py打包+brainfuck语言+bf反编译+异或）"></a>(py打包+brainfuck语言+bf反编译+异或）</h1><p>我们拿到这道题，看这个图标我们就可以知道，就是PY打包的。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925084727166.png" alt="image-20230925084727166"></p><p>我们使用 <a href="......%5Cquestion%5Cnss%5C%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-2021-StrangeLanguage%5Cpyinstxtractor.py">pyinstxtractor.py</a> 将其解包</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925084930674.png" alt="image-20230925084930674"></p><p>可以得到如图的文件夹</p><p>将其反编译</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925084950468.png" alt="image-20230925084950468"></p><p>网上找一个pyc反编译网站</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925085128512.png" alt="image-20230925085128512"></p><p>我们可以看到，这里调用了brainfuck.main，这个文件，我们去我们刚刚解包的地方，寻找这个文件分析即可</p><p>我们可以发现有一个pyd的文件，什么是pyd文件呢？简单来说就是py的dll文件，动态链接库，也就是说，我们也可以ida进行分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925085250601.png" alt="image-20230925085250601"></p><p>这里我需要厘清的概念</p><p>[<a class="link" href="https://bbs.kanxue.com/thread-259124.htm">原创]python编译后的pyd爆破-软件逆向-看雪-安全社区|安全招聘|kanxue.com<i class="fas fa-external-link-alt"></i></a></p><ul><li><strong>py:</strong> python 脚本文件（source code）</li><li><strong>pyc:</strong> 脚本文件编译得到的字节码, 二进制文件，python文件经过编译器编译之后的文件。可以提高文件加载速度。(py的汇编)</li><li><strong>pyo:</strong> 脚本文件开启优化编译选项（-O）编译得到的字节码,二进制文件，优化编译后的文件。可以通过python -O file.py生成。</li><li><strong>pyd:</strong> 基本的Windows DLL文件，python的动态链接库。</li></ul><p>我们将pyd文件放入ida进行分析</p><p>我们查看字符串可以发现了一个一长串的字符串</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925090043146.png" alt="image-20230925090043146"></p><p>我们去网上搜索后可以发现，这个就是我们的bf语言。</p><p>然后我们可以到github上拉取一个项目</p><p><a class="link" href="https://github.com/eterevsky/bfc">https://github.com/eterevsky/bfc<i class="fas fa-external-link-alt"></i></a></p><p>去把这个下载进入ubuntu中，cd 进文件夹，然后执行make命令即可将其编译成elf文件</p><p>编译成elf文件之后，将前面的bf,代码保存在一个.bf文件中，我的是1.bf.</p><p>同文件夹下我们执行以下命令</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./bfc <span class="number">1.b</span>f <span class="number">1.</span>c   <span class="comment">//将我们的bf文件转换为c语言</span></span><br><span class="line"></span><br><span class="line">gcc <span class="number">1.</span>c -o <span class="number">1</span>     <span class="comment">//将c文件进行编译变成可执行文件（这样我们就可以调试啦）</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>然后分析我们的文件</p><p>我们可以发现输出字符串，有两个no,第一个不难猜出为判断长度。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925092601913.png" alt="image-20230925092601913"></p><p>放入ida,我们可以发现我们的密文，动调将其调试出来</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/25/di-wu-kong-jian-2021-strangelanguage/image-20230925091125218.png" alt="image-20230925091125218"></p><p>通过调试，我们可以知道，flag的总长度为38位，去除flag{},就为32位，确实能和我们上面提出的来的数据长度吻合，然后我们对其进行黑盒分析，输入数据，输出来观察，我们可以发现是进行了异或运算。而且是前一位异或了后一位。我们由此写出脚本即可</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> arr[<span class="number">40</span>] = {<span class="number">0x53</span>, <span class="number">0xF</span>, <span class="number">0x5A</span>, <span class="number">0x54</span>, <span class="number">0x50</span>, <span class="number">0x55</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0x0</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">0x7</span>, <span class="number">0x56</span>, <span class="number">0x7</span>, <span class="number">0x7</span>, <span class="number">0x5B</span>, <span class="number">0x9</span>, <span class="number">0x0</span>, <span class="number">0x50</span>, <span class="number">0x5</span>, <span class="number">0x2</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">0x3</span>, <span class="number">0x5D</span>, <span class="number">0x5C</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x54</span>, <span class="number">0x5A</span>, <span class="number">0x5F</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x2</span>, <span class="number">0x57</span>, <span class="number">0x7</span>, <span class="number">0x34</span>};</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">32</span>; i &gt;=<span class="number">0</span>;i--)</span><br><span class="line">  {</span><br><span class="line">    arr[i - <span class="number">1</span>] ^= arr[i];</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;<span class="number">32</span>; i++)</span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, arr[i]);</span><br><span class="line">  }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div><p>可以得出 flag{d78b6f30225cdc811adfe8d4e7c9fd34}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF-2021-Crash</title>
      <link href="/2023/09/24/gkctf-2021-crash/"/>
      <url>/2023/09/24/gkctf-2021-crash/</url>
      
        <content type="html"><![CDATA[<p>打开IDA进行分析</p><p>通过这里的分析，我们可以发现，我们的flag的总长度为43位，且格式为GKCTF{}</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143653062.png" alt="image-20230924143653062"></p><p>我们进入这个函数，进行分析</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143710859.png" alt="image-20230924143710859"></p><p>我们分析这三个函数</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143727983.png" alt="image-20230924143727983"></p><p>我们进入第一个加密函数，我们可以发现，这里运用得是DES加密</p><p>通过这个函数我们可以发现，DES为CBC模式 DES的key 与vi, PKCS5Padding</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143806836.png" alt="image-20230924143806836"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143818974.png" alt="image-20230924143818974"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143833642.png" alt="image-20230924143833642"></p><p>但是我们深入的发现，这个并不是简单的DES加密</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143851083.png" alt="image-20230924143851083"></p><p>这里我们可以发现，这不是简单的DES，而是其的进阶版，3DES,也就是将DES运行三遍，但是微微不同。我们可以用网站来解</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924143905197.png" alt="image-20230924143905197"></p><p>我们可以解出第一段flag</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924144309801.png" alt="image-20230924144309801"></p><p>同样的，我们分析下面的三个函数</p><p>我们可以分别知道是，sha256, sha512, md5我们使用网站，将他们后面的对比数据解出即可</p><p>有一个比较好的网站</p><p><a class="link" href="https://www.somd5.com/">MD5免费在线解密破解_MD5在线加密-SOMD5<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/24/gkctf-2021-crash/image-20230924144356908.png" alt="image-20230924144356908"></p><p>我们可以分别解出</p><p>e402 f20a f940</p><p>我们将flag拼接起来就可以得出我们完整flag</p><p>GKCTF{87f645e9-b628-412f-9d7a-e402f20af940}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>长城杯-2021-院校组-Just_cmp-re</title>
      <link href="/2023/09/23/chang-cheng-bei-2021-yuan-xiao-zu-just-cmp-re/"/>
      <url>/2023/09/23/chang-cheng-bei-2021-yuan-xiao-zu-just-cmp-re/</url>
      
        <content type="html"><![CDATA[<h1 id="长城杯-2021-院校组-Just-cmp-re"><a href="#长城杯-2021-院校组-Just-cmp-re" class="headerlink" title="长城杯-2021-院校组-Just_cmp-re"></a>长城杯-2021-院校组-Just_cmp-re</h1><p>拿到这道题，其实是很迷糊的，因为按理说，直接进行比较这种，见过的都是将strcmp在init那里进行重写，但是很奇怪的是这道题没有，我去init去寻找之后，并没有找到进行处理的函数。很奇怪的。</p><p>函数不多，找到了一个疑似是加密的函数</p><p><img lazyload src="/images/loading.svg" data-src="/2023/09/23/chang-cheng-bei-2021-yuan-xiao-zu-just-cmp-re/image-20230923233927442.png" alt="image-20230923233927442"></p><p>但是，也很奇怪,按了交叉应用之后，发现没有函数调用它？？？？（因为其他函数都不像加密，所以很大概率就认定这个是加密函数）</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230923234221950.png" alt="image-20230923234221950"></p><p>不排除我IDA出差。。。。</p><p>后来去看了wp才发现，果然，就是这里是加密</p><p>解密很简单，这道题就直接猜是将flag{*…},里面的 *进行操作,将这里面的数据提取出来加即可</p><p><img lazyload src="/images/loading.svg" data-src="/2023/09/23/chang-cheng-bei-2021-yuan-xiao-zu-just-cmp-re/image-20230923235213549.png" alt="image-20230923235213549"></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> arr[<span class="number">38</span>] = {</span><br><span class="line">        <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x37</span>, <span class="number">0x07</span>, <span class="number">0x0A</span>, <span class="number">0x37</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x0A</span>, <span class="number">0x06</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x38</span>,</span><br><span class="line">        <span class="number">0x07</span>, <span class="number">0x0A</span>, <span class="number">0x3B</span>, <span class="number">0x08</span>, <span class="number">0x38</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x3B</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x3B</span>, <span class="number">0x37</span>,</span><br><span class="line">        <span class="number">0x0D</span>, <span class="number">0x0F</span>, <span class="number">0x07</span>, <span class="number">0x38</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>};</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>  i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, arr[i] + <span class="number">0x2a</span>);</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>最后解出 flag{a14a424005b14e2b89ed45031ea791b9}</p><p>至于为什么没有用到</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230923235559230.png" alt="image-20230923235559230"></p><p>看到这里，想必，懂的都懂。显然没有hook成功.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>虎符CTF2022 —shellcode</title>
      <link href="/2023/09/23/hfctf2022-shellcod/"/>
      <url>/2023/09/23/hfctf2022-shellcod/</url>
      
        <content type="html"><![CDATA[<h1 id="虎符CTF2022-—shellcode"><a href="#虎符CTF2022-—shellcode" class="headerlink" title="虎符CTF2022 —shellcode"></a>虎符CTF2022 —shellcode</h1><p>打开这道题，我们可以发现这个是进行加壳了的软件</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/23/hfctf2022-shellcod/image-20230923175055902.png" alt="image-20230923175055902"></p><p>我们进行动态调试，先准备手动脱壳的，脱的时候发现居然有反调试，准备动态调试将反调试的patch但是发现很难脱，脱了半天还在循环，可能太菜的原因（T _ T）。但是我们脱的时候可以发现，这个就是themida的壳。去网上一搜，果然是强壳，难脱。。。</p><p>去网上找了一个可以绕过这个壳反调试</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/23/hfctf2022-shellcod/image-20230923175116737.png" alt="image-20230923175116737"></p><p>下载下来后拷贝对应版本的插件到你的x64dbg插件目录,如64位,拷贝SharpOD x64.dp64文件,然后重启调试器在插件菜单中配置</p><p>再将这个选中。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/23/hfctf2022-shellcod/image-20230923175131708.png" alt="image-20230923175131708"></p><p>这样我们就可以愉快的脱壳了。</p><p>将程序放入X32DBGz中进行分析，我们按F9运行几次，我们就可以运行到我们的OPE之中了。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023/09/23/hfctf2022-shellcod/image-20230923175149097.png" alt="image-20230923175149097"></p><p>我们使用Syclla插件将可以将这个dump出来</p><p>或者记下这个地址，我们使用IDA的附加调试，将IDA附加到程序上，因为程序运行到了打印字符 了，所以壳肯定是解开了。因此我们可以就此直接找到解密后的代码处。</p><p><img lazyload="" src="/images/loading.svg" data-src="/image-20230923175210269.png" alt="image-20230923175210269"></p><p>我们可以找到我们的解密后的代码 开始分析</p><p>![Untitled 5](./Untitled 5.png)</p><p>首先我们可以知道，我们需要输入的shellcode是352位</p><p>进入这个函数</p><p>![Untitled 6](./Untitled 6.png)</p><p>![Untitled 9](/Untitled 9.png)</p><p>![Untitled 8](/Untitled 8.png)</p><p>进入之后，我们进行简单的分析可以发现，这个函数![Untitled 7](/Untitled 7.png)实现的是base64加密</p><p>往后分析我们可以发现有一个将数据右移了3位</p><p>这里特征很明显0x61C88647 和加密特征很明显，是xxtea加密，我们对比原版的XXtea我们可以发现</p><p>就进行魔改后的</p><p>![Untitled 10](./Untitled 10.png)</p><p>由此shellcode解密分析完毕，我们写一个脚本将其shellcoe出来</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0x9e3779b9</span></span><br><span class="line"><span class="type">char</span> basetable[] = {</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x40</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x3E</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x3F</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>,</span><br><span class="line">    <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>,</span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x11</span>, <span class="number">0x12</span>, <span class="number">0x13</span>, <span class="number">0x14</span>, <span class="number">0x15</span>, <span class="number">0x16</span>, <span class="number">0x17</span>, <span class="number">0x18</span>, <span class="number">0x19</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x1C</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x1F</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0x23</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x26</span>, <span class="number">0x27</span>,</span><br><span class="line">    <span class="number">0x28</span>, <span class="number">0x29</span>, <span class="number">0x2A</span>, <span class="number">0x2B</span>, <span class="number">0x2C</span>, <span class="number">0x2D</span>, <span class="number">0x2E</span>, <span class="number">0x2F</span>, <span class="number">0x30</span>, <span class="number">0x31</span>,</span><br><span class="line">    <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>, <span class="number">0x42</span>};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">FindIndex</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (basetable[i] == x)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BaseDecode</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *flag, <span class="type">int</span> len, <span class="type">unsigned</span> <span class="type">char</span> *input)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; len; i += <span class="number">3</span>, j += <span class="number">4</span>)</span><br><span class="line">    {</span><br><span class="line">        input[j] = (flag[i] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">        input[j + <span class="number">1</span>] = ((flag[i] &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | (flag[i + <span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        input[j + <span class="number">2</span>] = ((flag[i + <span class="number">1</span>] &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>) | (flag[i + <span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        input[j + <span class="number">3</span>] = flag[i + <span class="number">2</span>] &amp; <span class="number">0x3F</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len / <span class="number">3</span> * <span class="number">4</span>; i++)</span><br><span class="line">        input[i] = <span class="built_in">FindIndex</span>(input[i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="function">T <span class="title">ROL</span><span class="params">(T value, <span class="type">int</span> count)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span> nbits = <span class="built_in">sizeof</span>(T) * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        count %= nbits;</span><br><span class="line"></span><br><span class="line">        T high = value &gt;&gt; (nbits - count);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">T</span>(<span class="number">-1</span>) &lt; <span class="number">0</span>) <span class="comment">// signed value</span></span><br><span class="line"></span><br><span class="line">            high &amp;= ~((<span class="built_in">T</span>(<span class="number">-1</span>) &lt;&lt; count));</span><br><span class="line"></span><br><span class="line">        value &lt;&lt;= count;</span><br><span class="line"></span><br><span class="line">        value |= high;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line"></span><br><span class="line">        count = -count % nbits;</span><br><span class="line"></span><br><span class="line">        T low = value &lt;&lt; (nbits - count);</span><br><span class="line"></span><br><span class="line">        value &gt;&gt;= count;</span><br><span class="line"></span><br><span class="line">        value |= low;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">66</span>] = {<span class="number">0x4B6B89A1</span>, <span class="number">0x74C15453</span>, <span class="number">0x4092A06E</span>, <span class="number">0x429B0C07</span>, <span class="number">0x40281E84</span>, <span class="number">0x8B5B44C9</span>, <span class="number">0x66FEB37B</span>, <span class="number">0x3C77A603</span>,</span><br><span class="line">                          <span class="number">0x79C5892D</span>, <span class="number">0x0D7ADA97</span>, <span class="number">0x1D51AA56</span>, <span class="number">0x02D4D703</span>, <span class="number">0x4FA526BA</span>, <span class="number">0x32FAD64A</span>, <span class="number">0x0C0F6091</span>, <span class="number">0x562B7593</span>,</span><br><span class="line">                          <span class="number">0xDB9ADD67</span>, <span class="number">0x76165563</span>, <span class="number">0xA5F79315</span>, <span class="number">0x3AEB991D</span>, <span class="number">0x1AB721D4</span>, <span class="number">0xAACD9D2C</span>, <span class="number">0x825C2B27</span>, <span class="number">0x76A7761A</span>,</span><br><span class="line">                          <span class="number">0xB4005F18</span>, <span class="number">0x117F3763</span>, <span class="number">0x512CC540</span>, <span class="number">0xC594A16F</span>, <span class="number">0xD0E24F8C</span>, <span class="number">0x9CA3E2E9</span>, <span class="number">0x0A9CC2D5</span>, <span class="number">0x4629E61D</span>,</span><br><span class="line">                          <span class="number">0x637129E3</span>, <span class="number">0xCA4E8AD7</span>, <span class="number">0xF5DFAF71</span>, <span class="number">0x474E68AB</span>, <span class="number">0x542FBC3A</span>, <span class="number">0xD6741617</span>, <span class="number">0xAD0DBBE5</span>, <span class="number">0x62F7BBE3</span>,</span><br><span class="line">                          <span class="number">0xC8D68C07</span>, <span class="number">0x880E950E</span>, <span class="number">0xF80F25BA</span>, <span class="number">0x767A264C</span>, <span class="number">0x9A7CE014</span>, <span class="number">0x5C8BC9EE</span>, <span class="number">0x5D9EF7D4</span>, <span class="number">0xB999ACDE</span>,</span><br><span class="line">                          <span class="number">0xB2EC8E13</span>, <span class="number">0xEE68232D</span>, <span class="number">0x927C5FCE</span>, <span class="number">0xC9E3A85D</span>, <span class="number">0xAC74B56B</span>, <span class="number">0x42B6E712</span>, <span class="number">0xCD2898DA</span>, <span class="number">0xFCF11C58</span>,</span><br><span class="line">                          <span class="number">0xF57075EE</span>, <span class="number">0x5076E678</span>, <span class="number">0xD4D66A35</span>, <span class="number">0x95105AB9</span>, <span class="number">0x1BB04403</span>, <span class="number">0xB240B959</span>, <span class="number">0x7B4E261A</span>, <span class="number">0x23D129D8</span>,</span><br><span class="line">                          <span class="number">0xF5E752CD</span>, <span class="number">0x4EA78F70</span>};</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = {<span class="number">116</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">97</span>};</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> y, z, p, rounds, e;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">66</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    sum = rounds * delta;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    {</span><br><span class="line">        e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">        {</span><br><span class="line">            z = v[p - <span class="number">1</span>];</span><br><span class="line">            v[p] -= ((((z &gt;&gt; <span class="number">6</span>) ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((key[(p &amp; <span class="number">3</span>) ^ e] ^ z) + (y ^ sum)));</span><br><span class="line">            y = v[p];</span><br><span class="line">        }</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        v[<span class="number">0</span>] -= (((key[(p ^ e) &amp; <span class="number">3</span>] ^ z) + (y ^ sum)) ^ (((y &lt;&lt; <span class="number">2</span>) ^ (z &gt;&gt; <span class="number">6</span>)) + ((z &lt;&lt; <span class="number">4</span>) ^ (y &gt;&gt; <span class="number">3</span>))));</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        sum = sum - delta;</span><br><span class="line">    } <span class="keyword">while</span> (--rounds);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *t = (<span class="type">unsigned</span> <span class="type">char</span> *)v;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> basecode[<span class="number">66</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        basecode[i] = <span class="built_in">ROL</span>(t[i], <span class="number">-3</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0x%x, "</span>, basecode[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> input[<span class="number">352</span>];</span><br><span class="line">    <span class="built_in">BaseDecode</span>(basecode, <span class="number">66</span> * <span class="number">4</span>, input);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">352</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, input[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>然后我们再搓一个shellcode加载器将这个32位的shellcode加载出来</p><p>#include &lt;string.h&gt;<br>#include &lt;Windows.h&gt;</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = {</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0xfc</span>, <span class="number">0x68</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x7</span>, <span class="number">0x33</span>, <span class="number">0xd2</span>, <span class="number">0x64</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x30</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0xc</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x14</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x28</span>, <span class="number">0xf</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x2</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0xe2</span>, <span class="number">0xf0</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x10</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x3</span>, <span class="number">0xc2</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x78</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0xf</span>, <span class="number">0x84</span>, <span class="number">0xbe</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0xc2</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x20</span>, <span class="number">0x3</span>, <span class="number">0xda</span>, <span class="number">0x83</span>, <span class="number">0xf9</span>, <span class="number">0x0</span>, <span class="number">0xf</span>, <span class="number">0x84</span>, <span class="number">0xa9</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x8b</span>, <span class="number">0x3</span>, <span class="number">0xf2</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0x3a</span>, <span class="number">0xc4</span>, <span class="number">0x75</span>, <span class="number">0xf4</span>, <span class="number">0x3</span>, <span class="number">0x7c</span>, <span class="number">0x24</span>, <span class="number">0x4</span>, <span class="number">0x3b</span>, <span class="number">0x7c</span>, <span class="number">0x24</span>, <span class="number">0xc</span>, <span class="number">0x75</span>, <span class="number">0xd9</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc9</span>, <span class="number">0x83</span>, <span class="number">0xc2</span>, <span class="number">0x50</span>, <span class="number">0xf</span>, <span class="number">0xb6</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0x41</span>, <span class="number">0x83</span>, <span class="number">0xf9</span>, <span class="number">0xe</span>, <span class="number">0x75</span>, <span class="number">0xf1</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x57</span>, <span class="number">0x33</span>, <span class="number">0xff</span>, <span class="number">0x33</span>, <span class="number">0xc9</span>, <span class="number">0x8b</span>, <span class="number">0x54</span>, <span class="number">0x24</span>, <span class="number">0x3c</span>, <span class="number">0x52</span>, <span class="number">0xf</span>, <span class="number">0xb6</span>, <span class="number">0x1c</span>, <span class="number">0xe</span>, <span class="number">0xb8</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0xf7</span>, <span class="number">0xeb</span>, <span class="number">0xd1</span>, <span class="number">0xfa</span>, <span class="number">0x8b</span>, <span class="number">0xc2</span>, <span class="number">0xc1</span>, <span class="number">0xe8</span>, <span class="number">0x1f</span>, <span class="number">0x3</span>, <span class="number">0xc2</span>, <span class="number">0x8d</span>, <span class="number">0x4</span>, <span class="number">0x80</span>, <span class="number">0x2b</span>, <span class="number">0xd8</span>, <span class="number">0x5a</span>, <span class="number">0xf</span>, <span class="number">0xb6</span>, <span class="number">0x4</span>, <span class="number">0xa</span>, <span class="number">0x2b</span>, <span class="number">0xc3</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3</span>, <span class="number">0xf8</span>, <span class="number">0x41</span>, <span class="number">0x83</span>, <span class="number">0xf9</span>, <span class="number">0xe</span>, <span class="number">0x75</span>, <span class="number">0xd4</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0xd</span>, <span class="number">0x3b</span>, <span class="number">0x3c</span>, <span class="number">0x24</span>, <span class="number">0x74</span>, <span class="number">0x16</span>, <span class="number">0x68</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x8b</span>, <span class="number">0xc4</span>, <span class="number">0x68</span>, <span class="number">0x6e</span>, <span class="number">0x6f</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x54</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x5c</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xd3</span>, <span class="number">0xeb</span>, <span class="number">0x14</span>, <span class="number">0x68</span>, <span class="number">0x25</span>, <span class="number">0x73</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x8b</span>, <span class="number">0xc4</span>, <span class="number">0x68</span>, <span class="number">0x79</span>, <span class="number">0x65</span>, <span class="number">0x73</span>, <span class="number">0x0</span>, <span class="number">0x54</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x5c</span>, <span class="number">0x24</span>, <span class="number">0x48</span>, <span class="number">0xff</span>, <span class="number">0xd3</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x58</span>, <span class="number">0x61</span>, <span class="number">0xc3</span>, <span class="number">0x58</span>, <span class="number">0x5f</span>, <span class="number">0x5a</span>, <span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xe9</span>, <span class="number">0xb</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    PVOID p = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, <span class="built_in">sizeof</span>(shellcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memcpy</span>(p, shellcode, <span class="built_in">sizeof</span>(shellcode));</span><br><span class="line">    ((<span class="built_in">void</span>(__stdcall*)())(p))();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>看分析还是比较简单，就是将原本程序里面的两端提示，进行加密</p><p><a class="link" href="https://www.notion.so/">https://www.notion.so<i class="fas fa-external-link-alt"></i></a></p><p>写一个脚本将其解密</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> data2[]=<span class="string">"LoadLibraryExA"</span>;</span><br><span class="line"><span class="type">char</span> data1[]=<span class="string">"is program can"</span>;</span><br><span class="line"><span class="type">char</span> flag[]={};</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(data1); i++)</span><br><span class="line">{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,data1[i]+data2[i]%<span class="number">5</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//jt"psojvcq!gan</span></span><br></pre></td></tr></tbody></table></figure></div><p>然后将flag 进行md5操作即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>柏鹭杯-2021-baby_python（pyinstaller打包后进行了AES加密）</title>
      <link href="/2023/09/22/bo-lu-bei-2021-baby-python-pyinstaller-da-bao-hou-jin-xing-liao-aes-jia-mi-9152683296194b56a51b277fbc669217/"/>
      <url>/2023/09/22/bo-lu-bei-2021-baby-python-pyinstaller-da-bao-hou-jin-xing-liao-aes-jia-mi-9152683296194b56a51b277fbc669217/</url>
      
        <content type="html"><![CDATA[<h1 id="柏鹭杯-2021-baby-python（pyinstaller打包后进行了AES加密）"><a href="#柏鹭杯-2021-baby-python（pyinstaller打包后进行了AES加密）" class="headerlink" title="[柏鹭杯 2021]baby_python（pyinstaller打包后进行了AES加密）"></a>[柏鹭杯 2021]baby_python（pyinstaller打包后进行了AES加密）</h1><p>找到主函数引用的文件，然后对应的将其解密</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">inf = <span class="built_in">open</span>(<span class="string">r'PYZ-00.pyz_extracted\baby_python\baby_core.pyc.encrypted'</span>, <span class="string">'rb'</span>)</span><br><span class="line">c = Cipher()</span><br><span class="line"></span><br><span class="line">buf = c.decrypt(inf.read())</span><br><span class="line">buf = zlib.decompress(buf) <span class="comment"># 查看这个代码文件能发现密文是用zlib压缩过的所以需要解压缩</span></span><br><span class="line"></span><br><span class="line">out = <span class="built_in">open</span>(<span class="string">r'PYZ-00.pyz_extracted\baby_python\baby_core.pyc'</span>, <span class="string">'wb'</span>)</span><br><span class="line">out.write(buf)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'written down %d bytes'</span> % <span class="built_in">len</span>(buf))</span><br><span class="line"></span><br><span class="line">inf.close()</span><br><span class="line">out.close()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p><a class="link" href="https://bbs.kanxue.com/thread-271253.htm">[原创]Python逆向——Pyinstaller逆向-软件逆向-看雪-安全社区|安全招聘|kanxue.com<i class="fas fa-external-link-alt"></i></a></p><p>另外一个可以参考的脚本</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> tinyaes</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"> </span><br><span class="line">CRYPT_BLOCK_SIZE = <span class="number">16</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从crypt_key.pyc获取key，也可自行反编译获取</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">'MySup3rS3cr3tK3y'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line"> </span><br><span class="line">inf = <span class="built_in">open</span>(<span class="string">'baby_core.pyc.encrypted'</span>, <span class="string">'rb'</span>) <span class="comment"># 打开加密文件</span></span><br><span class="line">outf = <span class="built_in">open</span>(<span class="string">'baby_core.pyc'</span>, <span class="string">'wb'</span>) <span class="comment"># 输出文件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 按加密块大小进行读取</span></span><br><span class="line">iv = inf.read(CRYPT_BLOCK_SIZE)</span><br><span class="line"> </span><br><span class="line">cipher = tinyaes.AES(key, iv)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">plaintext = zlib.decompress(cipher.CTR_xcrypt_buffer(inf.read()))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 补pyc头(最后自己补也行)</span></span><br><span class="line">outf.write(<span class="string">b'\x55\x0d\x00\x00\0\0\0\0\0\0\0\0\0\0\0\0'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 写入解密数据</span></span><br><span class="line">outf.write(plaintext)</span><br><span class="line"> </span><br><span class="line">inf.close()</span><br><span class="line">outf.close()</span><br></pre></td></tr></tbody></table></figure></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021长安杯学生组-snake</title>
      <link href="/2023/09/02/2021-chang-an-bei-xue-sheng-zu-snake-dedaca130c6e4381aa5ea85dcaa8674f/"/>
      <url>/2023/09/02/2021-chang-an-bei-xue-sheng-zu-snake-dedaca130c6e4381aa5ea85dcaa8674f/</url>
      
        <content type="html"><![CDATA[<h1 id="2021长安杯学生组-snake"><a href="#2021长安杯学生组-snake" class="headerlink" title="2021长安杯学生组-snake"></a>2021长安杯学生组-snake</h1><p>这道题拿到手，我们可以发现，这道题开了很高的优化，使得我们一点点的分析代码比较困难，我们就直接看关键的步骤即可。</p><p><img lazyload src="/images/loading.svg" data-src="/./Untitled-169545682564910.png" alt="Untitled"></p><p>这里我们直接查一下flag</p><p><img lazyload src="/images/loading.svg" data-src="/./Untitled%201.png" alt="Untitled"></p><p>进入函数</p><p>![Untitled](./Untitled 2-16954567668451.png)</p><p>我们可以直接知道，游戏玩通关之后我们的flag会自动打印出来，但是这个函数中，其中关于值的，grid_mats这个数据是从外部传入的，我们可以猜测要么与wasd这中步骤数有关，要么与关卡数有关，要么与食物（身体长度有关）。我们查看交叉应用来看看到底是什么？</p><p>![Untitled](./Untitled 3-16954567845912.png)</p><p>通过这些函数名我们可以知道，这里的flag与卡关数是有关的</p><p>![Untitled](./Untitled 4-16954567892043.png)</p><p>主函数里面set_level是生成关卡的，因此操作还是在主函数中</p><p>![Untitled](./Untitled 5-16954567926444.png)</p><p>这里是一个关键地方，判断得分$与判断游戏结束的两个if，这两个if又在一个while循环里面，当我们吃到$的时候，我们就会跳出这个循环，由此我们可以知道，这个循环就是我们移动过程的判定循环，这里我们patch关于v11的判断，将其变成≠$就跳出，这样只要走一步就算是吃了$,但是我们patch之后运行，我们会发现动一下就说游戏结束了，也就是说，肯定还有什么比较关键的判断步骤，会直接让我们跳到重开。</p><p>![Untitled](./Untitled 6-16954567967525.png)</p><p>这个v79这个if判断，我们翻到后面可以知道</p><p>![Untitled](./Untitled 7-16954568002266.png)</p><p>必须当v79等于200的时候，才会打印我们的flag,我们可以知道，我们flag会进过200次的循环计算才能出现。</p><p>![Untitled](./Untitled 8-16954568033587.png)</p><p>通过这个函数我们可以知道，我们的v79代表的是我们的关卡</p><p>在上面的那个图中，有着一个进入show_score是一个判断，之后，便会失败</p><p>![Untitled](./Untitled 9-16954568072168.png)</p><p>这个v82在下面的计算之中，我们可以大致分析（猜）出，这个v82就是关卡判断，判定我们是不是过关了，当v82等于零的时候才算过关，不然就会跳到重开去，由此印证了上的猜测。这里我们同样patch将这个判断变成!v82,这样只要不是0都能过关，这样就是能让我随意按wasd就能直接过下关。</p><p>200关后得出我们的flag.</p><p>![Untitled](./Untitled 10-16954568105959.png)</p><p>做完之后，还是蛮有收获的，其实像这中游戏逆向等，大都那几个步骤，寻找关键函数，关键判断，然后通过patch，或者添加代码来让程序能快速的达到我们的目的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>花指令总结</title>
      <link href="/2023/08/09/hua-zhi-ling-zong-jie-7789b9f63bcd41f2828df0aa7fa2fa23/"/>
      <url>/2023/08/09/hua-zhi-ling-zong-jie-7789b9f63bcd41f2828df0aa7fa2fa23/</url>
      
        <content type="html"><![CDATA[<h1 id="花指令总结"><a href="#花指令总结" class="headerlink" title="花指令总结"></a>花指令总结</h1><p><a href="%E8%8A%B1%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93%207789b9f63bcd41f2828df0aa7fa2fa23/1.pdf">1.PDF</a></p><p>做花指令的题，主要是看汇编代码，将那些可疑的代码patch掉，多patch，说不一定就patch出来了，有些题就比较恶心，出现一大堆花，人肉去花非常麻烦，只能使用脚本。</p><h2 id="什么是花指令？"><a href="#什么是花指令？" class="headerlink" title="什么是花指令？"></a>什么是花指令？</h2><p>所谓花指令就是指程序中完全冗余，不影响程序功能却会对逆向工程产生干扰的指令。</p><h2 id="花指令的作用"><a href="#花指令的作用" class="headerlink" title="花指令的作用:"></a>花指令的作用:</h2><p>主打一个静态混淆,让我们的反汇编工具不能正常识别出,像我们的IDA一些加花了的程序,我们就不能看到它的伪代码了.大多数起到一个提高逆向成本的作用,花时间去花.</p><p>在了解花指令之前,我们首先要了解我们的反编译是怎么运作,通过这样我们才能从源头明白,为啥会有花指令的出现.</p><h2 id="反汇编器的运作方式"><a href="#反汇编器的运作方式" class="headerlink" title="反汇编器的运作方式:"></a>反汇编器的运作方式:</h2><p>我们常见的工具有,ida,od,WinDbg,objdump,这些工具运用的原理有不同两种</p><p><strong><strong>线性扫描反汇编</strong></strong></p><p>正如其名,像一条直线式的进行扫描然后反汇编.就是按照着机器码的顺序,一条条的翻译我们的机器码,逐条的反汇编我们的每一条指令，直到将代码段整个扫描完毕.</p><p>这个方法有一个明显的缺点,就是它太直了,它不会考虑到代码中可能混有数据，因此无法正确地将嵌入的数据与代码区分开。从而造成反汇编失败.</p><p><strong><strong>递归下降反汇编</strong></strong></p><p>这个算法主要是基于控制流来判断是否被另一条指令引用来决定是否进行反汇编.</p><p>主要为下面几个指令进行判断:</p><p><strong><strong>顺序流指令(一条一条进行执行的指令),条件分支指令(ja,je,jne…..),无条件分支指令(jmp),函数调用指令(call),返回指令(ret)</strong></strong></p><p>优点:具有区分代码与数据的能力.</p><p>缺点:就是我们可以构造反汇编器无法判断真假的恒真/恒假分支，再插入不可执行的花指令来达到欺骗效果。</p><p>对于花指令的去除,我们现在用于分析的主要是IDA,而我们的IDA运用的算法正是递归下降算法的反汇编.</p><p>因此我们的花指令主要的是针对于让我们的IDA混淆起来,让它不能正常的反编译我们的文件,从而增大逆向分析难度.</p><p>opcode。opcode&nbsp;<em>operation code</em>也叫指令机器码&nbsp;<em>Instruction Machine Code</em>，就是汇编指令翻译后的二进制形式，我们也称之为硬编码，比如0XE8一般为call，0XE9为JMP,0X90为NOP.</p><h2 id="一些常见的花指令套路"><a href="#一些常见的花指令套路" class="headerlink" title="一些常见的花指令套路"></a>一些常见的花指令套路</h2><p><strong>1、插入无效步骤</strong></p><p>无效跳转</p><p>比如通过一些抵消的操作来达到混淆效果，比如在push后，然后就紧接着Jmp，跳到一个地方后，pop，然后在jmp回来，形成一个无效的代码，从而造成混淆。</p><p><strong>2、绝对跳转（永真跳转）</strong></p><p>一个是直接使用jmp进行跳转，还有的就是进行je,jne这种互补的指令，由于递归下降算法不能获取到程序运行中的上下文信息，遇到条件跳转语句时，它会递归地将跳转的分支与不跳转的分支都就行反汇编。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_asm {</span><br><span class="line">xor eax, eax;</span><br><span class="line">jz s;</span><br><span class="line">add esp, <span class="number">0x11</span>;</span><br><span class="line">s:</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>对于这种我们直接nop就行。</p><h3 id="二，"><a href="#二，" class="headerlink" title="二，"></a>二，</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__asm { </span><br><span class="line">    _emit <span class="number">075</span>h    <span class="meta">#jmp $+4</span></span><br><span class="line">    _emit <span class="number">2</span>h     <span class="comment">//表示向后跳转的机械码数</span></span><br><span class="line">    _emit <span class="number">0E9</span>h</span><br><span class="line">    _emit <span class="number">0</span>EDh</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="/2023/08/09/hua-zhi-ling-zong-jie-7789b9f63bcd41f2828df0aa7fa2fa23/Untitled.png" alt="Untitled"></p><p><strong>3、call,与ret的使用(指令替换)</strong></p><p>一、</p><p>例如，对于我们的call addr指令，是可以替换为下面的片段</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push addr</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>因为call本质上将其拆解为两条指令进行理解：<code>push 函数并返回地址</code>然后<code>jmp 函数地址</code></p><p>对于我们的ret, 可以替换为</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push ecx</span><br><span class="line">mov ecx,[esp+<span class="number">4</span>]</span><br><span class="line">add esp,<span class="number">8</span></span><br><span class="line">jmp ecx</span><br></pre></td></tr></tbody></table></figure></div><p>对于ret本质上等于<code>pop eip</code> 加 jmp</p><p>通过此中代换，就会破坏我们的ecx寄存器，从而操作我们工具解析出的函数地址范围与调用关系出现错误。</p><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__asm {</span><br><span class="line">call LABEL9;</span><br><span class="line">_emit <span class="number">0x83</span>;</span><br><span class="line">LABEL9:</span><br><span class="line">add dword ptr ss : [esp] , <span class="number">8</span>;</span><br><span class="line">ret;</span><br><span class="line">__emit <span class="number">0xF3</span>;  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div><p>在使用内联汇编时，<code>ret</code>&nbsp;指令用于从子函数返回到调用函数。正常情况下，<code>ret</code>&nbsp;指令会弹出栈顶的返回地址，并将程序控制流转移到该地址。</p><p>然而，在某些特殊情况下，我们可能需要在&nbsp;<code>ret</code>&nbsp;后面添加机器码。这是因为在编写内联汇编时，编译器会对代码进行优化，并且可能会对指令进行重新排序或优化。如果我们在&nbsp;<code>ret</code>&nbsp;指令后面没有添加机器码，编译器可能会将其与后面的指令进行合并或优化，导致程序行为不符合预期。</p><p>通过在&nbsp;<code>ret</code>&nbsp;指令后面添加机器码，我们可以确保编译器不会对&nbsp;<code>ret</code>&nbsp;指令进行优化或重新排序。这样可以保证&nbsp;<code>ret</code>&nbsp;指令的行为与我们的预期一致，从而实现特定的功能或行为。</p><p><code>ret</code>&nbsp;指令后面的机器码不会被执行，而是用于控制程序的流程。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%201.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%202.png" alt="Untitled"></p><p>出现堆栈不平衡,从而造成后面的代码不能成功反编译出</p><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__asm {</span><br><span class="line">__asm jmp junk1</span><br><span class="line">__asm __emit <span class="number">0xe8</span></span><br><span class="line">__asm junk2:</span><br><span class="line">__asm ret</span><br><span class="line">__asm __emit <span class="number">0xe8</span></span><br><span class="line">__asm junk1 :</span><br><span class="line">__asm call junk2</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>效果如图：</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%203.png" alt="Untitled"></p><p>对于call与ret的花指令构造可以在函数中修改返回地址，达到跳过thunkcode到正常流程的目的。</p><p><strong>4、相互抵消的操作（IDA能修复）</strong></p><p>如下</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">pushfd</span><br><span class="line">add esp,<span class="number">0xd</span></span><br><span class="line">nop</span><br><span class="line">sub esp,<span class="number">0xd</span></span><br><span class="line">popfd</span><br><span class="line">mov ebp,esp</span><br><span class="line">sub esp,<span class="number">0x100</span></span><br></pre></td></tr></tbody></table></figure></div><p>在汇编代码中添加一下互相抵消的指令，从而让分析器，发生干扰，不能正常反编译。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EZ_CODE</title>
      <link href="/2023/08/02/ez-code-f470f8b01209484b8ebc3ceb62f6bb3d/"/>
      <url>/2023/08/02/ez-code-f470f8b01209484b8ebc3ceb62f6bb3d/</url>
      
        <content type="html"><![CDATA[<h1 id="EZ-CODE"><a href="#EZ-CODE" class="headerlink" title="EZ_CODE"></a>EZ_CODE</h1><p>我们打开会发现是一些莫名的代码，如果能被称为代码的话，这个代码是混淆过后的powershell代码，拿到手其实是没什么思路的。</p><p><img lazyload="" src="/images/loading.svg" data-src="/./EZ_CODE%20f470f8b01209484b8ebc3ceb62f6bb3d/Untitled.png" alt="Untitled"></p><p>我们使用，powershell ISE（windous自带的的一个书写powershell脚本与4）打开这个代码，运行它，出现了Do you konw PWSH.(PWSH就是表示powershell的意思）</p><p><img lazyload="" src="/images/loading.svg" data-src="/EZ_CODE%20f470f8b01209484b8ebc3ceb62f6bb3d/Untitled%201.png" alt="Untitled"></p><p>这里出现了字符，但是在那一坨代码中是没有任何字符的，只有${},等等，是shell命令似的东西 ，这里我们就猜测是否有操作将字符作参数传入进去的。</p><p>这里我们选中运行一下，按下f9下断点运行，进行调试。</p><p><img lazyload="" src="/images/loading.svg" data-src="/EZ_CODE%20f470f8b01209484b8ebc3ceb62f6bb3d/Untitled%202.png" alt="Untitled"></p><p>出现这个即为调试成功</p><p><a class="link" href="https://blog.csdn.net/slovyz/article/details/47400107">Shell脚本中$0、$?、$!、$$、$*、$#、$@等的意义_slovyz的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/x1269778817/article/details/46535729">https://blog.csdn.net/x1269778817/article/details/46535729<i class="fas fa-external-link-alt"></i></a></p><p>我们可以通过${@*}这条特殊用法，将参数列表作为一个数组展开，然后使用通配符<code>*</code>将数组中的每个元素进行展开，让其解混淆</p><p><img lazyload="" src="/images/loading.svg" data-src="/EZ_CODE%20f470f8b01209484b8ebc3ceb62f6bb3d/Untitled%203.png" alt="Untitled"></p><p>我们将输出的数据提取出来,用py脚本将这些ascii码字符转换为char形势解出</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">input_string =<span class="string">'''[CHar]99+[CHar]108+[CHar]97+[CHar]115+[CHar]115+[CHar]32+[CHar]99+[CHar]104+[CHar]105+[CHar]112+[CHar]101+[CHar]114+[CHar]40+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[</span></span><br><span class="line"><span class="string">CHar]32+[CHar]32+[CHar]32+[CHar]100+[CHar]101+[CHar]102+[CHar]32+[CHar]95+[CHar]95+[CHar]105+[CHar]110+[CHar]105+[CHar]116+[CHar]95+[CHar]95+[CHar]40+[CHar]115+[C</span></span><br><span class="line"><span class="string">Har]101+[CHar]108+[CHar]102+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]115+[CHar]101+[CHar]108+[CHar</span></span><br><span class="line"><span class="string">]102+[CHar]46+[CHar]100+[CHar]32+[CHar]61+[CHar]32+[CHar]48+[CHar]120+[CHar]56+[CHar]55+[CHar]54+[CHar]53+[CHar]52+[CHar]51+[CHar]50+[CHar]49+[CHar]10+[CHar]32+[C</span></span><br><span class="line"><span class="string">Har]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]107+[CHar]48+[CHar]32+[CHar]61+[CHar]32+[CHar]48+[CHar]120+[CHar]54+[CHar]55+[CHar]52+[CHar]53+</span></span><br><span class="line"><span class="string">[CHar]50+[CHar]51+[CHar]48+[CHar]49+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]107+[CHar]49+[CHar]32+[CHar]61+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]48+[CHar]120+[CHar]101+[CHar]102+[CHar]99+[CHar]100+[CHar]97+[CHar]98+[CHar]56+[CHar]57+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHa</span></span><br><span class="line"><span class="string">r]32+[CHar]32+[CHar]107+[CHar]50+[CHar]32+[CHar]61+[CHar]32+[CHar]48+[CHar]120+[CHar]57+[CHar]56+[CHar]98+[CHar]97+[CHar]100+[CHar]99+[CHar]102+[CHar]101+[CHar]10</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]107+[CHar]51+[CHar]32+[CHar]61+[CHar]32+[CHar]48+[CHar]120+[CHar]49+[CHar]48+[CHar]</span></span><br><span class="line"><span class="string">51+[CHar]50+[CHar]53+[CHar]52+[CHar]55+[CHar]54+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]115+[CHar]101+[CHar]108+[CH</span></span><br><span class="line"><span class="string">ar]102+[CHar]46+[CHar]107+[CHar]32+[CHar]61+[CHar]32+[CHar]91+[CHar]107+[CHar]48+[CHar]44+[CHar]32+[CHar]107+[CHar]49+[CHar]44+[CHar]32+[CHar]107+[CHar]50+[CHar]4</span></span><br><span class="line"><span class="string">4+[CHar]32+[CHar]107+[CHar]51+[CHar]93+[CHar]10+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]100+[CHar]101+[CHar]102+[CHar]32+[CHar]101+[CHar]40+[CHar]115+[</span></span><br><span class="line"><span class="string">CHar]101+[CHar]108+[CHar]102+[CHar]44+[CHar]32+[CHar]110+[CHar]44+[CHar]32+[CHar]118+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar</span></span><br><span class="line"><span class="string">]32+[CHar]32+[CHar]32+[CHar]102+[CHar]114+[CHar]111+[CHar]109+[CHar]32+[CHar]99+[CHar]116+[CHar]121+[CHar]112+[CHar]101+[CHar]115+[CHar]32+[CHar]105+[CHar]109+[CH</span></span><br><span class="line"><span class="string">ar]112+[CHar]111+[CHar]114+[CHar]116+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]10+[CHar]10+[CHar]32+[CHar]32+[CHa</span></span><br><span class="line"><span class="string">r]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]100+[CHar]101+[CHar]102+[CHar]32+[CHar]77+[CHar]88+[CHar]40+[CHar]122+[CHar]44+[CHar]32+[CHar]121+[CHar]44</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]44+[CHar]32+[CHar]107+[CHar]101+[CHar]121+[CHar]44+[CHar]32+[CHar]112+[CHar]44+[CHar]32+[CHar]101</span></span><br><span class="line"><span class="string">+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]116+[CHar]101+[CHar]</span></span><br><span class="line"><span class="string">109+[CHar]112+[CHar]49+[CHar]32+[CHar]61+[CHar]32+[CHar]40+[CHar]122+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]62+[CHar]62+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]54+[CHar]32+[CHar]94+[CHar]32+[CHar]121+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]60+[CHar]60+[CHar]32+[CHar]52+[CHar]41+[CH</span></span><br><span class="line"><span class="string">ar]32+[CHar]43+[CHar]32+[CHar]92+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CH</span></span><br><span class="line"><span class="string">ar]32+[CHar]32+[CHar]32+[CHar]40+[CHar]121+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]62+[CHar]62+[CHar]32+[CHar]50+[CHar]32+[CHar]9</span></span><br><span class="line"><span class="string">4+[CHar]32+[CHar]122+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]60+[CHar]60+[CHar]32+[CHar]53+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[C</span></span><br><span class="line"><span class="string">Har]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]116+[CHar]101+[CHar]109+[CHar]112+[CHar]50+[CHar]32+[CHar]61+[CHar]3</span></span><br><span class="line"><span class="string">2+[CHar]40+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]94+[CHar]32+[CHar]121+[CHar]4</span></span><br><span class="line"><span class="string">6+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]41+[CHar]32+[CHar]43+[CHar]32+[CHar]92+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CH</span></span><br><span class="line"><span class="string">ar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]40+[CHar]107+[CHar]101+[CHar]121+[CHar]91+[CHar]40+[CHar]112+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]38+[CHar]32+[CHar]51+[CHar]41+[CHar]32+[CHar]94+[CHar]32+[CHar]101+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]93+[CHar]32+[CHar]94+[CH</span></span><br><span class="line"><span class="string">ar]32+[CHar]122+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]3</span></span><br><span class="line"><span class="string">2+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]114+[CHar]101+[CHar]116+[CHar]117+[CHar]114+[CHar]110+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]1</span></span><br><span class="line"><span class="string">16+[CHar]51+[CHar]50+[CHar]40+[CHar]116+[CHar]101+[CHar]109+[CHar]112+[CHar]49+[CHar]32+[CHar]94+[CHar]32+[CHar]116+[CHar]101+[CHar]109+[CHar]112+[CHar]50+[CHar]4</span></span><br><span class="line"><span class="string">1+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]107+[CHar]101+[CHar]121+[CHar]32+[CHar]61+[CHar]32+[CHar]115+[CHar]101+[C</span></span><br><span class="line"><span class="string">Har]108+[CHar]102+[CHar]46+[CHar]107+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]100+[CHar]101+[CHar]108+[CHar]116+[CHa</span></span><br><span class="line"><span class="string">r]97+[CHar]32+[CHar]61+[CHar]32+[CHar]115+[CHar]101+[CHar]108+[CHar]102+[CHar]46+[CHar]100+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]114+[CHar]111+[CHar]117+[CHar]110+[CHar]100+[CHar]115+[CHar]32+[CHar]61+[CHar]32+[CHar]54+[CHar]32+[CHar]43+[CHar]32+[CHar]53+[CHar]50+[CHar]47+[C</span></span><br><span class="line"><span class="string">Har]47+[CHar]110+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]32+[CHar]</span></span><br><span class="line"><span class="string">61+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]48+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[C</span></span><br><span class="line"><span class="string">Har]32+[CHar]32+[CHar]32+[CHar]32+[CHar]122+[CHar]32+[CHar]61+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]</span></span><br><span class="line"><span class="string">118+[CHar]91+[CHar]110+[CHar]45+[CHar]49+[CHar]93+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]101+[CHar]32+[CH</span></span><br><span class="line"><span class="string">ar]61+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]48+[CHar]41+[CHar]10+[CHar]10+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]119+[CHar]104+[CHar]105+[CHar]108+[CHar]101+[CHar]32+[CHar]114+[CHar]111+[CHar]117+[CHar]110+[CHar]100+[CHar]1</span></span><br><span class="line"><span class="string">15+[CHar]32+[CHar]62+[CHar]32+[CHar]48+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]</span></span><br><span class="line"><span class="string">32+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]43+[CHar]61+[CHar]32+[CHar]100+[CHar]</span></span><br><span class="line"><span class="string">101+[CHar]108+[CHar]116+[CHar]97+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]101+[C</span></span><br><span class="line"><span class="string">Har]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]61+[CHar]32+[CHar]40+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]46+[CHar]118+[C</span></span><br><span class="line"><span class="string">Har]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]62+[CHar]62+[CHar]32+[CHar]50+[CHar]41+[CHar]32+[CHar]38+[CHar]32+[CHar]51+[CHar]10+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]102+[CHar]111+[CHar]114+[CHar]32+[CHar]112+[CHar]32+[CHar]105+[CHar]110+[C</span></span><br><span class="line"><span class="string">Har]32+[CHar]114+[CHar]97+[CHar]110+[CHar]103+[CHar]101+[CHar]40+[CHar]110+[CHar]45+[CHar]49+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]</span></span><br><span class="line"><span class="string">32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]121+[CHar]32+[CHar]61+[CHar]32+[CHar]99+[CHar]95+[CHar</span></span><br><span class="line"><span class="string">]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]118+[CHar]91+[CHar]112+[CHar]43+[CHar]49+[CHar]93+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CHar]91+[CHar]112+[CHar]93+[CHar]</span></span><br><span class="line"><span class="string">32+[CHar]61+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]118+[CHar]91+[CHar]112+[CHar]93+[CHar]32+[CHar]43+</span></span><br><span class="line"><span class="string">[CHar]32+[CHar]77+[CHar]88+[CHar]40+[CHar]122+[CHar]44+[CHar]32+[CHar]121+[CHar]44+[CHar]32+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]44+[CHar]32+[CH</span></span><br><span class="line"><span class="string">ar]107+[CHar]101+[CHar]121+[CHar]44+[CHar]32+[CHar]112+[CHar]44+[CHar]32+[CHar]101+[CHar]41+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]41+[CH</span></span><br><span class="line"><span class="string">ar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]122+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]61+[CHar]32+[CHar]118+[CHar]91+[C</span></span><br><span class="line"><span class="string">Har]112+[CHar]93+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]121+[CHar]32+[CHar]61+</span></span><br><span class="line"><span class="string">[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]118+[CHar]91+[CHar]48+[CHar]93+[CHar]41+[CHar]10+[CHar]32+[CHa</span></span><br><span class="line"><span class="string">r]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CHar]91+[CHar]110+[CHar]45+[CHar]49+[CHar]93+[CHar]32+[C</span></span><br><span class="line"><span class="string">Har]61+[CHar]32+[CHar]99+[CHar]95+[CHar]117+[CHar]105+[CHar]110+[CHar]116+[CHar]51+[CHar]50+[CHar]40+[CHar]118+[CHar]91+[CHar]110+[CHar]45+[CHar]49+[CHar]93+[CHar</span></span><br><span class="line"><span class="string">]32+[CHar]43+[CHar]32+[CHar]77+[CHar]88+[CHar]40+[CHar]122+[CHar]44+[CHar]32+[CHar]121+[CHar]44+[CHar]32+[CHar]116+[CHar]111+[CHar]116+[CHar]97+[CHar]108+[CHar]44</span></span><br><span class="line"><span class="string">+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]107+[CHar]101+[CHar]121+[CHar]44+[CHar</span></span><br><span class="line"><span class="string">]32+[CHar]110+[CHar]45+[CHar]49+[CHar]44+[CHar]32+[CHar]101+[CHar]41+[CHar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]41+[CHar]46+[CHar]118+[CHar]9</span></span><br><span class="line"><span class="string">7+[CHar]108+[CHar]117+[CHar]101+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]122+[CH</span></span><br><span class="line"><span class="string">ar]46+[CHar]118+[CHar]97+[CHar]108+[CHar]117+[CHar]101+[CHar]32+[CHar]61+[CHar]32+[CHar]118+[CHar]91+[CHar]110+[CHar]45+[CHar]49+[CHar]93+[CHar]10+[CHar]32+[CHar]</span></span><br><span class="line"><span class="string">32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]114+[CHar]111+[CHar]117+[CHar]110+[CHar]100+[CHar]115+[CHar]32+</span></span><br><span class="line"><span class="string">[CHar]45+[CHar]61+[CHar]32+[CHar]49+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]114+[CHar]101+[CHar]116+[CHar]117+[CHar</span></span><br><span class="line"><span class="string">]114+[CHar]110+[CHar]32+[CHar]118+[CHar]10+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]100+[CHar]101+[CHar]102+[CHar]32+[CHar]98+[CHar]121+[CHar]116+[CHar]</span></span><br><span class="line"><span class="string">101+[CHar]115+[CHar]50+[CHar]105+[CHar]110+[CHar]116+[CHar]115+[CHar]40+[CHar]115+[CHar]101+[CHar]108+[CHar]102+[CHar]44+[CHar]99+[CHar]115+[CHar]58+[CHar]98+[CHa</span></span><br><span class="line"><span class="string">r]121+[CHar]116+[CHar]101+[CHar]115+[CHar]41+[CHar]45+[CHar]62+[CHar]108+[CHar]105+[CHar]115+[CHar]116+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar</span></span><br><span class="line"><span class="string">]32+[CHar]32+[CHar]32+[CHar]32+[CHar]110+[CHar]101+[CHar]119+[CHar]95+[CHar]108+[CHar]101+[CHar]110+[CHar]103+[CHar]116+[CHar]104+[CHar]61+[CHar]108+[CHar]101+[CH</span></span><br><span class="line"><span class="string">ar]110+[CHar]40+[CHar]99+[CHar]115+[CHar]41+[CHar]43+[CHar]40+[CHar]56+[CHar]45+[CHar]108+[CHar]101+[CHar]110+[CHar]40+[CHar]99+[CHar]115+[CHar]41+[CHar]37+[CHar]</span></span><br><span class="line"><span class="string">56+[CHar]41+[CHar]37+[CHar]56+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]98+[CHar]97+[CHar]114+[CHar]114+[CHar]97+[CHa</span></span><br><span class="line"><span class="string">r]121+[CHar]61+[CHar]99+[CHar]115+[CHar]46+[CHar]108+[CHar]106+[CHar]117+[CHar]115+[CHar]116+[CHar]40+[CHar]110+[CHar]101+[CHar]119+[CHar]95+[CHar]108+[CHar]101+[</span></span><br><span class="line"><span class="string">CHar]110+[CHar]103+[CHar]116+[CHar]104+[CHar]44+[CHar]98+[CHar]39+[CHar]92+[CHar]120+[CHar]48+[CHar]48+[CHar]39+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar</span></span><br><span class="line"><span class="string">]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]61+[CHar]48+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CH</span></span><br><span class="line"><span class="string">ar]61+[CHar]91+[CHar]93+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]119+[CHar]104+[CHar]105+[CHar]108+[CHar]101+[CHar]3</span></span><br><span class="line"><span class="string">2+[CHar]105+[CHar]32+[CHar]60+[CHar]32+[CHar]110+[CHar]101+[CHar]119+[CHar]95+[CHar]108+[CHar]101+[CHar]110+[CHar]103+[CHar]116+[CHar]104+[CHar]58+[CHar]10+[CHar]</span></span><br><span class="line"><span class="string">32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CHar]48+[CHar]32+[CHar]61+[CHar]32+[CHar]105+[CHa</span></span><br><span class="line"><span class="string">r]110+[CHar]116+[CHar]46+[CHar]102+[CHar]114+[CHar]111+[CHar]109+[CHar]95+[CHar]98+[CHar]121+[CHar]116+[CHar]101+[CHar]115+[CHar]40+[CHar]98+[CHar]97+[CHar]114+[C</span></span><br><span class="line"><span class="string">Har]114+[CHar]97+[CHar]121+[CHar]91+[CHar]105+[CHar]58+[CHar]105+[CHar]43+[CHar]52+[CHar]93+[CHar]44+[CHar]32+[CHar]39+[CHar]108+[CHar]105+[CHar]116+[CHar]116+[CH</span></span><br><span class="line"><span class="string">ar]108+[CHar]101+[CHar]39+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+</span></span><br><span class="line"><span class="string">[CHar]49+[CHar]32+[CHar]61+[CHar]32+[CHar]105+[CHar]110+[CHar]116+[CHar]46+[CHar]102+[CHar]114+[CHar]111+[CHar]109+[CHar]95+[CHar]98+[CHar]121+[CHar]116+[CHar]101</span></span><br><span class="line"><span class="string">+[CHar]115+[CHar]40+[CHar]98+[CHar]97+[CHar]114+[CHar]114+[CHar]97+[CHar]121+[CHar]91+[CHar]105+[CHar]43+[CHar]52+[CHar]58+[CHar]105+[CHar]43+[CHar]56+[CHar]93+[C</span></span><br><span class="line"><span class="string">Har]44+[CHar]32+[CHar]39+[CHar]108+[CHar]105+[CHar]116+[CHar]116+[CHar]108+[CHar]101+[CHar]39+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar</span></span><br><span class="line"><span class="string">]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CHar]46+[CHar]97+[CHar]112+[CHar]112+[CHar]101+[CHar]110+[CHar]100+[CHar]40+[CHar]118+[CHar]4</span></span><br><span class="line"><span class="string">8+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CHar]46+[CHar]97+[CHar]</span></span><br><span class="line"><span class="string">112+[CHar]112+[CHar]101+[CHar]110+[CHar]100+[CHar]40+[CHar]118+[CHar]49+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+</span></span><br><span class="line"><span class="string">[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]32+[CHar]43+[CHar]61+[CHar]32+[CHar]56+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32</span></span><br><span class="line"><span class="string">+[CHar]32+[CHar]114+[CHar]101+[CHar]116+[CHar]117+[CHar]114+[CHar]110+[CHar]32+[CHar]118+[CHar]10+[CHar]10+[CHar]100+[CHar]101+[CHar]102+[CHar]32+[CHar]99+[CHar]1</span></span><br><span class="line"><span class="string">04+[CHar]101+[CHar]99+[CHar]107+[CHar]40+[CHar]105+[CHar]110+[CHar]115+[CHar]116+[CHar]114+[CHar]58+[CHar]115+[CHar]116+[CHar]114+[CHar]44+[CHar]99+[CHar]104+[CHa</span></span><br><span class="line"><span class="string">r]101+[CHar]99+[CHar]107+[CHar]108+[CHar]105+[CHar]115+[CHar]116+[CHar]58+[CHar]108+[CHar]105+[CHar]115+[CHar]116+[CHar]41+[CHar]45+[CHar]62+[CHar]105+[CHar]110+[</span></span><br><span class="line"><span class="string">CHar]116+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]108+[CHar]101+[CHar]110+[CHar]103+[CHar]116+[CHar]104+[CHar]61+[CHar]108+[CHar]101+[CHar]110+</span></span><br><span class="line"><span class="string">[CHar]40+[CHar]105+[CHar]110+[CHar]115+[CHar]116+[CHar]114+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]102+[CHar]32+[CHar]108+[CHar]101+</span></span><br><span class="line"><span class="string">[CHar]110+[CHar]103+[CHar]116+[CHar]104+[CHar]37+[CHar]56+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]112+[CHa</span></span><br><span class="line"><span class="string">r]114+[CHar]105+[CHar]110+[CHar]116+[CHar]40+[CHar]34+[CHar]73+[CHar]110+[CHar]99+[CHar]111+[CHar]114+[CHar]114+[CHar]101+[CHar]99+[CHar]116+[CHar]32+[CHar]102+[C</span></span><br><span class="line"><span class="string">Har]111+[CHar]114+[CHar]109+[CHar]97+[CHar]116+[CHar]46+[CHar]34+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]1</span></span><br><span class="line"><span class="string">01+[CHar]120+[CHar]105+[CHar]116+[CHar]40+[CHar]49+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]99+[CHar]61+[CHar]99+[CHar]104+[CHar]105+[CHar]112+</span></span><br><span class="line"><span class="string">[CHar]101+[CHar]114+[CHar]40+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]118+[CHar]32+[CHar]61+[CHar]32+[CHar]99+[CHar]46+[CHar]98+[CHar]121+[CHar</span></span><br><span class="line"><span class="string">]116+[CHar]101+[CHar]115+[CHar]50+[CHar]105+[CHar]110+[CHar]116+[CHar]115+[CHar]40+[CHar]105+[CHar]110+[CHar]115+[CHar]116+[CHar]114+[CHar]46+[CHar]101+[CHar]110+</span></span><br><span class="line"><span class="string">[CHar]99+[CHar]111+[CHar]100+[CHar]101+[CHar]40+[CHar]41+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]111+[CHar]117+[CHar]116+[CHar]112+[CHar]117+[</span></span><br><span class="line"><span class="string">CHar]116+[CHar]61+[CHar]108+[CHar]105+[CHar]115+[CHar]116+[CHar]40+[CHar]99+[CHar]46+[CHar]101+[CHar]40+[CHar]108+[CHar]101+[CHar]110+[CHar]40+[CHar]118+[CHar]41+</span></span><br><span class="line"><span class="string">[CHar]44+[CHar]118+[CHar]41+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]61+[CHar]48+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]1</span></span><br><span class="line"><span class="string">19+[CHar]104+[CHar]105+[CHar]108+[CHar]101+[CHar]40+[CHar]105+[CHar]60+[CHar]108+[CHar]101+[CHar]110+[CHar]40+[CHar]99+[CHar]104+[CHar]101+[CHar]99+[CHar]107+[CHa</span></span><br><span class="line"><span class="string">r]108+[CHar]105+[CHar]115+[CHar]116+[CHar]41+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]10</span></span><br><span class="line"><span class="string">2+[CHar]32+[CHar]105+[CHar]60+[CHar]108+[CHar]101+[CHar]110+[CHar]40+[CHar]111+[CHar]117+[CHar]116+[CHar]112+[CHar]117+[CHar]116+[CHar]41+[CHar]32+[CHar]97+[CHar]</span></span><br><span class="line"><span class="string">110+[CHar]100+[CHar]32+[CHar]111+[CHar]117+[CHar]116+[CHar]112+[CHar]117+[CHar]116+[CHar]91+[CHar]105+[CHar]93+[CHar]61+[CHar]61+[CHar]99+[CHar]104+[CHar]101+[CHa</span></span><br><span class="line"><span class="string">r]99+[CHar]107+[CHar]108+[CHar]105+[CHar]115+[CHar]116+[CHar]91+[CHar]105+[CHar]93+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]3</span></span><br><span class="line"><span class="string">2+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]43+[CHar]61+[CHar]49+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]</span></span><br><span class="line"><span class="string">32+[CHar]101+[CHar]108+[CHar]115+[CHar]101+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[C</span></span><br><span class="line"><span class="string">Har]32+[CHar]98+[CHar]114+[CHar]101+[CHar]97+[CHar]107+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]102+[CHar]32+[CHar]105+[CHar]61+[CHar]61+[CHar</span></span><br><span class="line"><span class="string">]108+[CHar]101+[CHar]110+[CHar]40+[CHar]99+[CHar]104+[CHar]101+[CHar]99+[CHar]107+[CHar]108+[CHar]105+[CHar]115+[CHar]116+[CHar]41+[CHar]58+[CHar]10+[CHar]32+[CHa</span></span><br><span class="line"><span class="string">r]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]114+[CHar]101+[CHar]116+[CHar]117+[CHar]114+[CHar]110+[CHar]32+[CHar]49+[CHar]10+[CHar]32+[CHar]3</span></span><br><span class="line"><span class="string">2+[CHar]32+[CHar]32+[CHar]114+[CHar]101+[CHar]116+[CHar]117+[CHar]114+[CHar]110+[CHar]32+[CHar]48+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]10+[CHar]10+[CHar]105+</span></span><br><span class="line"><span class="string">[CHar]102+[CHar]32+[CHar]95+[CHar]95+[CHar]110+[CHar]97+[CHar]109+[CHar]101+[CHar]95+[CHar]95+[CHar]61+[CHar]61+[CHar]34+[CHar]95+[CHar]95+[CHar]109+[CHar]97+[CHa</span></span><br><span class="line"><span class="string">r]105+[CHar]110+[CHar]95+[CHar]95+[CHar]34+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]97+[CHar]110+[CHar]115+[CHar]61+[CHar]91+[CHar]49+[CHar]51+</span></span><br><span class="line"><span class="string">[CHar]55+[CHar]52+[CHar]50+[CHar]55+[CHar]56+[CHar]56+[CHar]52+[CHar]50+[CHar]44+[CHar]32+[CHar]50+[CHar]49+[CHar]51+[CHar]54+[CHar]48+[CHar]48+[CHar]54+[CHar]53+</span></span><br><span class="line"><span class="string">[CHar]52+[CHar]48+[CHar]44+[CHar]32+[CHar]52+[CHar]49+[CHar]57+[CHar]49+[CHar]48+[CHar]53+[CHar]54+[CHar]56+[CHar]49+[CHar]53+[CHar]44+[CHar]32+[CHar]51+[CHar]50+</span></span><br><span class="line"><span class="string">[CHar]52+[CHar]56+[CHar]56+[CHar]56+[CHar]49+[CHar]51+[CHar]55+[CHar]54+[CHar]93+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]35+[CHar]32+[CHar]103+[CHar]10</span></span><br><span class="line"><span class="string">1+[CHar]110+[CHar]101+[CHar]114+[CHar]97+[CHar]116+[CHar]101+[CHar]82+[CHar]101+[CHar]115+[CHar]40+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]102</span></span><br><span class="line"><span class="string">+[CHar]108+[CHar]97+[CHar]103+[CHar]61+[CHar]105+[CHar]110+[CHar]112+[CHar]117+[CHar]116+[CHar]40+[CHar]39+[CHar]80+[CHar]108+[CHar]101+[CHar]97+[CHar]115+[CHar]1</span></span><br><span class="line"><span class="string">01+[CHar]32+[CHar]105+[CHar]110+[CHar]112+[CHar]117+[CHar]116+[CHar]32+[CHar]102+[CHar]108+[CHar]97+[CHar]103+[CHar]58+[CHar]39+[CHar]41+[CHar]10+[CHar]32+[CHar]3</span></span><br><span class="line"><span class="string">2+[CHar]32+[CHar]32+[CHar]114+[CHar]101+[CHar]115+[CHar]61+[CHar]99+[CHar]104+[CHar]101+[CHar]99+[CHar]107+[CHar]40+[CHar]102+[CHar]108+[CHar]97+[CHar]103+[CHar]4</span></span><br><span class="line"><span class="string">4+[CHar]97+[CHar]110+[CHar]115+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]105+[CHar]102+[CHar]32+[CHar]114+[CHar]101+[CHar]115+[CHar]58+[CHar]10+</span></span><br><span class="line"><span class="string">[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]112+[CHar]114+[CHar]105+[CHar]110+[CHar]116+[CHar]40+[CHar]34+[CHar]67+[CHar]111+[CH</span></span><br><span class="line"><span class="string">ar]110+[CHar]103+[CHar]114+[CHar]97+[CHar]116+[CHar]117+[CHar]108+[CHar]97+[CHar]116+[CHar]105+[CHar]111+[CHar]110+[CHar]115+[CHar]44+[CHar]32+[CHar]121+[CHar]111</span></span><br><span class="line"><span class="string">+[CHar]117+[CHar]39+[CHar]118+[CHar]101+[CHar]32+[CHar]103+[CHar]111+[CHar]116+[CHar]32+[CHar]116+[CHar]104+[CHar]101+[CHar]32+[CHar]102+[CHar]108+[CHar]97+[CHar]</span></span><br><span class="line"><span class="string">103+[CHar]33+[CHar]34+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]112+[CHar]114+[CHar]105+[CHar]110+[CHar]116+</span></span><br><span class="line"><span class="string">[CHar]40+[CHar]34+[CHar]70+[CHar]108+[CHar]97+[CHar]103+[CHar]32+[CHar]105+[CHar]115+[CHar]32+[CHar]42+[CHar]99+[CHar]116+[CHar]102+[CHar]123+[CHar]121+[CHar]111+</span></span><br><span class="line"><span class="string">[CHar]117+[CHar]114+[CHar]95+[CHar]105+[CHar]110+[CHar]112+[CHar]117+[CHar]116+[CHar]125+[CHar]33+[CHar]34+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[</span></span><br><span class="line"><span class="string">CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]101+[CHar]120+[CHar]105+[CHar]116+[CHar]40+[CHar]48+[CHar]41+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]101+[CHar</span></span><br><span class="line"><span class="string">]108+[CHar]115+[CHar]101+[CHar]58+[CHar]10+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]32+[CHar]112+[CHar]114+[CHar]105+[CHar]110+[CHar]1</span></span><br><span class="line"><span class="string">16+[CHar]40+[CHar]39+[CHar]78+[CHar]111+[CHar]112+[CHar]101+[CHar]44+[CHar]116+[CHar]114+[CHar]121+[CHar]32+[CHar]97+[CHar]103+[CHar]97+[CHar]105+[CHar]110+[CHar]</span></span><br><span class="line"><span class="string">33+[CHar]39+[CHar]41</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式匹配数字部分</span></span><br><span class="line">numbers = re.findall(<span class="string">r'\d+'</span>, input_string)</span><br><span class="line">code = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> numbers:</span><br><span class="line">    code += <span class="built_in">chr</span>(<span class="built_in">int</span>(num))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(code)</span><br></pre></td></tr></tbody></table></figure></div><p>可以解出一下的代码，我们分析可以知道，这个就是个XXtea加密，去网上找个脚本解出即可</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">chiper</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.d = <span class="number">0x87654321</span></span><br><span class="line">        k0 = <span class="number">0x67452301</span></span><br><span class="line">        k1 = <span class="number">0xefcdab89</span></span><br><span class="line">        k2 = <span class="number">0x98badcfe</span></span><br><span class="line">        k3 = <span class="number">0x10325476</span></span><br><span class="line">        self.k = [k0, k1, k2 k3]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">e</span>(<span class="params">self, n, v</span>):</span><br><span class="line">        <span class="keyword">from</span> ctypes <span class="keyword">import</span> c_uint32</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">            temp1 = (z.value &gt;&gt; <span class="number">6</span> ^ y.value &lt;&lt; <span class="number">4</span>) + \</span><br><span class="line">                (y.value &gt;&gt; <span class="number">2</span>  z.value &lt;&lt; <span class="number">5</span>)</span><br><span class="line">            temp2 =(total.value ^ yvalue) + \</span><br><span class="line">                (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line">           <span class="keyword">return</span> c_uin32(temp1 ^ temp2</span><br><span class="line">        key = self.k</span><br><span class="line">        delta = self.d</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>//n</span><br><span class="line">        total = c_uint32(<span class="number">0</span>)</span><br><span class="line">        z = c_uint32(v[n-<span class="number">1</span>])</span><br><span class="line">        e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">round</span> &gt; <span class="number">0</span>:</span><br><span class="line">            total.value += delta</span><br><span class="line">            e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">                y = c_uint32(v[p+<span class="number">1</span>])</span><br><span class="line">                v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value</span><br><span class="line">                z.value = v[p]</span><br><span class="line">            y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">            v[n-<span class="number">1</span>] = c_uint32(v[n-<span class="number">1</span>] + MX(z, y, total,</span><br><span class="line">                              key, n-<span class="number">1</span>, e).value).vlue</span><br><span class="line">            z.value = v[n-<span class="number">1</span>]</span><br><span class="line">            rounds -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes2ints</span>(<span class="params">self,cs:<span class="built_in">bytes</span></span>)-&gt;<span class="built_in">list</span>:</span><br><span class="line">        new_length=<span class="built_in">len</span>(cs)+(<span class="number">8</span>-<span class="built_in">len</span>(cs)%<span class="number">8</span>)%<span class="number">8</span></span><br><span class="line">        barray=cs.ljust(new_length,<span class="string">b'\x00'</span>)</span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line">        v=[]</span><br><span class="line">        whilei &lt; new_length:</span><br><span class="line">            v0 = <span class="built_in">int</span>.from_bytes(barray[i:i+<span class="number">4</span>], <span class="string">'little'</span>)</span><br><span class="line">            v1 = <span class="built_in">int</span>.from_bytes(barray[i+<span class="number">4</span>:i+<span class="number">8</span>], <span class="string">'little'</span>)</span><br><span class="line">            v.append(v)</span><br><span class="line">            v.append(v1)</span><br><span class="line">            i += <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ceck</span>(<span class="params">instr:<span class="built_in">str</span>,checklist:<span class="built_in">list</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    length=<span class="built_in">len</span>(instr)</span><br><span class="line">    <span class="keyword">if</span> length%<span class="number">8</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Incorrect format."</span>)</span><br><span class="line">        xit(<span class="number">1</span>)</span><br><span class="line">    c=chiper()</span><br><span class="line">    v = c.bytes2ints(instr.encode())</span><br><span class="line">    output=<span class="built_in">list</span>(c.e(<span class="built_in">len</span>(v),v))</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    hile(i&lt;<span class="built_in">len</span>(checklist)):</span><br><span class="line">        i</span><br><span class="line"> i&lt;<span class="built_in">len</span>(output) <span class="keyword">and</span> output[i]==checklist[i]:</span><br><span class="line">           i+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">len</span>(checklist):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    ans=[<span class="number">1374278842</span>, <span class="number">2136006540</span>, <span class="number">4191056815</span>, <span class="number">3248881376</span>]</span><br><span class="line">    <span class="comment"># g</span></span><br><span class="line">nerateRes()</span><br><span class="line">    flag=<span class="built_in">input</span>(<span class="string">'Pleas input flag:'</span>)</span><br><span class="line">   res=check(flagans)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Congratulations, you've got the flag!"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Flag is *ctf{your_input}!"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        prin(<span class="string">'Nope,try again!'</span>)</span><br></pre></td></tr></tbody></table></figure></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023-googleCTF-re-oldshool</title>
      <link href="/2023/07/30/2023-googlectf-re-oldshool-5f1694092f51492d9cc6cc1042d4039e/"/>
      <url>/2023/07/30/2023-googlectf-re-oldshool-5f1694092f51492d9cc6cc1042d4039e/</url>
      
        <content type="html"><![CDATA[<h1 id="2023-googleCTF-re-oldshool"><a href="#2023-googleCTF-re-oldshool" class="headerlink" title="2023-googleCTF-re-oldshool"></a>2023-googleCTF-re-oldshool</h1><p>本题叫用给出的用户名，逆向，写出注册机，来批量生成密码，50个用户名，50个密码。</p><p>刚刚拿到手，还打开不了，一直报错说窗口有问题，后来摸索了好久才知道，需要调整终端大小才能适应。而且这道题也是用Ncurses从零实现了GUI的图形解密，就造成了代码巨多，主函数的代码就接近5000行，还不算其他函数，要准确的找到我们想要的函数是十分的不容易的。这到题如果代码量少一些的话，难度就相对没那么大了。</p><p>对于终端大小，在ubuntu的命令行中输入resize命令和就可以查询目前的长宽大小，我们用Ctrl+鼠标滑轮就可以调节大小，大致这么多</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled.png" alt="Untitled"></p><p>我们打开oldshool,可以看到如下界面，输入用户名与密码。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%201.png" alt="Untitled"></p><p>对于本道题，我们使用动态调试来确定，我们的输入与验证函数。由于代码实在是太多。二分法最快，嘿嘿。</p><p>经过调试，我们可以在3856行的伪代码处，找到我们的加密函数。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%202.png" alt="Untitled"></p><p>这里我们可以知道每五位就会检测-号，也就是说我们的密码大致格式为22222-aaaaa-33333-bbbbb-44444</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%203.png" alt="Untitled"></p><p>通过动态调试，追踪我们输入的密码，我们可以得知，这里的操作是移位查表，1→2,2→3,生成了一张表，我们可以归纳出其规律。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%204.png" alt="Untitled"></p><p>通过分析下面的的操作，我们可以知道，这些都是通过我们输入name生成一些固定的加密数据</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%205.png" alt="Untitled"></p><p>这一部分就是将我们的password进行转置生成矩阵,第n列循环右移n字节,并且进行异或加密</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%206.png" alt="Untitled"></p><p>最后这是运用了两矩阵相乘生成单位矩阵的性质来判断是否相等</p><p>其中后面的&amp;0x1f是取其低 5 位，并将其他位设置为零。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%207.png" alt="Untitled"></p><p>到此我们算是分析完了，看到的加密。加密的逻辑就是：</p><p>对于密码，将我们输入的密码进行转位换表，然后转置生成矩阵，进行异或</p><p>对于用户名，将用户名进行一系列复杂的加密，生成一些固定的密文</p><p>最后，再通过逆矩阵知识，进行比较验证正确性。</p><p>我们逆向写脚本的话，就要通过动态调试，将用户名生成的对比密文提取出来，求其逆矩阵，求得密码异或后的数据，然后我们将其异或回去，再进行查表，找到应该输入的对应用户名的密码。</p><p>按理说，我们写出脚本，就能将其解出的，我们使用z3进行爆破求其逆矩阵，但是我们会发现，求出的有些密码在动态调试时输入是正确的，能过验证，但是直接运行程序却不能过验证。甚至有些还不能爆破。但是我们无论如何看，我们的脚本都是没有问题的，这就很怪。</p><p>看了官方wp之后才知道，脚本确实没有写错，但是有反调试，检测到我们的调试器之后，就会将我们加密的一下数据进行改变，由于我们的密文是经过动态调试出来的，所以直接中招。</p><p>通过几处的查看交叉引用</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%208.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%209.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%2010.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%2011.png" alt="Untitled"></p><p>我们可以发现都是这个if的这个函数下进行改变的，我们对这个函数查看交叉引用，我们可以找到所有的反调试，按照官方的这个就是ptrace函数。</p><p><img lazyload="" src="/images/loading.svg" data-src="/2023-googleCTF-re-oldshool%205f1694092f51492d9cc6cc1042d4039e/Untitled%2012.png" alt="Untitled"></p><p>四处地方，都是改变我们加密过程中的数据，藏得十分隐秘，因为不会有任何的报错与提示，而且代码量巨多，让其难以发现，写脚本没解出来，第一时间都怀疑脚本的正误与分析的正误。</p><p>绕过这个反调试也很简单，在动态调试的时候，将ptrace返回的标志，从1改成0即可</p><p><strong>一般的来说：</strong></p><ul><li>如果&nbsp;<code>ptrace</code>&nbsp;执行成功，则返回 0 ，或者其他值</li><li>如果&nbsp;<code>ptrace</code>&nbsp;执行失败，则返回 -1，或者其他值。</li></ul><p>具体值的含义取决于请求的类型。</p><p>绕过反调试后，再用我们的脚本进行解密即可。</p><h1 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h1><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">matx = [[<span class="number">0x12</span>, <span class="number">0x1D</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x1B</span>],</span><br><span class="line">[<span class="number">0x8</span>, <span class="number">0x1F</span>, <span class="number">0x8</span>, <span class="number">0x17</span>, <span class="number">0x1E</span>],</span><br><span class="line">[<span class="number">0x1D</span>, <span class="number">0x3</span>, <span class="number">0x1C</span>, <span class="number">0xA</span>, <span class="number">0x15</span>],</span><br><span class="line">[<span class="number">0x12</span>, <span class="number">0x1D</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x1C</span>],</span><br><span class="line">[<span class="number">0x0B</span>, <span class="number">0x1E</span>, <span class="number">0x07</span>, <span class="number">0x14</span>, <span class="number">0x07</span>],]  <span class="comment">#动态调试username加密后的密文</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#爆破生成逆矩阵</span></span><br><span class="line"></span><br><span class="line">rows = <span class="number">5</span></span><br><span class="line">cols = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">arr = [[z3.BitVec(<span class="string">f'arr_<span class="subst">{i}</span>_<span class="subst">{j}</span>'</span>, <span class="number">6</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows)]</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        v28 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">            v28 = ((arr[i][m]&amp;<span class="number">0xff</span>) * (matx[k][i]&amp;<span class="number">0xff</span>) + (v28&amp;<span class="number">0xff</span>)) &amp; <span class="number">0x1f</span></span><br><span class="line">        <span class="keyword">if</span> k == m:</span><br><span class="line">            s.add(v28 == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> k != m:</span><br><span class="line">                s.add(v28 == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">inv = []</span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    model = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        row = [model.evaluate(arr[i][j]).as_long() <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(cols)]</span><br><span class="line">        inv.append(row)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"err"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"v18的逆矩阵为:"</span>)</span><br><span class="line"><span class="built_in">print</span>(inv)</span><br><span class="line"><span class="comment">#转置逆回去</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(inv)):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">4</span>:</span><br><span class="line">        inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>] = inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>], inv[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">3</span>:</span><br><span class="line">        inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>] = inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>], inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">        inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>] = inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>], inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">        inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>], inv[i][<span class="number">4</span>] = inv[i][<span class="number">4</span>], inv[i][<span class="number">0</span>], inv[i][<span class="number">1</span>], inv[i][<span class="number">2</span>], inv[i][<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"调换位置后的逆矩阵:"</span>)</span><br><span class="line"><span class="built_in">print</span>(inv)</span><br><span class="line"><span class="comment">#矩阵进行异或</span></span><br><span class="line">xor_arr = [[<span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x08</span>],</span><br><span class="line">[<span class="number">0x18</span>, <span class="number">0x0F</span>, <span class="number">0x1C</span>, <span class="number">0x06</span>, <span class="number">0x07</span>],</span><br><span class="line">[<span class="number">0x12</span>, <span class="number">0x05</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x04</span>],</span><br><span class="line">[<span class="number">0x1D</span>, <span class="number">0x1F</span>, <span class="number">0x09</span>, <span class="number">0x13</span>, <span class="number">0x01</span>],</span><br><span class="line">[<span class="number">0x1E</span>, <span class="number">0x11</span>, <span class="number">0x0B</span>, <span class="number">0x16</span>, <span class="number">0x19</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        inv[k][m] ^= xor_arr[k][m]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"异或后的矩阵:"</span>)</span><br><span class="line"><span class="built_in">print</span>(inv)</span><br><span class="line"></span><br><span class="line">index_arr = [<span class="number">0x00000010</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000011</span>, <span class="number">0x00000015</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000007</span>, <span class="number">0x00000018</span>, <span class="number">0x00000012</span>, <span class="number">0x0000001C</span>, <span class="number">0x0000001A</span>, <span class="number">0x00000001</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000006</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000019</span>, <span class="number">0x00000000</span>, <span class="number">0x00000017</span>, <span class="number">0x00000014</span>, <span class="number">0x00000016</span>, <span class="number">0x00000008</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000004</span>, <span class="number">0x00000003</span>, <span class="number">0x00000013</span>, <span class="number">0x00000005</span>, <span class="number">0x00000009</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000001D</span>, <span class="number">0x0000000F</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        inv[k][m] = index_arr.index(inv[k][m])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"索引:"</span>)</span><br><span class="line"><span class="built_in">print</span>(inv)</span><br><span class="line"><span class="comment">#查表得出flag</span></span><br><span class="line">chr_arr = [<span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x4A</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(chr_arr[inv[i][j]]), end=<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span>, end=<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure></div><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a class="link" href="https://github.com/google/google-ctf/tree/master/2023/rev-oldschool/solution">google-ctf/2023/rev-oldschool/solution at master · google/google-ctf · GitHub<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/mzYy3/article/details/131423225">(87条消息) oldschool_fi5hjump的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>X87浮点指令</title>
      <link href="/2023/07/29/x87-fu-dian-zhi-ling-a99676d69c184da3b447c5bd7754a8a0/"/>
      <url>/2023/07/29/x87-fu-dian-zhi-ling-a99676d69c184da3b447c5bd7754a8a0/</url>
      
        <content type="html"><![CDATA[<h1 id="X87浮点指令"><a href="#X87浮点指令" class="headerlink" title="X87浮点指令"></a>X87浮点指令</h1><h3 id="87-FPU寄存器栈有一定数量的寄存器（通常是8个或更多，取决于处理器）"><a href="#87-FPU寄存器栈有一定数量的寄存器（通常是8个或更多，取决于处理器）" class="headerlink" title="87 FPU寄存器栈有一定数量的寄存器（通常是8个或更多，取决于处理器）"></a>87 FPU寄存器栈有一定数量的寄存器（通常是8个或更多，取决于处理器）</h3><h1 id="x87简介"><a href="#x87简介" class="headerlink" title="x87简介"></a>x87简介</h1><p>x87指令集是用于处理浮点数运算的指令集，它是Intel 8087数学协处理器的指令集的扩展，后来成为x86处理器家族的一部分。x87指令集为浮点运算提供了硬件支持，包括浮点加减、乘除、取整等操作。在较新的x86处理器中，x87指令集被SSE（Streaming SIMD Extensions）和AVX（Advanced Vector Extensions）等更先进的浮点指令集所取代，但x87仍然兼容并在一些特定情况下使用。</p><p>x87指令集的指令主要针对浮点数运算，它提供了高精度的浮点计算能力。但由于SSE和AVX指令集的引入，现代的x86处理器更倾向于使用这些更高级的指令集，因为它们可以处理更多的数据和并行操作。</p><h1 id="x87寄存器"><a href="#x87寄存器" class="headerlink" title="x87寄存器"></a>x87寄存器</h1><ol><li>累加器（Accumulator）寄存器（ST0 - ST7）：它们是x87寄存器集合中的核心部分。每个寄存器都可以容纳80位（10字节）的扩展精度浮点数。</li><li>控制寄存器（Control Register）（CW）：用于控制浮点运算的各种设置，例如舍入模式、精度控制等。</li><li>状态寄存器（Status Register）（SW）：记录浮点操作的一些状态信息，例如运算结果的状态、出现的异常等。</li><li>标记寄存器（Tag Register）（TW）：用于存储每个浮点寄存器的标记位，标记对应寄存器是否包含有效的浮点数。</li></ol><h1 id="x87常用指令"><a href="#x87常用指令" class="headerlink" title="x87常用指令"></a>x87常用指令</h1><p>x87指令集使用了一个称为FPU（Floating-Point Unit）的数学协处理器，它独立于CPU，并用于执行浮点运算。下面是一些常见的x87指令集的操作：</p><ol><li><strong>加载和存储指令：</strong><ul><li><strong><code>FLD</code></strong>: 从内存加载一个浮点数到FPU寄存器栈顶。</li><li><strong><code>FST</code></strong>: 将FPU栈顶的浮点数存储到内存中。</li><li><strong><code>FLDENV</code></strong>&nbsp;和&nbsp;<strong><code>FSTENV</code></strong>: 加载和保存FPU环境，包括控制寄存器和状态寄存器等。</li></ul></li><li><strong>算术指令：</strong><ul><li><strong><code>FADD</code></strong>: 将栈顶的两个浮点数相加，并将结果存储在栈顶。</li><li><strong><code>FSUB</code></strong>: 从栈顶的浮点数中减去下一个浮点数，并将结果存储在栈顶。</li><li><strong><code>FMUL</code></strong>: 将栈顶的两个浮点数相乘，并将结果存储在栈顶。</li><li><strong><code>FDIV</code></strong>: 用栈顶的浮点数除以下一个浮点数，并将结果存储在栈顶。</li></ul></li><li><strong>转换指令：</strong><ul><li><strong><code>FIST</code></strong>: 将FPU栈顶的浮点数转换为整数，并存储在内存中。</li><li><strong><code>FISTP</code></strong>: 和**<code>FIST</code>**类似，但在转换后将结果弹出栈。</li></ul></li><li><strong>控制指令：</strong><ul><li><strong><code>FCOM</code></strong>: 比较栈顶的两个浮点数，并设置状态寄存器中的标志。</li><li><strong><code>FUCOM</code></strong>: 类似于**<code>FCOM</code>**，但处理未规范的操作数（NaN）。</li><li><strong><code>FCOMI</code></strong>: 执行浮点数比较，并将结果写入EFLAGS寄存器中。</li><li><strong><code>FUCOMI</code></strong>: 类似于**<code>FCOMI</code>**，但处理未规范的操作数（NaN）。</li></ul></li></ol><h1 id="x87部分指令演示"><a href="#x87部分指令演示" class="headerlink" title="x87部分指令演示"></a>x87部分指令演示</h1><p>x87指令集是用于处理浮点数运算的指令集，它提供了一组用于执行浮点操作的指令。x87指令集在现代x86处理器中仍然存在，但由于SSE（Streaming SIMD Extensions）和AVX（Advanced Vector Extensions）等更现代的指令集的引入，使用x87指令集的情况相对较少。在这里，我将详细介绍x87指令集中常见的指令以及它们的用途，并为每个指令提供一个简单的示例。</p><ol><li><p><strong>FLD - Load Floating-Point Value:</strong> 从内存中加载一个浮点数值到x87 FPU栈顶。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fld dword [float_value]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FST - Store Floating-Point Value:</strong> 将x87 FPU栈顶的浮点数值存储到内存中。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fst dword [result]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FADD - Add:</strong> 将栈顶的两个浮点数值相加，并将结果存储在栈顶。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fadd</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FSUB - Subtract:</strong> 从栈顶的浮点数中减去下一个浮点数，并将结果存储在栈顶。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fsub</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FMUL - Multiply:</strong> 将栈顶的两个浮点数值相乘，并将结果存储在栈顶。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fmul</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FDIV - Divide:</strong> 用栈顶的浮点数除以下一个浮点数，并将结果存储在栈顶。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fdiv</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FIST - Store Integer after FPU Comparison:</strong> 将FPU栈顶的浮点数转换为整数，并存储在内存中。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fist dword [integer_value]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FISTP - Store Integer and Pop:</strong> 和FIST类似，但在转换后将结果弹出栈。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fistp dword [integer_value]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FCOM - Compare Floating-Point Values:</strong> 比较栈顶的两个浮点数，并设置状态寄存器中的标志。</p> <div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fcom</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li><li><p><strong>FUCOM - Unordered Compare Floating-Point Values:</strong> 类似于FCOM，但处理未规范的操作数（NaN）。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fucom</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ferris proxy</title>
      <link href="/2023/07/26/ferris-proxy-663889200af44a809eb773849bd3f1f0/"/>
      <url>/2023/07/26/ferris-proxy-663889200af44a809eb773849bd3f1f0/</url>
      
        <content type="html"><![CDATA[<p><img lazyload="" src="/images/loading.svg" data-src="https://pic.imgdb.cn/item/650eca9bc458853aef197538.jpg" alt="Untitled"></p><p>按照着wp的思路，照着走一遍之后，大致理清楚了这道题的加密思路</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled.png" alt="Untitled"></p><p>通过wireshark我们可以将server发送到clientd的数据提取出来</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%201.png" alt="Untitled"></p><p>通过分析我们可以得知，对于整个TCP流，是运用了rc4的加密方式，通过动态调试，我们可以调试出密钥为explorer</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%202.png" alt="Untitled"></p><p>通过解密（解密后如下）我们我们可以看出这个是有着头的流量，因为前面我们知道，对于流量是有加密层的，因此我们不能直接看出流量中的数据是什么、</p><hr><p>00000008000000000000000000000008000000000000000100000048000000010000000001001db2ee547837c2b0394f9316a3c672109c854769d9627ce715aa82ae76af4fc7d468903ffa4f7c9d4afcf139528ceb24cb5f64a192287282ee7fd076992f000000480000000100000000e73f0a730b98e032e90afaf73b8ddab1e821432c3e1c2c51396914f53fb304f26cbc8f85ec68462ff85dfb0979648d43003291ccb9418e7b4016f5d3325d4083000000480000000100000000d44c5aff410f28c841fb51c2e982244d7f7370fb6b73d6e5caba56c1b4b8f96bea190aa8d66e7e37d76fe2e5fef7f78b0de90e12eefda3a36177583412ca074e00000048000000010000000096a1796af867e440a72ee81e36e05f3b73c3341f6166b804bf83c3d0b47df74cc77405595ce44d3ccfb739496b8acb78fdb02bcd510851b3e3de015fc06eadb40000000a00000001000000000f8e0000004800000001000000010100320b119809b793abf357a7f78b0742ee93a957e563a5a94fdb09804e89596f2597a2cb9ae9f5161d5fda88ff050e47b1d28bebc6563465d2e7959e8a624a000000480000000100000001cd39b2053c17021f93030e3b9bc7149ff5423faf64693932f76a8dbffa526fff7c076845b1d31967efca0b56b066e8bacedc1927e629c6d0e87f61bf14ee3039000000480000000100000001053d668ef1855426257ce68cdbc2f66919a2f9efbcb632daa6170cb8246ab7a2348032f48cefdbc3aadcee6b9ab867371346bbe90fd69d213705ed1de38922b300000048000000010000000145bbbf8e0b10c5436e5974f46426d3efdbeaba819ea5d049bb420219a426336e14bc36e5753cb71fb21a2b78f699918a0045a8badddd69646ed65a59e17feec80000000a0000000100000001b30c000000280000000100000001503fdd267309866142ae96b3197515b72ccd766dedbc09d61c25f0c3fa79ebd40000002800000001000000002accc966ccaf48a147471171fb9589c95c561100d6548ad979f328e43bcfe0750000002c00000001000000000000001023a5457e1fa2e2f4a23242b1e61a597d1458bee4871e6f44e9296820014728300000002c000000010000000100000010bd688bc8657972730f1d9a5c340cd555602957fa44cf643423bb23734bf8490b0000003c000000010000000000000020a6f95ec809bac678aa1f4a74a0094e00d33e42da057331c95a61c6b5c3cd24daefeb367e01d3765e91643e37e2ac95e90000003c000000010000000100000020184ff5940c47e4fc42a2bd1f61b304f5fdfc5e453104a3946d06c4897a86f7d2872c948ff06b270b4d024446df8b60fa0000004800000001000000000000020044f4cf64a905e470a2d8091e5320c0b8a370193fe44728340c454361c84578f3b469963d12fa608ab96bf2e8c9c2116010d50e151b6407308d3cb6a2000000480000000100000000bc02026a76b5be1d66cf03d90ea5303a5091b48d370ac186402138606da35c90fe7efb0a21f0a177896f496ba40f02e079b82218be0124ab7de5d4f48cfd921e000000480000000100000000323d2847d03880fa5cb48533939141115c3dc15fa32a82be59d78826e3d37f5cac12010ce10c850df63626f94657a5beacf7d502b59fc10f571959ce6101b8d6000000480000000100000000704e541c930ca3a8d156d7f6122fda7bbdffed9b9bc6160f4ec8ace48978bd458869a636a7d8798d7dbd503e0c41aad82496578df4fbffbd3c5c885dc0bd3dee0000004800000001000000006d6af1efc82365f1619286e7a612155d87038f4ccb39e25e0660f9f2d320ae4321996b69187ba68abdf3e6ab41abfa2dd359c7eaa5d344fc1acb97b58dd44d86000000480000000100000000d444d17c165ee78e1d55f5c42b1f1bcf9c0f302588b68d26d2a308250c42d1df13be07693aa0f42cefcb9dc1688216478a1a041c9a0c66308b3e4a5135fd2f0f0000004800000001000000002c7d9df81c7c9ccb7422089f94c0fa54067e6c4fc634c725c9aa9710aaedd671f72cf9287f38de6111ace6c0c32ed568569b45743abfc519e23aabccdf30a9af000000480000000100000000d1bbcab1224daf8ccfb5e6dbf42ee924935b990eee7abe70ac5537426236e0ff1b2ac4748c665d3aba61c4685798ae62126d89220cd5ae8c6a7c32e33ce1236d0000001c0000000100000000b802088e5e303c8389880c09c3925053cc210825000000080000000200000000000000480000000100000001000001d06fe6d3c4b7761ffea3dea5ca1b75305f3bd828925e041baabc00aa51f93e5d59aa6c5c024e1de93ccabbcc7736271de03665a2b170a42faca2e869980000004800000001000000016c6b50fecd4e0e1a9ca070fafa04c06a12f27af94d5430ccce129ada67c3040d444b772758195366025267bfea9e35cbaaf816022b34755d5ac2a4d7df857732000000480000000100000001ede0bf60b0ca23f40635dcbda76eaf3b59faa140dee0b2480aacd8df765ba5cfd1347f22c9415006210eb4f224332b5cfcac7be98e0da94f74693d8af22e1fad0000004800000001000000010614feada5c2aa494e61a0b2a848b82833860d6c1213c4aceebcbe55f419403ecd843835f14f2caa8310be6bfad7ad2054df500a54268b17530183ef4c49f1c50000004800000001000000011ed33f223e632356012a42484c1241d41ec5426ba94c0c4887a8206b86b41ac73ca8b79d90256d391190bcb2256e881642c5a0fbc178691cf9ec983e1f1db4000000004800000001000000012c5043530d28ce81e89c0a71baeb821ff0240d18fbac0e01b0952bb62b91354597b9061dc440318ce3eabd95742607546c414ebf3da32879b2af3500d08cb4e9000000480000000100000001b404a5293b85aadaa3d595d38992c219ddd7a4e5f00c09af477eea99477b3d53ac6b67c49f0cbd5a7ff038904dfc1a3b58cabe2c25dcb86fa55a53f3d362f0510000002c000000010000000128bf591667dcd1d600abe1db48f49b17a5ad9d5650f7793af7a24341b771a9247f1eb4800000000800000002000000010000000800000000000000020000000800000000000000030000004800000001000000030100abcf924576de63087c8695ccda3705e8670c770f2bfda1dafdeddcd09b2aa6d485c6a87ff31c14300ddb660576ceed52047318a30d3c05c9848b0a1fb05300000048000000010000000387d378e9cbb8914e496a633595c7f68da097afd4fbd0380b4eafe790ffe999b81ceeff32eea4d8fa4279606c7c491ec4eb4a7ef5bf614307c21bd3a314db9d2e000000480000000100000003e9f505f08c464e1f5f123bcc180305bb5a30f2c382493a1cc6d6e5e189e75950f75c8a790aef2c1fae18436c9d6f4840a9eacbf04139a2b25042c27f3a3fd756000000480000000100000003faeaff92d731e354d03dc46cbe8a001188dde35e753c259de359181678d94e47d90709345f6c9975288dbecfe1a6cf2eb7a14978854bbc73d3ac7d0a72cc3ef40000000a0000000100000003c41a0000004800000001000000020100d92f41b75bb8ced6be2fbbc0ba1cfeeebdf15826ce92ba78ef4cd0f6d47ff04e9e593cfc5fc7eac8109effce7e75f547873ab559186885edf0e519f73aed00000048000000010000000243421e08dea79fd12889b2845ca365803bb4aa23c50d0c298e6649121b6d9101f32d15a043ffdbc93e7665617fa7b4b3f01db76f5472c5aa3a085da5683efcc4000000480000000100000002bf9a240df9afc3596d4b3613ae9a2184340561c896a60cc577e6ca507b5e6548ccfcd8bccf27de73deaaf04fab707a20c6aa94febdf8a0a5532c0f4c73958e11000000480000000100000002fc1437567ccd886b5496cabb117993f31afe25f53d92721877892e472bf8bba1743b827e277f500d51b7f74f4682e943be0d3ebfdc30742e211dc3eba51dac8b0000000a00000001000000029074000000280000000100000003e836256016a5f8ca1e29732b7332d9776bdc6694a9df6c1172183f65916f83d50000002c000000010000000300000010f46cbf6896be858f5c2f86ee3c162359c545b1f5bd1eec0cd03e2b7bf9c1b4b90000003c000000010000000300000020c580aa8aad81a2800fadf74749e79c323da65a6d11e8fb517d60ba36a0113b345be7c0fce390fba664776b676d82fdbe000000480000000100000003000002002292a593b68fdbf615d43c123747cf1f1583619708368b471b4a37c8eed21e07d14a7bf309f45335592134c5cc7a18152de20bb7d2fb753bee9131d90000004800000001000000033076a9d57efa379e4f7f4700116d786c586b49523454dd9b3ae7cfde0416d9bfbb486eed31f88fec8128cd1e0bf783c8978c04fde5f1bbe67ecbe1c76e0596f5000000480000000100000003579bbdb311093c2a3bb58b848be88302ab2bb6c24bf076a694de2b2fa1a8eff53fcaa6800e938bdeee831498fcc72cc9b822dad5b2074d5bc292c766e44c13e000000048000000010000000331fffa94345676f294eceb259baa51107267136af1e829868e1a3c5e2514517bfcfaec78783afde2874c6d2f4cb8436ed421e67fe327e8c67c851da9446ef226000000480000000100000003daff3194609bf5a05c1e6ec1e085854275ee81dbee01c92e2cb357faeba811424b80bd9b204d70675aaf026f2f23bb0e882271bad34ff5294cc05cd7fc0740ac0000004800000001000000034b5b49ca009d1836cfa176112aaf7775fa8c241bd45f861c1eec34dd2b9654e8144c74c1f80c9e0f23cae4503ae85de975f74d250be667a1f6285c9951a8f8c90000004800000001000000032fb4e2dd32d6fdd7e93fe24e23b9762099e1b12f5d9cae6dae7df3401e33931a8af65803c1538716bdba05948c8818f92791010ef8d6d315fb97bccdf2c2fbbf000000480000000100000003b97cd2e80a232dcf417da8ac1b835bf9dab15816bc1e2e0c07214e531ac922ca2f5ddbb26f8d599805feb5f6ae1c6e3fe08ef5cf7dbd60eb407892d6e72a67a30000001c0000000100000003e7d781f18b675dad11f1f49600057e8094628ad00000002800000001000000024ac9c87b674dcd932d2e9d3a4b7c16a3989e750fa3a8895e8dd0971c56fb96780000002c000000010000000200000010cf6ca67cfe59cd5f110c1586de9c2186cfb7213784043ffb017fdf5cfa74ac320000003c000000010000000200000020a03a82bae4627fc74de8c75437e5b077aa3d63e5745f61f47362954b80f53ede6867267605b7383f55e6a80aefcae153000000080000000200000003</p><hr><p>我们对规律的0进行分开一下</p><p>我们可以得到如下图的流量</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%203.png" alt="Untitled"></p><p>对于第一个字节表示得是数据长度</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000008</span> | <span class="number">00000000</span> <span class="number">00000000</span> 表示这里有<span class="number">0x08</span> = <span class="number">8</span> bytes 的数据</span><br><span class="line"><span class="number">0000000</span>a | <span class="number">00000001</span> <span class="number">00000000</span> b30c 表示这里有<span class="number">0x0a</span> = <span class="number">10</span> bytes 的数据，以此类推</span><br></pre></td></tr></tbody></table></figure></div><p>对于第二数，我们可以发现其值为0,1,2,三个数，通过socket的server和client编写经验,再加上“猜”，我们可知其中，0代表开启一个stream（进行连接），1是正在传输数据，2代表接收完成，关闭。</p><p>第三个，通过我们编写一个客户端与服务端的经验，一个服务端一般会对应的接收来自多个客户端传入的数据，为了分辨传输给谁和谁传输的，就需要一个id进行识别，因此这里我们猜测这个是stream-id(流id）</p><p>后面的数据自然而然就知道是我们传输的数据了。</p><p>由此我们的协议组成就是：**数据总长度(**4 bytes) + <strong>状态表示</strong> (4 bytes) + <strong>流id</strong> (4 bytes) + <strong>传输数据</strong>(x bytes)</p><h1 id="密钥对接"><a href="#密钥对接" class="headerlink" title="密钥对接"></a>密钥对接</h1><p>通过提取传入的字符串，我们可以发现，rsa加密后的公钥与私钥</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pubkey: |</span><br><span class="line">    -----BEGIN RSA PUBLIC KEY----</span><br><span class="line">    MIIBCgKCAQEA231sNrX6WxlQpfsy8u6VR9rw4H4lY93fspAmXefjDhQhYCPM+<span class="title function_ invoke__">Syp</span></span><br><span class="line">    (..)</span><br><span class="line">    H5YyTi1cOvMFsN+oPGxgBGpSqYCxmPwINwIDAQAB</span><br><span class="line">    -----END RSA PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line">mkey: explorer</span><br><span class="line"></span><br><span class="line">privkey: |</span><br><span class="line">    -----BEGIN PRIVATE KEY-----</span><br><span class="line">    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC93GDINPM6HX2+</span><br><span class="line">    (..)</span><br><span class="line">    p2eXdqH59DvauggbiS3h4p9k2kxWTocztarvdftMW0ncmA4yCKiUQEmWD784JCyx</span><br><span class="line">    OupNNfr2rgViWggVBEtJUIg=</span><br><span class="line">    -----END PRIVATE KEY-----</span><br></pre></td></tr></tbody></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%204.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%205.png" alt="Untitled"></p><p>在key_exchange中，我们可以看到这里rand生成了数据存储在了，v59中16个字节</p><p><a class="link" href="https://chirsz.cc/blog/2019-08/introduce-rust-random.html">rand：Rust随机数库简介 | 子飞的网络日志 (chirsz.cc)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://rustwiki.org/zh-CN/rust-cookbook/algorithms/randomness.html">生成随机值 - Rust Cookbook 中文版 (rustwiki.org)<i class="fas fa-external-link-alt"></i></a></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use rand::{thread_rng, Rng};</span><br><span class="line">let mut rng = thread_rng();</span><br><span class="line">let x: u128 = rng.gen();</span><br><span class="line">println!(<span class="string">"{}"</span>, x);</span><br></pre></td></tr></tbody></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%206.png" alt="Untitled"></p><p>这里将我们的rand出来的16比特的数，进行了rsa加密，从而使得我们的key变成了256位的密钥</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%207.png" alt="Untitled"></p><p>这里可以推测出是PublicKey（公钥加密）的RSA算法加密</p><p><a class="link" href="https://blog.csdn.net/m0_51607907/article/details/123884953">(87条消息) 公开密钥加密之RSA算法【概念+计算+代码实现】_rsa算法代码_MIKE笔记的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p>之后将server发送过来的密钥进行解密之后，异或上原本产生的16字节的随机数据，产生了新的密钥（也就是我们后面流量加密的密钥）</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%208.png" alt="Untitled"></p><p>接着上一步，将异或后的数据进行sha-256加密，然后发送给server，双方进行对比验证，确定是同一个密钥，从而完成了密钥交换</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%209.png" alt="Untitled"></p><h1 id="对包加密的传输"><a href="#对包加密的传输" class="headerlink" title="对包加密的传输"></a>对包加密的传输</h1><p>这里我们很容易的分辨出是进行了aes-cbc模式下的加密</p><p><img lazyload="" src="/images/loading.svg" data-src="/Ferris%20proxy%20663889200af44a809eb773849bd3f1f0/Untitled%2010.png" alt="Untitled"></p><p>对于前面得到rc4解密后的流量数据，进行分组之后，我们分析其后面的发送数据与协议。</p><p>我们可以在协议中观察到以下几点:</p><p>1、第7行的数据与我们在前面的例子中交换密钥时得到的SHA256哈希值相                                                    配:118d31c061936b811327f1645c9f8deef4c6628e3ee21b39950213ddd0cf2141</p><p>2、该行之后的所有内容都可能是AES加密的，而该行之前的内容将是RSA加密并与密钥交换相关。</p><p>3、第2、3、4、5行消息长度分别为(64+64+64+64= 256 bytes=2048)位 = RSA 密钥大小）</p><p>被加密的流量也有流量头，前4字节的代表数据长度的值，其后跟着一个16字节的当前加密所用的iv。因此我们可以使用aes_128_c进行bc解密。</p><h1 id="总的加密思路："><a href="#总的加密思路：" class="headerlink" title="总的加密思路："></a>总的加密思路：</h1><p>首先就是收包，对包进行rc4的最外层解密，然后就是进行密钥交换，双方通过随机数生成16字节的随机密钥，首先进行rsa公钥加密，加密之后，将密钥发送给对方，双方进行解密之后，将获取的对方的随机数与自己本身产生的随机数进行异或，生成派生密钥，然后将生成的派生密钥进行sha-256加密之后，向对方发送过去，双方进行验证是否为同一密钥。之后就通过派生密钥，按照着传输协议，将数据流量进行解密，从而得到真正的发送原文（flag）。</p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a class="link" href="https://blog.csdn.net/sln_1550/article/details/128638427">(87条消息) 2023 RealWorldCTF “Ferris proxy”逆向题分析（不算wp）_sln_1550的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://bbs.kanxue.com/thread-275797.htm">Realworld CTF 2023 Ferris_proxy Writeup-CTF对抗-看雪-安全社区|安全招聘|kanxue.com<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://vrls.ws/posts/2023/01/real-world-ctf-2023-ferris-proxy-reverse-engineering">https://vrls.ws/posts/2023/01/real-world-ctf-2023-ferris-proxy-reverse-engineering<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>强网杯-2022-GameMaster</title>
      <link href="/2023/06/18/qiang-wang-bei-2022-gamemaster-110de77af2d24015be62f1704ce21b76/"/>
      <url>/2023/06/18/qiang-wang-bei-2022-gamemaster-110de77af2d24015be62f1704ce21b76/</url>
      
        <content type="html"><![CDATA[<h1 id="强网杯-2022-GameMaster"><a href="#强网杯-2022-GameMaster" class="headerlink" title="强网杯-2022-GameMaster"></a>强网杯-2022-GameMaster</h1><p>刚开始看这道题的时候，其实是有点懵的，还是自己做的题太少了T _ T.就此为了加深印象，复现这道题。</p><p>丢进Exeinfo PE中，可以发现是c#写的.net程序，我们用Dnspy打开（一个专门反编译c#，.net等的一个软件）。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled.png"></p><p>我们直接找到此软件的主函数，分析其逻辑</p><p>![Untitled](/Untitled 1-16954559556731.png)</p><p>这里我们可以发现，是读取了我们的附件所给的gamemesage里面的数据，读取到filestream,</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%202.png" alt="Untitled"></p><p>分析下面的代码，可以知道，这部分实现的代码，就是根据我们的按键，施行对应的操作，其中Enter键和space键，对应的函数下都有deal和stand,hit键，如果简单的玩过一下这个游戏，我们很容易知道，这几个函数实现的功能就是进行输赢的判断和检测自己的金钱还有多少，游戏是否继续。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%203.png" alt="Untitled"></p><p>我们分析之后，发现这个esc这个键下的函数十分的可疑，我们跟进去看看。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%204.png" alt="Untitled"></p><p>整体来说，这个函数并没有做什么，但是这个函数中调用的另一个函数，goldFUNC，我们继续跟进。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%205.png" alt="Untitled"></p><p>发现这个函数里面全是flag判断啥的异常处理函数，这里应该就是我们关键的加密函数了，但是这些判断看起来一头雾水，我们继续分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%206.png" alt="Untitled"></p><p>我们翻到后面我们发现了一个非常不一样的异常处理函数，而且这里出现了Program.memory，这个就是程序的开头，将我们文件读取的数据存储的地方。我们继续向下分析，看还有没有同样的操作。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%207.png" alt="Untitled"></p><p>这里有一个AES-ECB的加密</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%208.png" alt="Untitled"></p><p>我们发现了一个函数调用，我们进去看看。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%209.png" alt="Untitled"></p><p>这里也是AES-ECB加密，但是我们分析之后，我们可以发现它并没有对我们的文件的数据进行改变，因此我们不管它。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2010.png" alt="Untitled"></p><p>到这里我们就可以知道了，我们的gamemesage是被加密过的文件，首先异或了34，之后又进行了AES-ECB加密，我们写一个脚本进行解密即可</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义AES加密算法的密钥和块大小</span></span><br><span class="line">key = <span class="string">b'Brainstorming!!!'</span></span><br><span class="line">block_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建AES加密算法对象</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开待解密的文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'gamemessage'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ciphertext = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对读取的数据进行异或操作</span></span><br><span class="line">ciphertext = <span class="built_in">bytes</span>([byte ^ <span class="number">34</span> <span class="keyword">for</span> byte <span class="keyword">in</span> ciphertext])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对密文进行解密</span></span><br><span class="line">plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解密后的明文写入到新文件中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'data'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(plaintext)</span><br></pre></td></tr></tbody></table></figure></div><p>将解密后的文件输出到data</p><p>我们放入winhex中分析，可以发现是.net的一个输出文件，但是并未有文件头，我们在这里面进行搜索，看看是否能找到一些看信息</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2011.png" alt="Untitled"></p><p>我们可以找到一个MZ的头，我们将其前面的数据删除，然后将其加入dll的后缀，因为此文件是以dll文件的形式载入我们的程序的</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2012.png" alt="Untitled"></p><p>我们将其放入dnspy中分析。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2013.png" alt="Untitled"></p><p>有两个关键函数,分析这两个函数是将先前的三段数据进行求解,下一个函数就是将解变成密钥后对我们的数据进行异或,我们先写个脚本爆破出x,y,z.</p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2014.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2015.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/Untitled%2016.png" alt="Untitled"></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">x, y, z = BitVecs(<span class="string">'x y z'</span>, <span class="number">64</span>)</span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">KeyStream = [<span class="number">0</span>] * <span class="number">40</span></span><br><span class="line">key1 = [<span class="number">101</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">213</span>, <span class="number">163</span>, <span class="number">26</span>, <span class="number">59</span>, <span class="number">38</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">173</span>, <span class="number">189</span>, <span class="number">198</span>, <span class="number">166</span>, <span class="number">140</span>, <span class="number">183</span>, <span class="number">42</span>, <span class="number">247</span>, <span class="number">223</span>, <span class="number">24</span>, <span class="number">106</span>,</span><br><span class="line">        <span class="number">20</span>, <span class="number">145</span>, <span class="number">37</span>, <span class="number">24</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">191</span>, <span class="number">110</span>, <span class="number">179</span>, <span class="number">227</span>, <span class="number">5</span>, <span class="number">62</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>):</span><br><span class="line">    x = (((x &gt;&gt; <span class="number">29</span> ^ x &gt;&gt; <span class="number">28</span> ^ x &gt;&gt; <span class="number">25</span> ^ x &gt;&gt; <span class="number">23</span>) &amp; <span class="number">1</span>) | x &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    y = (((y &gt;&gt; <span class="number">30</span> ^ y &gt;&gt; <span class="number">27</span>) &amp; <span class="number">1</span>) | y &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    z = (((z &gt;&gt; <span class="number">31</span> ^ z &gt;&gt; <span class="number">30</span> ^ z &gt;&gt; <span class="number">29</span> ^ z &gt;&gt; <span class="number">28</span> ^ z &gt;&gt; <span class="number">26</span> ^ z &gt;&gt; <span class="number">24</span>) &amp; <span class="number">1</span>) | z &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    flag = i % <span class="number">8</span> == <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        <span class="keyword">if</span> i!=<span class="number">0</span>:</span><br><span class="line">            s.add(KeyStream[num] == key1[num])</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">    KeyStream[num] = (KeyStream[num] &lt;&lt; <span class="number">1</span>) | (((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span> &amp; (x &gt;&gt; <span class="number">30</span> &amp; <span class="number">1</span>)) ^ (((z &gt;&gt; <span class="number">32</span> &amp; <span class="number">1</span>) ^ <span class="number">1</span>) &amp; (y &gt;&gt; <span class="number">31</span> &amp; <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.check())</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="comment"># [y = 868387187, x = 156324965, z = 3131229747]</span></span><br></pre></td></tr></tbody></table></figure></div><p>解出我们的x,y,z之后,在写解密脚本,解出我们的flag</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l=[<span class="number">156324965</span>, <span class="number">868387187</span>, <span class="number">3131229747</span>]</span><br><span class="line">arr=[<span class="number">0</span>]*<span class="number">12</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        arr[i*<span class="number">4</span>+j]=(l[i]&gt;&gt;j*<span class="number">8</span>)&amp;<span class="number">0xff</span></span><br><span class="line">enc=[<span class="number">60</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">86</span>, <span class="number">51</span>, <span class="number">251</span>, <span class="number">167</span>, <span class="number">108</span>, <span class="number">116</span>, <span class="number">245</span>,</span><br><span class="line"><span class="number">207</span>, <span class="number">223</span>, <span class="number">40</span>, <span class="number">103</span>, <span class="number">34</span>, <span class="number">62</span>, <span class="number">22</span>, <span class="number">251</span>, <span class="number">227</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(enc[i]^arr[i%<span class="built_in">len</span>(arr)]),end=<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure></div><p>即可得出flag:  Y0u_@re_G3meM3s7er!</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2019红帽杯-CHILDRE(c++逆向+函数调用约定+c++修饰符转换+异或+黑盒分析+爆破)</title>
      <link href="/2023/06/14/2019-hong-mao-bei-childre-c-ni-xiang-han-shu-diao-yong-yue-ding-c-xiu-shi-fu-zhuan-huan-yi-huo-hei-he-fen-xi-bao-po-119141f5973c4a7780d21de7909182c0/"/>
      <url>/2023/06/14/2019-hong-mao-bei-childre-c-ni-xiang-han-shu-diao-yong-yue-ding-c-xiu-shi-fu-zhuan-huan-yi-huo-hei-he-fen-xi-bao-po-119141f5973c4a7780d21de7909182c0/</url>
      
        <content type="html"><![CDATA[<h1 id="2019红帽杯-CHILDRE-c-逆向-函数调用约定-c-修饰符转换-异或-黑盒分析-爆破"><a href="#2019红帽杯-CHILDRE-c-逆向-函数调用约定-c-修饰符转换-异或-黑盒分析-爆破" class="headerlink" title="[2019红帽杯]CHILDRE(c++逆向+函数调用约定+c++修饰符转换+异或+黑盒分析+爆破)"></a>[2019红帽杯]CHILDRE(c++逆向+函数调用约定+c++修饰符转换+异或+黑盒分析+爆破)</h1><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%201.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%202.png" alt="Untitled"></p><p>这里就直接用z3写脚本将我们的outoutstring爆出来。</p><p>outputString =&nbsp;<code>private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)</code></p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%203.png" alt="Untitled"></p><p>这个函数比关键。</p><p>官方文档，大致可以知道这个函数的作用就是将我们的flag进行转换，转换成了c++函数模式。也就是说我们的flag就是outoutstring，这个函数的<strong>C++函数名修饰</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%204.png" alt="Untitled"></p><p>对于<strong>C++函数名修饰,这个需要了解函数调用约定</strong></p><p><a class="link" href="https://www.notion.so/1-066caf5ec03a43d397cc85d20b07c157?pvs=21">函数调用约定 (1)<i class="fas fa-external-link-alt"></i></a></p><p>了解之后，我们可以将未转换的outoutstring得出：?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z</p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%205.png" alt="Untitled"></p><p>通过这里，我们可以判断出我们的flag有着31位</p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%206.png" alt="Untitled"></p><p>对于这一堆函数，我们进行动态调试,我们输入有序字母。</p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%207.png" alt="Untitled"></p><p>进入这个函数，我们可以发现</p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%208.png" alt="Untitled"></p><p><img lazyload="" src="/images/loading.svg" data-src="/%5B2019%E7%BA%A2%E5%B8%BD%E6%9D%AF%5DCHILDRE(c++%E9%80%86%E5%90%91+%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A+c++%E4%BF%AE%E9%A5%B0%E7%AC%A6%E8%BD%AC%E6%8D%A2+%E5%BC%82%E6%88%96+%E9%BB%91%E7%9B%92%E5%88%86%E6%9E%90+%E7%88%86%E7%A0%B4)%20119141f5973c4a7780d21de7909182c0/Untitled%209.png" alt="Untitled"></p><p>可以发现我们输入的数据被打乱了</p><p>我们输入31个有序数据，12345ABCDEFGHIJKLMNOPQRSTUWXYZ，</p><p>得出乱序后的表，然后写脚本进行还原。</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>] = <span class="string">"?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z"</span>;</span><br><span class="line"><span class="type">int</span> biao[] = { <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x48</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x44</span>, <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x4a</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x4b</span>, <span class="number">0x45</span>, <span class="number">0x42</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x4c</span>, <span class="number">0x5a</span>, <span class="number">0x5b</span>, <span class="number">0x4d</span>, <span class="number">0x46</span>, <span class="number">0x5c</span>, <span class="number">0x5d</span>, <span class="number">0x4e</span>, <span class="number">0x5e</span>, <span class="number">0x5f</span>, <span class="number">0x4f</span>, <span class="number">0x47</span>, <span class="number">0x43</span>, <span class="number">65</span> };</span><br><span class="line"><span class="type">char</span> input[<span class="number">32</span>] = { <span class="number">0</span> };</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(name); i++)</span><br><span class="line">input[biao[i] - <span class="number">65</span>] = name[i];</span><br><span class="line"><span class="built_in">puts</span>(input);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>得出Z0@tRAEyuP@xAAA?M_A0_WNPx@@EPDP</p><p>然后将我们函数进行md5加密即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何从0到1编写一个dll文件</title>
      <link href="/2023/06/05/ru-he-cong-0-dao-1-bian-xie-yi-ge-dll-wen-jian-c6594ccdd993460ab9a316426ab8ed5a/"/>
      <url>/2023/06/05/ru-he-cong-0-dao-1-bian-xie-yi-ge-dll-wen-jian-c6594ccdd993460ab9a316426ab8ed5a/</url>
      
        <content type="html"><![CDATA[<h1 id="如何从0到1编写一个dll文件"><a href="#如何从0到1编写一个dll文件" class="headerlink" title="如何从0到1编写一个dll文件"></a>如何从0到1编写一个dll文件</h1><p>本人小白一枚，由于刚刚开始接触dll,文件编写，苦于不知道如何进行编写，再加上对工具的不熟悉，查了很久的资料，经过了好几天的摸索，才勉勉强强掌握了一点点怎么写dll文件，这里就记录一下，如何编写我们的dll文件，然后成功的链接到我们的程序中去。</p><p>对于编译dll文件，有两种，一种是使用我们强大的环境，vs ，另一种就是使用我们强大的编译器gcc。这里对于这两种方式进行简单的演示。</p><h3 id="gcc编译链接dll文件"><a href="#gcc编译链接dll文件" class="headerlink" title="gcc编译链接dll文件"></a>gcc编译链接dll文件</h3><p>对于gcc，我们首先写三个文件</p><p>一个头文件head.h，这个头文件很有必要，一方面在dll文件中的表明我们要导出哪些函数，在main.c文件中表明dll文件中被导出的文件有哪些。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span>  <span class="comment">//指定某个函数按照 C 语言方式编译和链接。在 C++ 中，函数名会被编译器进行名称修饰（name mangling），以支持函数重载和命名空间等特性。而在 C 语言中，函数名没有被修饰</span></span><br><span class="line">{</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    __declspec(dllexport) <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>; <span class="comment">//导出函数(格式)</span></span><br><span class="line"><span class="comment">//声明了该函数将被导出到 DLL 文件中，以便其他程序可以使用。其它程序可以通过 DLL 导出表来查找这个函数，从而进行调用。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure></div><p>一个要编译成dll的文件，mydll.c</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">"head.h"</span></span></span><br><span class="line"><span class="comment">//导出函数的实现</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>最后一个我们要执行的程序，main.c</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"head.h"</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, a, b, add(a, b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>准备工作做完了，开始进行我们的gcc编译</p><p>首先，先将我们的mydll.c文件编译成mydll.dll形式</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o mydll.dll mydll.c</span><br></pre></td></tr></tbody></table></figure></div><p>之后再将dll文件链接到我们的main.c中形成main.exe文件</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main.exe main.c -L . -l mydll</span><br></pre></td></tr></tbody></table></figure></div><p>L 表示链接库的目录(这里我们是本目录下，以输入得是 . )，-l（小写L）表示链接库名称(编译器会自动添加.dll或者.so后缀)</p><p>这样就完成了我们的dll文件编写与链入</p><p>我们main.exe就会输出</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled.png" alt="Untitled"></p><h1 id="运用万能的vs来进行编译"><a href="#运用万能的vs来进行编译" class="headerlink" title="运用万能的vs来进行编译"></a>运用万能的vs来进行编译</h1><p>首先我们创建一个空项目</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%201.png" alt="Untitled"></p><p>我们在这个文件下，再创建一个新的项目，用来写我们的dll文件</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%202.png" alt="Untitled"></p><p>分别创建两个源文件，就先前gcc那样</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%203.png" alt="Untitled"></p><p>在main.c里面写</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"windows.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*e_add)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;  <span class="comment">//定义一个函数指针声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    HMODULE    hDll = <span class="literal">NULL</span>;   <span class="comment">//声明一个HMODULE类型(句柄指针)的变量 </span></span><br><span class="line">    e_add  add1 = <span class="literal">NULL</span>;       <span class="comment">// 声明一个函数指针，用于接收我们的add函数</span></span><br><span class="line"></span><br><span class="line">    hDll = LoadLibraryA(<span class="string">"mydll.dll"</span>);  <span class="comment">//加载我们的dll文件，获取导出函数表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hDll == <span class="literal">NULL</span>)                <span class="comment">//如果加载dll文件失败,打印提示</span></span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"LoadLibrary(%s) failed!!! [%d]"</span>, <span class="string">"mydll"</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    add1   = (e_add)GetProcAddress(hDll, <span class="string">"add"</span>);   <span class="comment">//获取我们add导出函数的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d\n"</span>, a, b, add1(a, b)); <span class="comment">//调用函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div><p>注意这里的名称需要一样，生成的dll文件名称是按照项目名称来的</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%204.png" alt="Untitled"></p><p>在mydll中写</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">{</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    __declspec(dllexport) <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="comment">//导出函数</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></tbody></table></figure></div><p>下面在mydll项目右键，点击属性</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%205.png" alt="Untitled"></p><p>将配置类型设置为dll文件</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%206.png" alt="Untitled"></p><p>最后一般生成解决方案</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%207.png" alt="Untitled"></p><p>找到文件夹执行我们的main.exe文件</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%208.png" alt="Untitled"></p><p>大功告成</p><h3 id="注意：我们函数运用的是win32的函数，因此我们生成的可执行文件也需要是32位文件，因此可能我们需要调整"><a href="#注意：我们函数运用的是win32的函数，因此我们生成的可执行文件也需要是32位文件，因此可能我们需要调整" class="headerlink" title="注意：我们函数运用的是win32的函数，因此我们生成的可执行文件也需要是32位文件，因此可能我们需要调整"></a>注意：我们函数运用的是win32的函数，因此我们生成的可执行文件也需要是32位文件，因此可能我们需要调整</h3><p>将这里调为x86就会生成32位程序了。（x64是生成64位程序）</p><p><img lazyload="" src="/images/loading.svg" data-src="/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%88%B01%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAdll%E6%96%87%E4%BB%B6%20c6594ccdd993460ab9a316426ab8ed5a/Untitled%209.png" alt="Untitled"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第十二章 并发编程</title>
      <link href="/2023/05/30/ez-byte/"/>
      <url>/2023/05/30/ez-byte/</url>
      
        <content type="html"><![CDATA[<h1 id="ez-byte"><a href="#ez-byte" class="headerlink" title="ez_byte"></a>ez_byte</h1><p>首先我们先打开文件运行一下，看一下输入和输出。进去就是输入，输入之后会对我们的输入进行回显，没有什么非常关键的信息。</p><p>打开ida进行分析，main函数没有什么发现</p><p><img lazyload src="/images/loading.svg" data-src="/ez_byte%20d8787172d35949589bf166b460d2c1f5/Untitled.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/ez_byte%20d8787172d35949589bf166b460d2c1f5/SAVE_20230530_155603.jpg" alt="SAVE_20230530_155603.jpg"></p><p>我们跳到数据区，发现这个100%下面的，yes并没有在string窗口出现，我们按下x查询交叉引用，在执行yes之前，有个jmp指令，也就是说，按照程序执行是永远不好去到yes的地方的，也就是说，一定有什么操作，然后再跳到yes中去。</p><p>我们patch一下jmp，将其修改为条件跳转，看看具体是操作。</p><p><img lazyload src="/images/loading.svg" data-src="/ez_byte%20d8787172d35949589bf166b460d2c1f5/65725c2557233d12.jpg" alt="65725c2557233d12.jpg"></p><p>我们查看判断跳入，yes的汇编，我们可以发现，</p><p><img lazyload src="/images/loading.svg" data-src="/ez_byte%20d8787172d35949589bf166b460d2c1f5/Untitled%201.png" alt="Untitled"></p><p>有个判断r12是否为零，但是并没有出现对r12的任何操作，说明我们想要的操作被隐藏起来了。</p><p>分析函数，我们可以查看到这样一个函数，一个异常处理函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> __noreturn <span class="token function">sub_404BF5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>_DWORD <span class="token operator">*</span>exception<span class="token punctuation">;</span> <span class="token comment">// rax</span>exception <span class="token operator">=</span> <span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">_cxa_allocate_exception</span><span class="token punctuation">(</span><span class="token number">4LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>exception <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">_cxa_throw</span><span class="token punctuation">(</span>exception<span class="token punctuation">,</span> <span class="token operator">&amp;</span>off_5CB8C8<span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload src="/images/loading.svg" data-src="/ez_byte%20d8787172d35949589bf166b460d2c1f5/SAVE_20230530_155623.jpg" alt="SAVE_20230530_155623.jpg"></p><p>fenter里会有一系列SSE指令集有关xmm寄存器操作</p><p>对于异常处理</p><p><a class="link" href="https://www.cnblogs.com/-citywall123/p/12901301.html">C++异常处理机制（throw、try、catch、finally） - 知道了呀~ - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://www.cnblogs.com/catch/p/3604516.html">c++ 异常处理（1） - twoon - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://www.cnblogs.com/catch/p/3619379.html">c++ 异常处理（2） - twoon - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><p>为此，我们可以大致猜测就是运行程序，触发一个异常，然后通过此条转到想要操作的地方，进行操作，通过题目描述，应该就是嵌入了一堆字节码。</p><p>通过查阅资料，有个大佬写了关于此方面的知识。</p><p><a class="link" href="https://bbs.kanxue.com/thread-271891.htm">通过DWARF Expression将代码隐藏在栈展开过程中-软件逆向-看雪-安全社区|安全招聘|kanxue.com<i class="fas fa-external-link-alt"></i></a></p><p>当触发异常的时候，程序会沿着调用链不断向上进行栈展开，直到寻找到能处理这个异常的catch块。</p><p>然而在这个过程中DWARF调试信息完成这个恢复过程</p><p>而在DWARF 3标准中引入了一个DWARF Expression，这个WARF Expression变相就是一个虚拟机。</p><p>到此，我们大致就可以知道，我们的操作就是被隐藏在了这个栈展开中DWARF的“虚拟机”字节码中，</p><p>在Linux中我们执行readelf -Wwr ezbyte  &gt; out.txt,将DWARF 调试信息打印出来</p><p>在前面，我们分析了，对r12的操作，并没有直接出现在代码上，操作代码被隐藏了。这里我们在文件中，搜索r12,发现在这里对我们的r12进行了操作，并且这也“虚拟机”字节码的操作部分。</p><p><img lazyload src="/images/loading.svg" data-src="/ez_byte%20d8787172d35949589bf166b460d2c1f5/7b5bfd7f6451b363.jpg" alt="7b5bfd7f6451b363.jpg"></p><p><a class="link" href="https://dwarfstd.org/doc/DWARF5.pdf">DWARF Debugging Information Format Version 5 (dwarfstd.org)<i class="fas fa-external-link-alt"></i></a></p><p>通过官方文档，查询执行操作的命令</p><p>整个的操作思路</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">DW_OP_constu<span class="token operator">:</span> <span class="token number">8722213363631027234</span>：将一个无符号整数压入堆栈。DW_OP_constu<span class="token operator">:</span> <span class="token number">1890878197237214971</span>：将另一个无符号整数压入堆栈。DW_OP_constu<span class="token operator">:</span> <span class="token number">9123704</span>：将第三个无符号整数压入堆栈。<span class="token function">DW_OP_breg15</span> <span class="token punctuation">(</span>r15<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span>：从 r15 这个寄存器中读取一个值，并将其加上偏移量 <span class="token number">0</span>。DW_OP_plus：从堆栈中弹出两个值，相加后再将结果压入堆栈。DW_OP_xor：从堆栈中弹出两个值，进行异或运算后再将结果压入堆栈。DW_OP_xor：重复前面的操作，再进行一次异或运算。DW_OP_constu<span class="token operator">:</span> <span class="token number">2451795628338718684</span>：将另一个无符号整数压入堆栈。DW_OP_constu<span class="token operator">:</span> <span class="token number">1098791727398412397</span>：将另一个无符号整数压入堆栈。DW_OP_constu<span class="token operator">:</span> <span class="token number">1512312</span>：将第三个无符号整数压入堆栈。<span class="token function">DW_OP_breg14</span> <span class="token punctuation">(</span>r14<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span>：从 r14 这个寄存器中读取一个值，并将其加上偏移量 <span class="token number">0</span>。DW_OP_plus：从堆栈中弹出两个值，相加后再将结果压入堆栈。DW_OP_xor：从堆栈中弹出两个值，进行异或运算后再将结果压入堆栈。DW_OP_xor：重复前面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析完毕之后，写出我们的脚本</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">def <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>    r15 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">8722213363631027234</span> <span class="token operator">^</span> <span class="token number">1890878197237214971</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">9123704</span>    r14 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2451795628338718684</span> <span class="token operator">^</span> <span class="token number">1098791727398412397</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1512312</span>    r13 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">8502251781212277489</span> <span class="token operator">^</span> <span class="token number">1209847170981118947</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8971237</span>    r12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2616514329260088143</span> <span class="token operator">^</span> <span class="token number">1237891274917891239</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1892739</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r12<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r13<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r14<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r15<span class="token punctuation">)</span><span class="token punctuation">)</span>    import binascii    hexstring <span class="token operator">=</span> <span class="token string">"65363039656662352d653730652d346539342d616336392d6163333164393663"</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"flag{"</span> <span class="token operator">+</span> binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span>hexstring<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"3861}"</span><span class="token punctuation">)</span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r15<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span></span><span class="token char">'utf-8'</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span></span><span class="token char">''</span><span class="token expression"><span class="token punctuation">)</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r14<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span></span><span class="token char">'utf-8'</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span></span><span class="token char">''</span><span class="token expression"><span class="token punctuation">)</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r13<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span></span><span class="token char">'utf-8'</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span></span><span class="token char">' '</span><span class="token expression"><span class="token punctuation">)</span></span></span>    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span><span class="token function">unhexlify</span><span class="token punctuation">(</span><span class="token function">hex</span><span class="token punctuation">(</span>r12<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span></span><span class="token char">'utf-8'</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span></span><span class="token char">' '</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出flag:     flag{e609efb5-e70e-4e94-ac69-ac31d96c3861}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/18/2023-gudoctf-l-s/"/>
      <url>/2023/04/18/2023-gudoctf-l-s/</url>
      
        <content type="html"><![CDATA[<h1 id="L-S"><a href="#L-S" class="headerlink" title="L!S!"></a>L!S!</h1><p>说实话，起初看到这道题是很懵逼的，莫名其妙的两个文件，刚开始还没有理解到ls指得是linux的命令，以为是两个ELF可执行文件罢了。于是乎，我将其放入linux运行之后发现到一些端倪。</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled.png" alt="Untitled"></p><p>运行两个文件，发现居然都是执行的ls命名。后来尝试运行将文件运行加上ls的命令，比如ls -help是查看ls命令帮助，我./ls-original -help，也是同样的情况。</p><p>两个同样的文件，都是ls，似乎还是源码的感觉。想了很久，有仔细看了看名字，才恍然大悟。原来的将ls修改了，一个是修改后的，一个是源码。正好前些阵子听师傅讲过一个插件。bindiff,IDA插件，用于恢复符号表和对比函数。正好可以做这道题。</p><p>这个大佬对于安装写得很详细</p><p><a class="link" href="https://www.cnblogs.com/lsdb/p/10543411.html">BinDiff安装使用教程 - 诸子流 - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><p>安装bindiff之后，我们打开IDA分析patch后的文件，然后分析源码文件，然后关闭文件，我们需要的是源码文件的IDB文件。</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled%201.png" alt="Untitled"></p><p>打开我们的源码IDB，这个文件进入分析</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled%202.png" alt="Untitled"></p><p>我们直接点到这个Matched Function这个窗口，这个窗口就是我们已经匹配的函数</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled%203.png" alt="Untitled"></p><p>对于最前面的这个列表，表示的就是函数匹配程度，1代表完全匹配，越接近1匹配程度越高。</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled%204.png" alt="Untitled"></p><p>我们翻到后面，发现有一个函数只有0.84，这个就是更改过后的函数了。</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled%205.png" alt="Untitled"></p><p>进入函数分析</p><p><img lazyload src="/images/loading.svg" data-src="/L!S!%202e371aba70d2456a965c6ef22fd7be8b/Untitled%206.png" alt="Untitled"></p><p>通过分析，我们可以知道，是将v19,v20这些数据进行了加密，而加密方式是简单的异或，但是IDA分析得很乱，具体是怎么异或的，或者异或的啥我们都不知道。而且发现有反调试（确切不知道，主要是一调试就会强制退出）。我们先将数据提取出来。</p><p>到了这里，我们来想一想我们手上有那些有用的信息，我们知道数据，而且知道了加密方式，知道前六个字符铁定是HZCTF｛。根据这些信息我们可以对其异或的值进行爆破，然后再通过观察得到的值来查找规律。不料，直接一发入魂，爆破出来，异或的全是76。然后我们直接写脚本解出flag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span>        <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>        <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">46</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">76</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HZCTF{b1ndiff_1s_a_us3ful_t00l}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/06/han-shu-diao-yong-yue-ding/"/>
      <url>/2023/04/06/han-shu-diao-yong-yue-ding/</url>
      
        <content type="html"><![CDATA[<h1 id="函数调用约定"><a href="#函数调用约定" class="headerlink" title="函数调用约定"></a>函数调用约定</h1><p>对于函数调用约定，我们首先应该知道的是为什么产生函数调用约定？为什么要用函数约定？</p><p>首先，我们在写函数时，我们可以知道的是</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>像这样，我们很容易知道，函数的返回值是什么类型，有几个参数，以及参数是什么类型。对于我们的CPU来说，我们的C语言是先编译成机械码之后，我们CPU才能执行，但是，变成一条一条的机械码之后，我们的CPU怎么才能知道这个函数有几个参数，以及什么类型等等的问题呢？这个时候就需要我们的函数调用约定。</p><p>其次，深入函数的调用，对于内存上来说，函数的调用者首先依次把参数压栈，然后调用函数，函数被调用以后，在堆栈中申请空间并取得数据，然后在这个临时开辟的空间中进行计算。函数计算结束以后，调用者或者函数本身就会将这片临时的空间释放，然后将参数出栈，使堆栈恢复原状。</p><p>因此自然而然的在进行函数调用时，有两个很重要的问题需要得到明确说明：</p><p>1、当参数个数多于一个时，按照什么顺序将参数压入堆栈<br>2、函数调用后，由谁来将堆栈恢复原状<br>因此，我们的相对高级的语言在处理上述的这些问题的时候，就有着一些约定。</p><p>所以<strong>函数调用约定到底是什么</strong>呢？函数调用约定就是：函数调用者和被调用的函数体之间关于参数传递、返回值传递、堆栈清除、寄存器使用的一种约定。</p><h1 id="一些常见的函数调用约定以及使用"><a href="#一些常见的函数调用约定以及使用" class="headerlink" title="一些常见的函数调用约定以及使用"></a>一些常见的函数调用约定以及使用</h1><p>我们一般写函数的格式都是这样的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实这样写是省略了我们函数调用约定的，这样写是运用了c默认的函数调用约定__cdecl，如果不省略我们的函数调用约定就应该这样写</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在我们函数名前面加上我们的函数调用约定。</p><h2 id="cdecl（C-x2F-C-默认的调用约定）"><a href="#cdecl（C-x2F-C-默认的调用约定）" class="headerlink" title="__cdecl（C/C++默认的调用约定）"></a><strong><strong>__cdecl（C/C++默认的调用约定）</strong></strong></h2><p><strong><strong>__cdecl是C Declaration的缩写，表示C\C++默认的函数调用约定。当我们没有写函数调用约定时，我们编译器会自己默认将其加上。</strong></strong></p><p>_cdecl规定：</p><ul><li>参数从右向左压入堆栈</li><li>由调用者负责清理堆栈（传送参数的内存栈是由调用者来维护的，返回值在EAX中）</li><li>C调用约定允许函数的参数的个数是不固定的。（因此调用参数个数可变的函数只能采用这种方式（如printf））</li><li>编译器在编译时会在函数名前加上一个下划线前缀生成修饰名，格式为_functionname。如函数int Add(int a, int b)的修饰名是_Add</li></ul><h2 id="stdcall（Windows的大多数的API函数采用了这种调用方式）"><a href="#stdcall（Windows的大多数的API函数采用了这种调用方式）" class="headerlink" title="__stdcall（Windows的大多数的API函数采用了这种调用方式）"></a><strong><strong>__stdcall（Windows的大多数的API函数采用了这种调用方式）</strong></strong></h2><ul><li>参数从右向左压入堆栈</li><li>由被调用者负责清理堆栈（函数自己在退出时清空堆栈，返回值在EAX中）</li><li>__stdcall调用约定在输出函数名前加上一个下划线前缀，后面加上一个“@”符号和其参数的字节数，格式为_function@number。如函数int sub(int a, int b)的修饰名是_sub@8。</li></ul><p> 这里__stdcall和__cdecl中第二条主要的区别在于，当调用者负责清理堆栈的时候，调用一次就会需要在调用处编译出恢复栈顶的代码，而被调用者负责清理堆栈的时候，在函数内部编译出恢复栈顶的代码一份就行了。这样就会节省我们的空间。</p><h2 id="fastcall（用于一些需要对参数快速处理的函数）"><a href="#fastcall（用于一些需要对参数快速处理的函数）" class="headerlink" title="__fastcall（用于一些需要对参数快速处理的函数）"></a><strong><strong>__fastcall（用于一些需要对参数快速处理的函数）</strong></strong></h2><p>正如其名，_fastcall调用的主要特点就是快，因为它是通过寄存器来传送参数。</p><ul><li>函数的第一个和第二个（从左向右）两个DWORD或更小的参数，通过ecx和edx传递（寄存器传递），其他参数通过桟传递。从第三个参数（如果有的话）开始<strong>从右向左</strong>的顺序压栈；</li><li>函数自身清理堆栈</li><li>在函数名之前加上”@”,在函数名后面也加上“@”和参数字节数，例如@function@8</li></ul><p>和__stdcall与__cdecl相比最主要的区别是，__fastcall把第1和第2个参数放到了寄存器中，而不是压栈，因为寄存器的读写速度比栈快很多，所以叫做fast call。</p><h2 id="thiscall-C-类成员函数默认调用约定"><a href="#thiscall-C-类成员函数默认调用约定" class="headerlink" title="__thiscall(C++类成员函数默认调用约定)"></a><strong>__thiscall(C++类成员函数默认调用约定)</strong></h2><p>thiscall是一个不能明确指明的函数修饰，thiscall不是关键字，thiscall只能用于C++类成员函数的调用。而且thiscall也是C++成员函数缺省的调用约定，由于成员函数调用还有一个this指针，因此需要特殊处理。</p><ul><li>参数从右向左压入堆栈</li><li>如果参数个数不确定，this指针在所有参数压栈后被压入堆栈。如果参数个数确定，this指针通过ecx传递给被调用者</li><li>如果参数个数不确定，调用者清理堆栈，否则函数自己清理堆栈</li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h3 id="C-编译时函数名修饰约定规则："><a href="#C-编译时函数名修饰约定规则：" class="headerlink" title="C++编译时函数名修饰约定规则："></a>C++编译时函数名修饰约定规则：</h3><p>以“?”标识函数名的开始，后跟函数名；</p><p>函数名后面以“@@YG”标识参数表的开始，后跟参数表；</p><p>2.函数名后面标识调用约定，然后跟参数列表。</p><p>__cdecl，@@YA</p><p>__stdcall，@@YG</p><p>__fastcall，@@YI</p><p>参数表以代号表示：</p><p>X–void ，</p><p>D–char，</p><p>E–unsigned char，</p><p>F–short，</p><p>H–int，</p><p>I–unsigned int，</p><p>J–long，</p><p>K–unsigned long，</p><p>M–float，</p><p>N–double，</p><p>_N–bool，</p><p>PA–表示指针,后面的代号表明指针类型，如果相同类型的指针连续出现，以“0”代替，一个“0”代表一次重复<br>…</p><p>参数表的第一项为该函数的返回值类型，其后依次为参数的数据类型,指针标识在其所指数据类型前；</p><p>参数表后以“@Z”标识整个名字的结束，如果该函数无参数，则以“Z”标识结束。</p><p>例如:</p><p>int Test1（char *var1,unsigned long）—–“?Test1@@YGHPADK@Z”<br>void Test2（） —–“?Test2@@YGXXZ”</p><p>“int __cdecl a(char)————?a@@YAHD@Z”</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a class="link" href="https://blog.csdn.net/mlyjqx/article/details/73844565">(62条消息) C语言的函数调用约定（stdcall+cdecl+thiscall+fastcall）_int stdcall_莲娃的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/weixin_39640298/article/details/84455481">(60条消息) 函数调用约定的详解_YoungYangD的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/luoweifu/article/details/52425733">(62条消息) 带你玩转Visual Studio——调用约定__cdecl、__stdcall和__fastcall_vs调用规则cdecl_luoweifu的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="http://www.3scard.com/index.php?m=blog&amp;f=view&amp;id=10">调用约定(Calling Conventions) 函数名修饰(Name Mangling) 二进制分析工具 - 通用C++ - 蜗牛大锅的博客 (3scard.com)<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/05/nu1l-2023-zhao-xin-ti-mu/"/>
      <url>/2023/04/05/nu1l-2023-zhao-xin-ti-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="nu1L-2023招新题目"><a href="#nu1L-2023招新题目" class="headerlink" title="nu1L_2023招新题目"></a>nu1L_2023招新题目</h1><h1 id="1、checkin"><a href="#1、checkin" class="headerlink" title="1、checkin"></a>1、checkin</h1><p>flag在平台上，直接复制粘贴提交flag即可。（当时刚刚开始的时候，满怀激动的打开了平台，直接毫不不拖泥带水的去看自己方向的题目，直到后面才发现还有签到题。）</p><h1 id="2、re-checkin-rs"><a href="#2、re-checkin-rs" class="headerlink" title="2、re-checkin-rs"></a>2、re-checkin-rs</h1><p>打开ida进行分析，按照惯性，搜索main函数，看主体代码，这次却发现打开main函数，并不是真正的mian函数，而是进行调用。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled.png" alt="Untitled"></p><p>找到这个进行操作的main函数</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%201.png" alt="Untitled"></p><p>在没有出现hint的时候，对这道题分析就非常的迷惑。</p><p>有三组数据，加起来一共有46个数据，这个就猜测就是我们的比较数据了，flag也应该有着46个数据。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%202.png" alt="Untitled"></p><p>找到了输出的几处打印，但是就是没有找到加密算法。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%203.png" alt="Untitled"></p><p>不愧是作为专注于安全的语言，rust进行逆向分析太头疼了，一个很简单的程序，逆向来基本上看不明白。原本也没有对于rust进行学习，对它的了解就仅仅停留在前辈们偶尔的讲解中听说。分析起来确实一头雾水。</p><p><em>hint</em></p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%204.png" alt="Untitled"></p><p>进行动态调试，这里需要说到的是，这个程序还必须在ubuntu22.04上才能运行，我原先装的是ubuntu18‘04，重新装了一个ubuntu……….</p><p>搜索bcmp函数，然后查看交叉引用，发现这个bcmp调用还挺多的。不知道哪个是真正关键的bcmp函数，就直接挨着挨着把各个bcmp函数对应的地方都下 了断点（后来发现就只有第一bcmp才是，其他bcmp断了之后，程序会直接退出）</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%205.png" alt="Untitled"></p><p>调试之后发现，这个v24是我们的加密后的数据。对此，将这个程序当做黑盒进行处理，输入多组数据进行观察。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%206.png" alt="Untitled"></p><p>46个a                                                46个1                                              12345678循环46个数</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%207.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%208.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%209.png" alt="Untitled"></p><p>起初归纳的是0, 1, 2, -1, 4, -3, -2, -5, 8, -8, -7, -10, -4, -12, -11, -14，然后进行循环16为一组。</p><p>发现这个规律仅仅适合46个1.后来找了很久也没有发现比较适合的普遍规律。试着试着，突然灵光一现，可能是异或勒。</p><p>直接一发入魂，解出flag</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">48</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0X20</span><span class="token punctuation">,</span> <span class="token number">0X23</span><span class="token punctuation">,</span> <span class="token number">0X22</span><span class="token punctuation">,</span> <span class="token number">0X25</span><span class="token punctuation">,</span> <span class="token number">0X24</span><span class="token punctuation">,</span> <span class="token number">0X68</span><span class="token punctuation">,</span> <span class="token number">0X72</span><span class="token punctuation">,</span> <span class="token number">0X6E</span><span class="token punctuation">,</span> <span class="token number">0X56</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0X7A</span><span class="token punctuation">,</span>               <span class="token number">0X62</span><span class="token punctuation">,</span> <span class="token number">0X4E</span><span class="token punctuation">,</span> <span class="token number">0X7C</span><span class="token punctuation">,</span> <span class="token number">0X7A</span><span class="token punctuation">,</span> <span class="token number">0X7F</span><span class="token punctuation">,</span> <span class="token number">0X76</span><span class="token punctuation">,</span> <span class="token number">0X73</span><span class="token punctuation">,</span> <span class="token number">0X7F</span><span class="token punctuation">,</span> <span class="token number">0X7B</span><span class="token punctuation">,</span> <span class="token number">0X46</span><span class="token punctuation">,</span> <span class="token number">0X7F</span><span class="token punctuation">,</span> <span class="token number">0X68</span><span class="token punctuation">,</span> <span class="token number">0X6E</span><span class="token punctuation">,</span> <span class="token number">0X78</span><span class="token punctuation">,</span> <span class="token number">0X68</span><span class="token punctuation">,</span> <span class="token number">0X7A</span><span class="token punctuation">,</span>               <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> d<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"R~[PE@]LF\\ZHI^"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">46</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">46</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>nuf_si_tsur_nikcehc_esrever_ysae<span class="token punctuation">{</span>knupces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出之后，在python中写个脚本倒回来就行。</p><p>secpunk{easy_reverse_checkin_rust_is_fun!!!!!}</p><h1 id="3、n0th1ngG0"><a href="#3、n0th1ngG0" class="headerlink" title="3、n0th1ngG0"></a>3、n0th1ngG0</h1><p>看这个题目就猜测为go语言的逆向。放入ida中进行分析。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2010.png" alt="Untitled"></p><p>通过分析，可以知道，经过一系列的操作，这个v17,v18(一起的）的数据，经过变化之后会形成一段固定的数据。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2011.png" alt="Untitled"></p><p>这里v19,v20,v21,的数据之后，紧接着的是数据比较，按照题目的一般套路，这里就应该是我们的比较数据了。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2012.png" alt="Untitled"></p><p>这下，main函数的流程大致分析完了，进入加密函数中。</p><p>跟入</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2013.png" alt="Untitled"></p><p>这个算法的特征很明显，多次出现了256,257.大致就能猜测出这个应该是rc4加密了。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2014.png" alt="Untitled"></p><p>然后按照前面分析，这个就是我们rc4的key数据了。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2011.png" alt="Untitled"></p><p>动态调试，提取key。看到这里，rc4八九不离十了。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2015.png" alt="Untitled"></p><p>然后去找一个在线解密rc4的网站进行解密。</p><p><img lazyload src="/images/loading.svg" data-src="/nu1L_2023%E6%8B%9B%E6%96%B0%E9%A2%98%E7%9B%AE%20fddd10d21d424c2a8fafe3ded29321e2/Untitled%2016.png" alt="Untitled"></p><p>得出flag</p><p>secpunk{N1_JUn10r_2023_1s_4w3s0m3}</p><p><strong>总结：通过这次战队招新的题目，学到了很多，以前关于rust一点也不了解，这次感受到了一个专注于安全的语言的逆向难度，程序很简单，但是逆向真的复杂。对于黑盒解题也有了更深刻的了解。这次为期一天的招新比赛，总共详细做了三道re方向的题目，解出了两道。最后解的那道aes的题目，只做出了一半，把aes加密的数据解密出来，但是对于里面中的</strong><code>unicorn</code> 中的代码一筹莫展。网上看雪论坛一个叫无名侠的博主写得有一篇对<code>unicorn</code> 写得很好的一篇文章，文章写了一个关于<code>unicorn</code> 调试器，整合起来进行调试，但是最后还是没能整出来。通过这次勒，收获还是蛮大的，再次深刻感觉做好一个re手还有很长很长的路。感谢师傅们精心出的题和很耐心的询问我们的做题进度，然后再调整题目难度，对于我们这些新手来说很友好，让我们不至于一道题也做不出来（哈哈哈，说白了就是太菜了）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/04/04/c-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2023/04/04/c-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础知识总结"><a href="#C-基础知识总结" class="headerlink" title="C++基础知识总结"></a>C++基础知识总结</h1><p>个人理解，对于c++的学习，就是c语言的延续，甚至可以说，c++包含了c语言，c语言的绝大多数都能被c++兼容。但是，本质的用处还是有些许区别的，c语言，主要面向的是过程，注重的是对于过程中每一步的操作，声明，以及顺序，这些步骤。而c++面向的是对象，（对象可以理解为对于我们现实生活的一种抽象，比如，人是对象，物品是对象），注重的是对于一种整体上的一种把控，对于整体上的操作与声明，强调对象各自需要做些什么事情，然后在分别进行实现。</p><p>遇到了大佬讲的一个很好的例子：</p><hr><p>面向过程：1.人把脏衣服脱掉 2.人打开洗衣机 3.洗衣机开始洗衣服 4.洗衣机甩干 5.人晾衣服</p><p>面向对象：有两个对象，一个对象是人，功能有脱掉脏衣服，打开洗衣机，晾衣服</p><p>一个对象是洗衣机，功能有洗衣服，甩干</p><hr><p>对于c++，我就从写程序一开始我遇到的困惑的知识点开始吧。（由于c++是c语言的延续，c++前面的知识基本上就是c语言，所以这篇文章就有c基础之上学c++）</p><h3 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、<strong>namespace</strong></h3><p>namespace叫做名字空间或者命名空间。比如我们会这样写std::cin，就是调用std命名空间内的cin这个函数。双冒号前表示命名空间，后表示命名空间下的函数。</p><p>作用：为了解决名称冲突，因为，在项目中函数名、全局变量、结构、联合、枚举、类，非常有可能发生名字冲突，而名字空间就对这些命名进行逻辑空间划分，来解决名称冲突问题。</p><h3 id="2、开辟空间上"><a href="#2、开辟空间上" class="headerlink" title="2、开辟空间上"></a>2、开辟空间上</h3><p>相对于c的malloc和free，c++一般用得是new 和delete,后者是前者的封装。这里需要主要的是<strong>new和delete都是运算符，而不是库函数，所以我们可以直接用。</strong> </p><p>用法：1、申请空间 int* ptr = new int; 2、申请连续的空间  int* arr = new int[10];</p><p>1、释放空间   delete ptr; 2、释放连续的多个空间   delete[] arr;</p><h3 id="3、重载"><a href="#3、重载" class="headerlink" title="3、重载"></a>3、重载</h3><p>重载可以分为两种，一种是函数重载，一种是运算符重载。</p><p><strong>函数重载</strong></p><p>具有相同的名称，执行基本相同的操作，但是使用不同的参数列表。参数列表就是参数的多少和类型。这样一来减少了我们函数名的数量，增加了代码的可读性，有助于理解和调试代码。</p><p>例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap1</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//交换 int 变量的值</span><span class="token keyword">void</span> <span class="token function">swap2</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//交换 float 变量的值</span><span class="token keyword">void</span> <span class="token function">swap3</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//交换 char 变量的值</span><span class="token keyword">void</span> <span class="token function">swap4</span><span class="token punctuation">(</span>bool <span class="token operator">*</span>a<span class="token punctuation">,</span> bool <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//交换 bool 变量的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>像这样，我们可以用函数重载，将swap全部重载为一个，只要我们传入的函数类型不同，就会分别执行对于的函数操作了。</p><p><strong>运算符重载</strong></p><p>对于我们的基本的运算符，加减乘除，一般上只能对比如整形，浮点，字符类型进行加减乘除，对于，比如，两个类之间如何进行加减乘除就不能进行了。这时就产生了运算符重载，通过写运算符重载，规定两个类之间的运算，比如+，-，来执行我们的操作。</p><h3 id="4、引用"><a href="#4、引用" class="headerlink" title="4、引用"></a>4、引用</h3><p>符号：&amp;；</p><p>引用的用处就是取别名，，对引用的操作与对变量直接操作完全一样，有点像我们指针的实体化。</p><p>比如,int a =10; int &amp;b =a; 也就是这这片存有10的空间，以前叫a，a里面存放着10，通过引用之后，这个地方又叫b了。b就是a的意思，我们对b进行修改，也就是对a进行修改。</p><p>对于引用需要注意的地方：</p><p>1、<strong>创建引用的同时必须将其初始化。</strong></p><p>2、<strong>引用不能为NULL，其必须与某个标识符关联。</strong></p><p><strong>3、引用被初始化之后就不能再更改引用关系</strong></p><p>4、<strong>一个变量可以有多个引用。</strong></p><h3 id="5、构造函数与析构函数"><a href="#5、构造函数与析构函数" class="headerlink" title="5、构造函数与析构函数"></a>5、构造函数与析构函数</h3><p>析构函数和构造函数都是必须执行的，如果我们不自己提供，那么编译器会自动执行一个空的析构和构造函数</p><h3 id="构造函数："><a href="#构造函数：" class="headerlink" title="构造函数："></a>构造函数：</h3><p><strong>作用：</strong>为所有成员属性初始化，处理对象的初始化<strong>。</strong></p><p><strong>特点：</strong></p><p>1、函数名与类名相同。</p><p>2、没有函数返回值不用写void.</p><p>3、自动调用，并且只调用一次。</p><p>4、可以有参数，可以发生重载。</p><h3 id="析构函数："><a href="#析构函数：" class="headerlink" title="析构函数："></a>析构函数：</h3><p><strong>作用：</strong>执行对象的清理工作，当对象的生命周期结束的时候，会自动的调用<strong>。</strong>析构函数除了释放工作，还可以做一些用户希望它做的一些工作，比如输出一些信息。</p><p><strong>特点：</strong></p><p>1.析构函数没有返回值，没有参数；</p><p>2.函数名与类名相同。</p><p>3、没有参数，所以不能重载，一个类仅有一个析构函数；</p><p>4、自动调用，并且只调用一次。</p><h3 id="6、类和对象"><a href="#6、类和对象" class="headerlink" title="6、类和对象"></a>6、类和对象</h3><p>class就是我们的类，对于类，如果学过c语言，其实类就是c中结构体的升级版，在某种意义上，基本可以混为一谈。</p><p><strong>封装</strong></p><p>对于c语言中与类最像的结构体来说，结构体只有属性，没有操作，而我们class就是将属性和行为封装在了一起。打个比方，对象是一个人，结构体里面有声明的是，这个人有两支手，两条腿，对于class来说，不仅声明了这个人有两支手，两条腿，还说了，这个人用两支手拿东西，用两条腿走路。将属性和操作放在一个类下，这个操作就是封装。</p><p>class有三种权限，public(公共)；protected(保护)；private(私有):</p><ul><li>public：可以被该类中的函数、子类的函数、友元函数访问，也可以由该类的对象访问；</li><li>protected：可以被该类中的函数、子类的函数、友元函数访问，但不可以由该类的对象访问；</li><li>private：可以被该类中的函数、友元函数访问，但不可以由子类的函数、该类的对象、访问。</li></ul><p>对于权限之上，结构体和类之间的区别</p><p>class的默认权限是私有权限，而struct的默认权限却是公共权限。</p><p><strong>继承</strong></p><p>继承机制主要是用于面向对象程序设计，使代码可以复用，它允许程序员在保持原有类特性的基础上进行扩展，增加功能。这样产生的新类，称<a class="link" href="https://so.csdn.net/so/search?q=%E6%B4%BE%E7%94%9F%E7%B1%BB&amp;spm=1001.2101.3001.7020">派生类<i class="fas fa-external-link-alt"></i></a>（或子类），被继承的类称基类（或父类）</p><p>打个比方来说，在我们生活中，有猫这个类，猫中，可以分为加菲猫，波斯猫，折耳猫，暹罗猫，等等。可以知道，在猫这个大类中，许多小类的猫，都有着猫的共同点，相当于说，在满足猫这个大类之下，再分小类的猫。而继承，就是我们写了一个猫，然后我们在写小类的猫的时候，我们就继承猫这个大类，猫这个大类的属性就给我们小类猫class上，这样我们只需要写，这个小类的猫的特点就行了。</p><p><em><strong>继承权限问题</strong></em></p><p><img lazyload src="/images/loading.svg" data-src="/C++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%20e49b824901064da79c046d4893d94b75/Untitled.png" alt="Untitled"></p><p>不可见的意思就是不能继承，private就是私有财产，不能够被继承下去。</p><p><em><strong>继承中析构函数和构造函数执行的问题</strong></em></p><p>对于构造函数：编译器会默认先调用父类的构造函数，再调用子类的构造函数</p><p>对于析构：析构函数和构造函数相反，编译器默认先调用子类的析构函数，再调用父类的析构函数。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>“多态（英语：polymorphism），是指计算机程序运行时，相同的消息可能会送给多个不同的类别之对象，而系统可依据对象所属类别，引发对应类别的方法，而有不同的行为</p><p>打个比方来说：对于人这个对象来说，在不同时候，我们有着不同的情绪，开心，伤心，等等，一个人多种情绪，有着多种状态。</p><p>写的情况：在父类中声明了要做什么？没有写具体的实现，当子类继承父类之后，将要做什么进行实现。比如，写一个猫的类，假设有两个猫的子类，一个为狸花猫，一个是纯白猫。在猫这个大类中，猫都是有毛的，但是没有具体说到底是什么毛，当我们的子类继承了猫这个大类后，就会写具体这个猫的毛是什么，一个是狸花，一个是纯白。因此这个毛，就在众多子类中有了多种状态（狸花，纯白），从而形成了多态。</p><p>多态的条件：</p><p><strong>1 、必须通过基类的指针或者引用调用虚函数。</strong></p><p><strong>2、 被调用的函数是虚函数，且必须完成对基类虚函数的重写。</strong></p><p><strong>虚函数</strong></p><p><em><strong>什么是虚函数？</strong></em></p><ul><li>虚函数，在类成员方法的声明（不是定义）语句前加“virtual”, 如 virtual void func()</li><li>纯虚函数，在虚函数后加“=0”，如 virtual void func()=0</li></ul><p>虚函数的实现是由两个部分组成的，虚函数指针与虚函数表。</p><p><strong>虚<em>函数存在哪里？</em></strong></p><p>虚函数是带有virtual的函数，虚函数表是存放虚函数地址的指针数组，虚函数表指针指向这个数组。对象中存的是虚函数指针，不是虚函数表。<br><em><strong>虚函数表存在哪里？</strong></em><br>虚函数和普通函数一样存在代码段。<br><em><strong>那么虚函数表存在哪里呢？</strong></em><br>我们创建两个A对象，发现他们的虚函数指针相同，这说明他们的虚函数表属于类，不属于对象。所以虚函数表应该存在共有区。<br>堆？堆需要动态开辟，动态销毁，不合适。<br>虚函数表放在了全局数据段。</p><p><strong>C++中一个类是公用一张虚函数表的，基类有基类的虚函数表，子类是子类的虚函数表，这极大的节省了内存</strong></p><p>子类如果不提供虚函数的实现，那就会自动调用基类的缺省方案。而子类如果不提供纯虚函数的实现，则编译将会失败。基类提供的纯虚函数实现版本，无法通过指向子类对象的基类类型指针或引用来调用，因此不能作为子类相应虚函数的备选方案。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/31/linux-ji-chu-ming-ling/"/>
      <url>/2023/03/31/linux-ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="linux基础命令"><a href="#linux基础命令" class="headerlink" title="linux基础命令"></a>linux基础命令</h1><p>命令是可以嵌套使用的</p><h3 id="ctrl-l-清空屏幕"><a href="#ctrl-l-清空屏幕" class="headerlink" title="ctrl+l 清空屏幕"></a>ctrl+l 清空屏幕</h3><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>ls 展示当前目录下的文件</p><p>ls -l 以列表的形式将当前目录下的文件显示出来</p><p>ls -a显示所有文件包括隐藏文件</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>直接用cd 命令会默认的回到我们的初始目录root权限下暨root，普通权限下暨home</p><p>cd +路径:切换到指定目录下</p><p>特殊路径符</p><p>cd ..  表示回到上一级目录</p><p>cd ../..  返回上两级目录</p><p>cd ~ 表示会到home目录</p><p><code>cd -</code> 表示返回上一个目录</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>pwd 打印当前目录</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>mkdir+名称 创建一个以该名称的新目录</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>touch + 文件名 创建一个该文件名的文件</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>cat +路径 将内容全部显示出来</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>more + 文件路径,以翻页的形式打开文件</p><p>其中空格为下一页,  按q为退出</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>rm +  文件 删除该目录下的文件</p><p>rm -r + 目录 删除该目录下的目录</p><p>rm -rf* 将该目录下的所有文件和目录删除</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>mv aaa bbb  将aaa重命名为bbb</p><p>mv 路径a中x文件  路径b  表示将a路径的x文件剪切到b中</p><p>例如：mv /text2/text1/aaa  /text2   就是将text1目录下的aaa文件剪切到text2中</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>cp和mv的剪切是一个道理</p><p>cp  路径a中x文件  路径b  表示将a路径的x文件拷贝到b中</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find + 目录+ 参数+ 文件名</p><p>例如：find /text2/text1 -name ‘a*’   表示寻找text1目录下所有以a开头的目录。</p><h3 id="打包压缩"><a href="#打包压缩" class="headerlink" title="打包压缩"></a>打包压缩</h3><p>tar -zcvf +打包压缩后的名称 + 想要打包压缩的文件</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>tar -zxvf + 你想要解压的包名称</p><h3 id="ps-ef-查看所有正在运行的进程"><a href="#ps-ef-查看所有正在运行的进程" class="headerlink" title="ps -ef 查看所有正在运行的进程"></a>ps -ef 查看所有正在运行的进程</h3><h3 id="kill-pid-进程号）-强制杀死进程"><a href="#kill-pid-进程号）-强制杀死进程" class="headerlink" title="kill + pid(进程号） 强制杀死进程"></a>kill + pid(进程号） 强制杀死进程</h3><h3 id="ifconfig-查看网卡信息"><a href="#ifconfig-查看网卡信息" class="headerlink" title="ifconfig 查看网卡信息"></a>ifconfig 查看网卡信息</h3><h3 id="ping-查看与某台机器连接的情况"><a href="#ping-查看与某台机器连接的情况" class="headerlink" title="ping 查看与某台机器连接的情况"></a>ping 查看与某台机器连接的情况</h3><h3 id="netstat-an-查看当前系统端口"><a href="#netstat-an-查看当前系统端口" class="headerlink" title="netstat -an 查看当前系统端口"></a>netstat -an 查看当前系统端口</h3><h3 id="chkconfig-iptables-off-关闭防火墙"><a href="#chkconfig-iptables-off-关闭防火墙" class="headerlink" title="chkconfig iptables off 关闭防火墙"></a>chkconfig iptables off 关闭防火墙</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/31/not-a-like/"/>
      <url>/2023/03/31/not-a-like/</url>
      
        <content type="html"><![CDATA[<h1 id="not-a-like"><a href="#not-a-like" class="headerlink" title="not_a_like"></a>not_a_like</h1><p>拖入PE查询中看看，发现有upx壳</p><p><img lazyload src="/images/loading.svg" data-src="/not_a_like%202f29751282c1432cb3ff0308d17e8954/Untitled.png" alt="Untitled"></p><p>用upx的程序进行脱壳，发现并不能脱去。</p><p>丢入winhex中进行查看，发现upx壳的头缺失了。</p><p>正常的</p><p><img lazyload src="/images/loading.svg" data-src="/not_a_like%202f29751282c1432cb3ff0308d17e8954/Untitled%201.png" alt="Untitled"></p><p>本题的</p><p><img lazyload src="/images/loading.svg" data-src="/not_a_like%202f29751282c1432cb3ff0308d17e8954/Untitled%202.png" alt="Untitled"></p><p>我们需要将其Upx头进行补全。</p><p><img lazyload src="/images/loading.svg" data-src="/not_a_like%202f29751282c1432cb3ff0308d17e8954/Untitled%203.png" alt="Untitled"></p><p>然后再进行upx脱壳</p><p>脱壳后，进入ida我们可以发现许多py后缀的文件，可以判断这里为py打包为exe</p><p>我们用<a class="link" href="http://pyinstxtractor.py/">pyinstxtractor.py<i class="fas fa-external-link-alt"></i></a>进行解包。</p><p>将struct的文件头复制到，not_a_like的文件之中，将其变成pyc文件。</p><p>然后对pyc进行反编译。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token comment"># visit https://tool.lu/pyc/ for more information</span><span class="token comment"># Version: Python 3.8</span><span class="token keyword">import</span> libnum<span class="token keyword">import</span> base64<span class="token keyword">import</span> hashlib<span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    data_xor_iv <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    j <span class="token operator">=</span> <span class="token number">0</span>    x <span class="token operator">=</span> y <span class="token operator">=</span> k <span class="token operator">=</span> <span class="token number">0</span>    key <span class="token operator">=</span> <span class="token string">'911dcd09ad021d68780e3efed1aa8549'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sbox<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> j <span class="token operator">+</span> sbox<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">255</span>        sbox<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sbox<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        sbox<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> sbox<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> text<span class="token punctuation">:</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token number">255</span>        y <span class="token operator">=</span> y <span class="token operator">+</span> sbox<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">255</span>        sbox<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> sbox<span class="token punctuation">[</span>y<span class="token punctuation">]</span>        sbox<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> sbox<span class="token punctuation">[</span>x<span class="token punctuation">]</span>        k <span class="token operator">=</span> sbox<span class="token punctuation">[</span>sbox<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> sbox<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">255</span><span class="token punctuation">]</span>        data_xor_iv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx <span class="token operator">^</span> k<span class="token punctuation">)</span>    <span class="token keyword">return</span> data_xor_iv<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'%e8%af%b7%e8%be%93%e5%85%a5flag&gt; '</span><span class="token punctuation">)</span>    pub_key <span class="token operator">=</span> <span class="token punctuation">[</span>        0x1B6A7561D99E6FC35BA3C241159424698BF3CAC017CFCE8BB325CC9AF9CBCBDB3997B08D922C8705FC3EEAEF50D60ADAB2757A7204715483A1D612502970595358BCFE9CD11C98CAD293EB921D777F4F910905D79CDCA5C1EC1FBA5DA74DB165F82BBE29EA0B2E597860FC6D2C51C12D46BF11AFA5018496DDFC3474B10B4457L<span class="token punctuation">,</span>        0x6C8E1CC5B384DE3B3316C22CF72D9895406298E172B5F4D890BDC04889BB43CD4892689DE701C84ED68B4CBC7193926BCCB0A4F259D2E752FAEF3CD590A793F120D15424AEB3CD53F5D59B5D41D699694ABF4F01532F0F1CE127B07958FB874982E757EF97643335376790BC990CEE9D7F0D05DA90AD62084C88BFA9C9BEB683L<span class="token punctuation">]</span>    m <span class="token operator">=</span> libnum<span class="token punctuation">.</span>s2n<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>   <span class="token comment">#编码转换</span>    c <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> pub_key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pub_key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">//</span>rsa    q <span class="token operator">=</span> <span class="token string">b'EeJWrgtF+5ue9MRiq7drUAFPtrLATlBZMBW2CdWHRN73Hek7DPVIYDHtMIAfTcYiEV87W7poChqpyUXYI3+/zf5yyDOyE9ARLfa5qilXggu60lmQzFqvFv+1uOaeI2hs2wx+QZtxqGZzC0VCVWvbTQ52nA2UdUtnk8VezRMPMfmf7rOqPxDTv/aacLnI3RdLG2TbT52qtN4+naejI7Xe8HLOL765OZKdDBERKwd5ARQ3UL6YPbuOKOQahIFddnIX6rZ7dTNqCUDOjfJbMdrzJVDNjmNlkLNtYFo7M65Wfwj6PV5vvtT33FsmH50/YLEasnlCiJujYOgi2KCdf5msz1dPEvrXDDL6Csnjo+6m/44RzlluzcqMS5ZJFdrHEh68LIqtu+HCO+69Dyq4e22APq8wgN9kU6R8kikXSn/Ej0N/jOvomFCbkHskRl8xP1KgWFW0SMVDlaDCM4EKG812VgDWgSYOUnVhVpz65uOtg4Z8PrPI+BW4398dQYhD24D9EIPgvtmhNrHiEHouB46ElTGQgZBhtn6y9tL1sw=='</span>    v <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    v <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">if</span> v <span class="token operator">==</span> q<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You are right!'</span><span class="token punctuation">)</span>        <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'winer winer winnie dinner'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Do you think the encryption and decryption are the same?'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里了，我们直接进行逆向分析即可。</p><p><img lazyload src="/images/loading.svg" data-src="/not_a_like%202f29751282c1432cb3ff0308d17e8954/Untitled%204.png" alt="Untitled"></p><p>先是将我们的flag进行rsa加密，通过搜索，我们可以知道这里属于RSA的维纳攻击</p><p>这里上传一个关于解维纳攻击比较好的工具脚本。</p><p><a class="link" href="https://www.notion.so/">https://www.notion.so<i class="fas fa-external-link-alt"></i></a></p><p>进行RSA解密之后，就对我们的数据进行base64加密，对于加密后的数据传入encrypt中进行加密。</p><p><img lazyload src="/images/loading.svg" data-src="/not_a_like%202f29751282c1432cb3ff0308d17e8954/Untitled%205.png" alt="Untitled"></p><p>分析encrypt我们很容易可以看出是进行RC4加密。</p><p>对rc4加密之后，然后再进行了一次base64加密。</p><p>最后再对密文进行对比。</p><p>通过这个思路，我们进行逆向解出flag即可。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/31/baby-rust/"/>
      <url>/2023/03/31/baby-rust/</url>
      
        <content type="html"><![CDATA[<h1 id="Baby-rust"><a href="#Baby-rust" class="headerlink" title="Baby_rust"></a>Baby_rust</h1><p>打开ida进行分析，打开sting窗口进行分析。</p><p>查找字符串</p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%201.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%202.png" alt="Untitled"></p><p>这里应该就是我们的main函数了，进入函数进行分析。</p><p>rust语言，说是专注于安全的语言，确实，用ida进行反汇编，根本看不了，所以我们只能对汇编进行分析。</p><p>我们可以从这里发现，一串字符串之后，紧跟着的就是调用memcmp函数，我们就可以大致猜出，这里的字符串就是我们的密文。，前面有一条sub-1C(28)指令,为数据开辟28个空间，我们就可以推测出我们flag的长度为28</p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%203.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%204.png" alt="Untitled"></p><p>我们可以发现这里有一大长串的程序块</p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%205.png" alt="Untitled"></p><p>我们能发现，这些块的结构很相似都是先进行异或0x30然后再加上0xD3，然后后面再cmp1,2,3,4……，这里我们数一下，刚好28块，cmp也比较到了28.</p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%206.png" alt="Untitled"></p><p>这里我们可以知道，这里是对我们的flag进行了单字节加密。</p><p>我们进行动态调试可以发现，在对flag单字节加密之前，会先运行到这个块。</p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%207.png" alt="Untitled"></p><p>到这里，有两种方法，一种是进行动态调试，将其当做黑盒分析，输入多组数据，然后总结规律。</p><p>另一种就是手撕SSE2汇编代码。</p><p>这里我找到了一个大佬写对SSE2汇编得很好的总结，在此放个链接。</p><p><a class="link" href="https://blog.csdn.net/hksoobe/article/details/100638536">(49条消息) SSE2指令集_cvtsi2ss_hksoobe的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a></p><p>通过汇编代码，我们可以分析得出大致逻辑为，判断输入数据是否大于70，若大于70则减40，若小于70则加40.</p><p>到此处，我们可以写下我们的解题脚本。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span>        <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">40</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">0xd3</span><span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> <span class="token number">0X30</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此次，我们还是不能得出flag</p><p><img lazyload src="/images/loading.svg" data-src="/Baby_rust%20e260f95a1b13424885ade8b00efe4b2f/Untitled%208.png" alt="Untitled"></p><p>可以知道，我们对于Rust逆向出来的加密还是缺失了一些步骤，还有两个字节的数据没有出来。</p><p>正所谓，做逆向，十题九猜，这里我们就可以使用我们的猜猜大法，NOWa?BaCK,这里应该是他们的战队名nowayback，为Y或者y。R?ST，这里不出意料就是U，或者u，这样总共四种情况，分别试一下即可。</p><p>可得N K C T F { W L c o m E _ N O W a y B a C k _ R u S T }</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/30/pmkf/"/>
      <url>/2023/03/30/pmkf/</url>
      
        <content type="html"><![CDATA[<h1 id="PMKF"><a href="#PMKF" class="headerlink" title="PMKF"></a>PMKF</h1><p>将题目拖入ida中进行分析,进入此函数中进行分析.</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%201.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%202.png" alt="Untitled"></p><p>其中我们需要知道这个函数</p><h3 id="readfile-从指定的文件或输入-x2F-输出-I-x2F-O-设备读取数据。-如果设备支持，则读取发生在文件指针指定的位置。"><a href="#readfile-从指定的文件或输入-x2F-输出-I-x2F-O-设备读取数据。-如果设备支持，则读取发生在文件指针指定的位置。" class="headerlink" title="readfile:从指定的文件或输入/输出 (I/O) 设备读取数据。 如果设备支持，则读取发生在文件指针指定的位置。"></a>readfile:从指定的文件或输入/输出 (I/O) 设备读取数据。 如果设备支持，则读取发生在文件指针指定的位置。</h3><p>这里我们并没有发现到底是哪里读取了文件,我们动态调试,在push处下断点,发现断点不能断下,我们去找找,我们会发现这个.函数,在内存中读取一个名为,nk.ctf的文件,这样我们创建一个文件即可.</p><p>发现能够动态调试了.</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%203.png" alt="Untitled"></p><p>其他的逻辑就比较简单了.</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%204.png" alt="Untitled"></p><p>1处读取一个数据放在buffer中,然后判断,buffer大小.\</p><p>2处读入五个数据,放在v15中,可以直接提取出来nkman</p><p>3处将flag读取出来.</p><p>v11的值为,nkman的数据值之和.但是这里需要注意:v11的数据类型为char,而char的数据类型,存储的最大数据为512,超过512将会溢出,这里nkman的值为533因此会发生溢出,所以最终v11所存的值为21</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%205.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%206.png" alt="Untitled"></p><p>到此处为对我们的flag进行异或.v11.</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%207.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%208.png" alt="Untitled"></p><p>通过下面的数据,我们可以知道,这里是迷宫,我们写个脚本将迷宫打印出来.</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%209.png" alt="Untitled"></p><p>将路线走出来即可</p><p>但是,这里是对我们的数据进行加密了的,但是位移运算是不可逆的,我们用z3将其爆破出来</p><p><img lazyload src="/images/loading.svg" data-src="/PMKF%205242e5ff91b84dbb912b491512e3a707/Untitled%2010.png" alt="Untitled"></p><p>然后按照这个逻辑进行逆向即可,可以写出脚本.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding:utf-8</span><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'x%d'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># for i in range(0, 16):</span><span class="token comment">#     s.add(flag[i] &lt; 127)</span><span class="token comment">#     s.add(flag[i] &gt; 32)</span>v7 <span class="token operator">=</span> <span class="token number">0</span>n <span class="token operator">=</span> <span class="token number">0</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> v7 <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> x<span class="token punctuation">:</span>        s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>v7<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        n<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>    model <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    string <span class="token operator">=</span> <span class="token punctuation">[</span>model<span class="token punctuation">[</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>real <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"无解"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将得出的数据,异或一下,然后保存在nk.ctf中,将其用winhex将其二进制数据提取出来,这就是我们的flag</p><p>nkctf{056e6b6d616e4fef7eb0004415047000bea9eeb043aa}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/03/30/try-decrypt-me/"/>
      <url>/2023/03/30/try-decrypt-me/</url>
      
        <content type="html"><![CDATA[<h1 id="try-decrypt-me"><a href="#try-decrypt-me" class="headerlink" title="try_decrypt_me"></a>try_decrypt_me</h1><p>这里我们直接将文件放入jeb中进行分析，直接找到我们的mainactivity</p><p><img lazyload src="/images/loading.svg" data-src="/try_decrypt_me%20edb208d3b4a54080b0f29adb8ba7c0ee/Untitled.png" alt="Untitled"></p><p>按下tab键，进行反汇编</p><p><img lazyload src="/images/loading.svg" data-src="/try_decrypt_me%20edb208d3b4a54080b0f29adb8ba7c0ee/Untitled%201.png" alt="Untitled"></p><p>进入这个DES加密函数。</p><p><img lazyload src="/images/loading.svg" data-src="/try_decrypt_me%20edb208d3b4a54080b0f29adb8ba7c0ee/Untitled%202.png" alt="Untitled"></p><p>肉眼可见，这里是进行了aes加密，CBC模式，用PKCS5进行填充</p><p>对于这个填充方式，我找了一个大佬写了一篇很好的文章。</p><p>关于PKCS7,PKCS5,zore的填充方式</p><p><a class="link" href="https://www.jianshu.com/p/7b6f5aaa7680">iOS 实现对称加密多种填充方式(ANSIX923、ISO10126、Zero) - 简书 (jianshu.com)<i class="fas fa-external-link-alt"></i></a></p><p>这下，我们返回主函数分析逻辑，重点地方我将其标注出来了。</p><p><img lazyload src="/images/loading.svg" data-src="/try_decrypt_me%20edb208d3b4a54080b0f29adb8ba7c0ee/Untitled%203.png" alt="Untitled"></p><p>这里有个equal，在java中，这个就是一个比较函数，就是将我们加密后的密文与BxLHc1KruiH31I94W171oal+9olDzgBIjnK/J1Db0IUyi+MbI38+nw62ejCPShRB，进行比较，我们可以知道这个就是我们的密文了。</p><p>intput 就是我们输入的flag了。</p><p>这个vector2就是我们CBC的偏移量了。但是这个我们发现，偏移量调用了一个函数。</p><p><img lazyload src="/images/loading.svg" data-src="/try_decrypt_me%20edb208d3b4a54080b0f29adb8ba7c0ee/Untitled%204.png" alt="Untitled"></p><p>可以发现，我们的偏移量是将reversehavemagic  用md5进行加密后的数据。</p><p>对此，我们进行md5加密即可得出我们的偏移量，但是这里有个问题。</p><p>去网上搜解密时，我们可以发现，md5有16位大，小写，和32位大，小写，我们应该怎么选勒？两种，一个是挨个挨个的试，另外一个，通过它的加密进行判断。</p><p>对于MD5加密，下面用JAVA写md5的加密函数，我们只需要对其进行对照即可，判断出来为32位小写。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span><span class="token operator">**</span> <span class="token operator">*</span> 将字符串转换为MD5 <span class="token operator">*</span><span class="token operator">/</span> public <span class="token keyword">class</span> <span class="token class-name">ParseMD5</span> <span class="token punctuation">{</span> public static String parseStrToMd5L32<span class="token punctuation">(</span>String <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">//</span> 将字符串转换为<span class="token number">32</span>位小写MD5  String reStr <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span> MessageDigest md5 <span class="token operator">=</span> MessageDigest<span class="token punctuation">.</span>getInstance<span class="token punctuation">(</span><span class="token string">"MD5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> byte<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token builtin">bytes</span> <span class="token operator">=</span> md5<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>getBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StringBuffer stringBuffer <span class="token operator">=</span> new StringBuffer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>byte b <span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token builtin">int</span> bt <span class="token operator">=</span> b<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bt <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> stringBuffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> stringBuffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>toHexString<span class="token punctuation">(</span>bt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> reStr <span class="token operator">=</span> stringBuffer<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>NoSuchAlgorithmException e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> reStr<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">//</span> 将字符串转换为<span class="token number">32</span>位大写的MD5public static String parseStrToMd5U32<span class="token punctuation">(</span>String <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>String reStr <span class="token operator">=</span> parseStrToMd5L32<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>reStr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>reStr <span class="token operator">=</span> reStr<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> resStr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">//</span> 将字符串转换为<span class="token number">16</span>位小写的MD5public static String parseStrToMd5L16<span class="token punctuation">(</span>String <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>String reStr <span class="token operator">=</span> paseStrToMd5L32<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>reStr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>reStr <span class="token operator">=</span> reStr<span class="token punctuation">.</span>subString<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> reStr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">//</span> 将字符串转换为<span class="token number">16</span>位大写的MD5public static String parseStrToMd5U16<span class="token punctuation">(</span>String <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>String reStr <span class="token operator">=</span> parseStrToMd5L32<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>reStr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>reStr <span class="token operator">=</span> reStr<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>subString<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> reStr<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，万事俱备只欠东风，将我们得出的数据进行解密即可，由于本题未对AES进行魔改，我们可以用在线网站进行解</p><p><img lazyload src="/images/loading.svg" data-src="/try_decrypt_me%20edb208d3b4a54080b0f29adb8ba7c0ee/Untitled%205.png" alt="Untitled"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDA操作总结</title>
      <link href="/2023/02/26/ida-zong-jie/"/>
      <url>/2023/02/26/ida-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="ida操作"><a href="#ida操作" class="headerlink" title="ida操作"></a>ida操作</h1><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p><strong>1、反汇编：</strong>Tab\F5</p><p><strong>2、IDA字符串表：</strong>shift+F12;或者直接找窗口</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230226175251517.png" alt="image-20230226175251517"></p><p>打开string窗口后，我们可以按Ctrl+F来调出搜索</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230226175638025.png" alt="image-20230226175638025"></p><p>在里面输入你想要查找的字符串，如果有原数据，就能成功找到。</p><p>双击数据，就能进入对应的内存</p><p><strong>3、G键</strong>。打开地址窗口</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228202202438.png" alt="image-20230228202202438"></p><p><strong>4、X键。</strong>查看交叉引用，也就是查看有那些地方调用了这个函数</p><p>点击即可进入对于调用的地方</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228202326381.png" alt="image-20230228202326381"></p><p><strong>5、重命名符号。</strong>将选中的名称进行修改，以便于阅读分析</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228202607658.png" alt="image-20230228202607658"></p><p>**6、对于数据处理上.**IDA的储存方式为小端序，例如，0XB1A33454在内存中的存储就是54, 34, A3, B1.</p><p><strong>7、U键。</strong>在某地址上按下U，就会使得IDA取消对在部分地址的解释。</p><p>按U前</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228203508608.png" alt="image-20230228203508608"></p><p>按U后</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228203538866.png" alt="image-20230228203538866"></p><p><strong>8、C键。</strong>将地址标记为代码，并且进行反汇编。也算是和U键互逆。</p><p>前</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228203538866.png" alt="image-20230228203538866"></p><p>后</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228203746253.png" alt="image-20230228203746253"></p><p><strong>9、P键。</strong>比如刚才，我们将地址按下C分析后，前面为红色部分，这时我们不能进行反汇编，而p键的作用就是创建函数，让其成为一个可反编译的函数（结构需完整）。</p><p>按下p后</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230228204129463.png" alt="image-20230228204129463"></p><h4 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h4><p>1、F7.单步步过。执行一条语句但不进入函数</p><p>2、F8.单步步入。执行一条指令，会进入函数内部。</p><p>3、Ctrl+F7.执行到返回。执行到函数的返回指令。一般用于快速跳出当前函数。</p><p>4、F4。执行到光标下停下来。将光标悬停在想要执行到的代码，然后按下F4,随后程序就会跳到指向的代码处，一般用于快速跳转到想要执行的代码处。</p><p>5、Ctrl+N(Set IP).强制代码从光标处开始执行。一般用于想重复调试某一块代码时使用。比如，分析一个加密前后的数据，寻找规律。这个时候，我们需要多次输入。按照平常，我们就需要多次重新调试，这样就比较麻烦，而使用set ip就能节省很多时间。</p><p>6、模块窗口（一般安卓用得比较多）。打开方式——菜单–【debugger】–[debuger windows]–[module list]</p><p>7、硬件断点。硬件断点不会修改内存数据。一般情况下，像脱壳，自解密，我们设置一般断点在其之上，会破坏数据。</p><p>下硬件断点的方法：首先先下一个普通断点，然后在普通断点处按下鼠标右键，然后点击edit breakpoint ，然后勾选hardware，就将我们的断点转换为了硬件断点。</p><p><img lazyload src="/images/loading.svg" data-src="/IDA%E6%80%BB%E7%BB%93/image-20230304161001692.png" alt="image-20230304161001692"></p><p>其中下面的，read：表示断点地址被命中时被读取。writer:断点地址被写入时命中。execute:断点地址被执行时命中。</p><p>8、trace分析.打开方法：打开菜单项【debugger】–【tracing】–【tracing options】配置我们的trace。配置好之后，在程序的头部设置一个断点，然后命中断点。再打开进行选择。然后继续运行程序，便成功trace.</p><p><img lazyload src="/images/loading.svg" data-src="/IDA%E6%80%BB%E7%BB%93/image-20230304170248917.png" alt="image-20230304170248917"></p><p>一般用于追踪，混淆，花指令之类。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023—VNCTF-re-PZGalaxy</title>
      <link href="/2023/02/26/2023-vnctf-re-pzgalaxy/"/>
      <url>/2023/02/26/2023-vnctf-re-pzgalaxy/</url>
      
        <content type="html"><![CDATA[<h1 id="PZGalaxy"><a href="#PZGalaxy" class="headerlink" title="PZGalaxy"></a>PZGalaxy</h1><p>这道题是用js写的代码</p><p>用浏览器打开 开发者工具查看源码</p><p><img lazyload src="/images/loading.svg" data-src="/Untitled.png" alt="Untitled"></p><p>![Untitled 3](/Untitled 3.png)</p><p>源码很有特点，就是进行rc4加密。</p><p>![Untitled 2](/Untitled 2.png)</p><p>这里分析一下我们就可以知道，data和enc都传入了Leaf中进行加密，我们就可以推测出data,就是进行加密的密钥。</p><p>后面的一行代码，分别是判断flag前面四个字符，和data前面的四个字符，并且我们可以知道，data的长度为8.</p><p>![Untitled 1](/Untitled 1.png)</p><p>知道key的前四个字符，也知道key的前四个字符，自然想到对key进行爆破。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h&gt;</span></span><span class="token comment">//将数字转换为字符串</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">ccc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> a <span class="token operator">/</span> x<span class="token punctuation">;</span>        key<span class="token punctuation">[</span>y<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        a <span class="token operator">%=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> key<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//s盒的初始化，生成密钥流</span><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span> <span class="token comment">// 对S盒进行初始化</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key<span class="token punctuation">[</span>i <span class="token operator">%</span> Len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换s[i]和s[j]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//rc4加密</span><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 交换s[x]和s[y]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        t <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^=</span> s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//rc4执行函数</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">rc4_run</span><span class="token punctuation">(</span><span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> s2<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    key<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token function">rc4_init</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">// 用s2[i]暂时保留经过初始化的s[i]，很重要的！！！</span>    <span class="token punctuation">{</span>        s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pData<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>arr<span class="token punctuation">,</span> <span class="token operator">*</span>key<span class="token punctuation">;</span><span class="token comment">//注意，最好将不变的数据放入静态数据区，以保障其值</span>    <span class="token keyword">static</span> <span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"flag"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span> <span class="token number">0x8</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0x6</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x7c</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 密文</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20230000</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token comment">//遍历后四为可能出现的值，进行爆破</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">20239999</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">512</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        key <span class="token operator">=</span> <span class="token function">ccc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token function">rc4_run</span><span class="token punctuation">(</span>pData<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//寻找满足条件的，数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">rc4_run</span><span class="token punctuation">(</span>pData<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出flag：flag{HitYourSoulAndSeeYouInTheGalaxy}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第十二章 并发编程</title>
      <link href="/2023/02/09/csapp-di-shi-er-zhang-bing-fa-bian-cheng/"/>
      <url>/2023/02/09/csapp-di-shi-er-zhang-bing-fa-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><p>什么是并发？我们可以这样理解就是同时运行，做多件事情，比如，我们在看剧的同时，吃着薯片，像这种，在时间上重叠的现象，就是并发、</p><p><strong>并发的作用</strong> </p><ul><li><p>访问慢速i\o设备。访问慢速的i\o设备的时候，内核可以同时运行一些其他的数据，来等待。</p></li><li><p>与人进行交互。我们一般打开电脑，都会同时运行好几个程序。</p></li><li><p>服务器服务多个网络客户端。</p></li><li><p>在多核机器上进行并行计算。</p></li><li><p>多线程运行。</p><h3 id="基于进程的并发编程"><a href="#基于进程的并发编程" class="headerlink" title="基于进程的并发编程"></a>基于进程的并发编程</h3><h4 id="基于进程的并发服务器"><a href="#基于进程的并发服务器" class="headerlink" title="基于进程的并发服务器"></a>基于进程的并发服务器</h4><p>![image-20230226165229824](csapp 第十二章 并发编程/image-20230226165229824.png)</p></li></ul><p>![image-20230227143648282](csapp 第十二章 并发编程/image-20230227143648282.png)</p><p>优点:具有共享文件表，但并不共享用户地址空间，进程有 独立的地址空间。这样使得一个进程不可能不小小覆盖另一个进程调出虚拟内存。</p><p>缺点：独立的地址空间使得进程之间的通信变得更加困难，从而造成它们往往比较慢，控制进程和IPC的开销比较大。</p><h4 id="关于IPC的解释"><a href="#关于IPC的解释" class="headerlink" title="关于IPC的解释"></a>关于IPC的解释</h4><p>![image-20230227144750118](csapp 第十二章 并发编程/image-20230227144750118.png)</p><h3 id="基于线程的并发编程"><a href="#基于线程的并发编程" class="headerlink" title="基于线程的并发编程"></a>基于线程的并发编程</h3><p>线程与进程的<strong>区别</strong>：1、线程运行的消耗比进程的消耗要小。2、对于进程来说，创建一个新的进程，新和旧的关系为父子关系。而在同一个进程中创建线程池，它们之间的关系都为对等，就算是主线程，也仅仅是代表它是进程中第一个运行的线程。</p><p>线程池的一个<strong>特点</strong>就是，一个线程可以杀死它的任何对等的线程，或者等待对等线程终止。而且和进程一样，对等线程都能够读写相同的共享数据。</p><h4 id="分离线程"><a href="#分离线程" class="headerlink" title="分离线程"></a>分离线程</h4><p>在任何一个时间点上，线程都是可结合或者是可分离的。其中可结合线程能够被其他线程回收和杀死，在被其他的线程回收之前，它的内存资源，是不会被释放的。而分离线程是不能够被其他线程回收或者杀死的。它的内存资源，在它终止时由系统自动释放。</p><p>![image-20230228125255617](csapp 第十二章 并发编程/image-20230228125255617.png)</p><h3 id="多线程程序中的共享变量"><a href="#多线程程序中的共享变量" class="headerlink" title="多线程程序中的共享变量"></a>多线程程序中的共享变量</h3><h4 id="线程内存模型"><a href="#线程内存模型" class="headerlink" title="线程内存模型"></a>线程内存模型</h4><p> 一组线程并发的运行在一个进程的运行上下文中。每个线程都有他自己独立的线程上下文，也就是运行环境。每个线程共享进程上下文的剩余部分。包括：用户的虚拟地址空间等。但是线程的寄存器是不会进行共享的。</p><h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>四个线程不安全的函数类</p><p><strong>加锁–复制技术</strong></p><ul><li>![image-20230301205637003](csapp 第十二章 并发编程/image-20230301205637003.png)</li></ul><p><strong>加锁–复制技术的缺点</strong></p><p>![](csapp 第十二章 并发编程/image-20230301205824372.png)</p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>信号量有一种潜在的运行时错误，叫死锁。指的是一组线程被阻塞了，等待一个永远不会为真的条件。打个比方，一套工具分给几个人使用，每个人将活干完之后，才会将工具归还，按照正常来管理，这些分工具给不同的的人使用，然后等他使用完后，再给另一个人，但是有些时候意外情况会发生，比如，工具有a,b,c，工人有甲乙两人。甲用了工具a,和工具c，乙正在运用工具b,这个时候，甲需要用工具b才能继续工作下去，甲于是就等着乙工作完，然后拿工具。而乙工作到一半，需要a，工具才能继续工作下去，所以乙就等着甲工作完拿a，于是乎，两个都在等待另一方工作完，两人都不进行工作，这样就形成了死锁。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hgame-2023-re-kmusic</title>
      <link href="/2023/02/06/hgame-2023-re-kmusic/"/>
      <url>/2023/02/06/hgame-2023-re-kmusic/</url>
      
        <content type="html"><![CDATA[<h1 id="kmusic"><a href="#kmusic" class="headerlink" title="kmusic"></a>kmusic</h1><h2 id="链接：https-pan-baidu-com-s-14vG-N5FLMpHKbEf9cfEzvA-pwd-etvs"><a href="#链接：https-pan-baidu-com-s-14vG-N5FLMpHKbEf9cfEzvA-pwd-etvs" class="headerlink" title="链接：https://pan.baidu.com/s/14vG_N5FLMpHKbEf9cfEzvA?pwd=etvs"></a>链接：<a class="link" href="https://pan.baidu.com/s/14vG_N5FLMpHKbEf9cfEzvA?pwd=etvs">https://pan.baidu.com/s/14vG_N5FLMpHKbEf9cfEzvA?pwd=etvs<i class="fas fa-external-link-alt"></i></a></h2><h2 id="提取码：etvs"><a href="#提取码：etvs" class="headerlink" title="提取码：etvs"></a>提取码：etvs</h2><p>打开找道题，我们可以知道这个是.net编写的程序，我们用dnSpy打开（64位）进行分析。</p><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled.png" alt="Untitled"></p><p>我们可以看到这里对data进行了加密，我们运行到data结束，进入二进制界面。</p><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%201.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%202.png" alt="Untitled"></p><p>这里发现MZ头，可知是一个二进制文件。我们用winhex，dump出来。</p><p>将dump出来的文件放入dnSpy进行分析。</p><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%203.png" alt="Untitled"></p><p>可以发现出现了一个大if,然后里面进行了限制计算。到这里我们可知道用z3进行求解。</p><p>用z3进行创建求解即可。</p><h1 id="关于z3"><a href="#关于z3" class="headerlink" title="关于z3"></a>关于z3</h1><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%204.png" alt="Untitled"></p><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%205.png" alt="Untitled"></p><h3 id="一般的模板："><a href="#一般的模板：" class="headerlink" title="一般的模板："></a>一般的模板：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'x%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 将flag限制为可见字符</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">127</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token comment"># 中间添加程序的加密算法</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>    model <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    string <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>model<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>real<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于本道题，我们进行解题：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">246</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">243</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">172</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">171</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">179</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">162</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">236</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">]</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>num <span class="token operator">=</span> <span class="token punctuation">[</span>BitVec<span class="token punctuation">(</span><span class="token string">'x%d'</span> <span class="token operator">%</span> i<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#</span><span class="token comment"># for i in range(47):</span><span class="token comment">#     s.add(num[i] &lt;= 127)</span><span class="token comment">#     s.add(num[i] &gt;= 32)</span><span class="token comment"># 中间添加程序的加密算法</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">52296</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">26211</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">11754</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">41236</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">63747</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">52714</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10512</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">12972</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">45505</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">21713</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">59122</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">12840</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">21087</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12702282</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25228</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">20699</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">8158</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">65307</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">30701</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">47555</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2557</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">49055</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">7992</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">57465</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">57426</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">13299</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">50966</span> <span class="token operator">==</span> <span class="token number">9946829</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64801</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">60698</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">40853</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">54907</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">29882</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">13574</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">21310</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">47366</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">41784</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">53690</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">58436</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">15590</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">58225</span> <span class="token operator">==</span> <span class="token number">2372055</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61538</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">17121</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">58124</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8186</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">21253</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">38524</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48323</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">20556</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">56056</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">18568</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">12995</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">39260</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">25329</span> <span class="token operator">==</span> <span class="token number">6732474</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">42567</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">17743</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">47827</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10246</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">16284</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">39390</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">11803</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">60332</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">18491</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">4795</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25636</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">16780</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">62345</span> <span class="token operator">==</span> <span class="token number">14020739</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10968</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">31780</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">31857</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">61983</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">31048</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">20189</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">12337</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">25945</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">7064</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">25369</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">54893</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">59949</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">12441</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">14434062</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16689</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">10279</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">32918</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">57155</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">26571</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">15086</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">22986</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">23349</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">16381</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">23173</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">40224</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">31751</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">8421</span> <span class="token operator">==</span> <span class="token number">7433598</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">28740</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">64696</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">60470</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">14752</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1287</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">35272</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">49467</span> <span class="token operator">+</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">33788</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">20606</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">44874</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">19764</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">48342</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">56511</span> <span class="token operator">==</span> <span class="token number">7989404</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">28978</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">23120</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">22802</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">31533</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">39287</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48576</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">28542</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">43265</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">22365</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">61108</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2823</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">30343</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">14780</span> <span class="token operator">==</span> <span class="token number">3504803</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">22466</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">55999</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">53658</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">47160</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">12511</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">59807</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">46242</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3052</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">25279</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token number">30202</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">22698</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">33480</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">16757</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">11003580</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">57492</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">13421</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">13941</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">48092</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">38310</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">9884</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">45500</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">19233</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">58274</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">36175</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">18568</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">49694</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">9473</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">25546210</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">23355</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">50164</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">34618</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">52703</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">36245</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">46648</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">4858</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">41846</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">27122</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">42058</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">15676</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">31863</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">62510</span> <span class="token operator">==</span> <span class="token number">11333836</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">30523</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">7990</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">39058</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">57549</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">53440</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">4275</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">48863</span> <span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">55436</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">2624</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">13652</span><span class="token punctuation">)</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">62231</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">19456</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">13195</span> <span class="token operator">==</span> <span class="token number">13863722</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>text <span class="token operator">=</span> <span class="token number">47</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> num<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">)</span>  <span class="token comment"># 添加约束条件,解出来的满足的num有很多，但是我们要的是能够解出可见字符的num，</span>                          <span class="token comment">#因此需要添加约束条件来解出可见的flag</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>  <span class="token comment"># 检测是否有解</span>    result <span class="token operator">=</span> s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num<span class="token punctuation">:</span>  <span class="token comment"># 因为最后得出的是等式，先遍历 temp，把 temp 的每个依次赋给 i</span>        flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 然后找到每个 temp 对应的解，附加到空列表的后面</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'无解'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload src="/images/loading.svg" data-src="/kmusic%20a07251f804844b97b7d16b340f9bf9d2/Untitled%206.png" alt="Untitled"></p><p>这道题比较特殊的地方就是这里。由于我们z3是限制求解，解有很多，z3只会给我们一个，我们的限制越多，越接近准确答案。因而这步的原因就是对我们解出的num再解出的flag进行限制，来确保我们num解出来的flag都是可见字符。</p><p>可得num=[236, 72, 213, 106, 189, 86, 62, 53, 120, 199, 15, 93, 133]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">246</span><span class="token punctuation">,</span><span class="token number">124</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">243</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">172</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">171</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">,</span><span class="token number">179</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">216</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">162</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">236</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">212</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">]</span>text <span class="token operator">=</span><span class="token string">""</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    text <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出flag: hgame{z3_1s_very_u5eful_1n_rever5e_engin3ering}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第十一章 网络编程</title>
      <link href="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/"/>
      <url>/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="客户端—服务器编程模型"><a href="#客户端—服务器编程模型" class="headerlink" title="客户端—服务器编程模型"></a>客户端—服务器编程模型</h3><p>一个应用是由一个服务器进程和一个或者多个客户端进程组成。一对多的关系。</p><p>这个模型的基本操作的基本模型就是：</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/image-20221231210558360.png" alt="image-20221231210558360"></p><p>举个例子，当我们在去b站看视频，我们看到了一个比较吸引人的封面，想点进去一探究竟。我们点击视频，然后屏幕上播放视频这个过程就是我们客户端–服务器模型。</p><p>1、客户端发送请求。就是我们点击视频，准备播放视频的请求。</p><p>2、服务器处理请求。服务器（一个程序）接收我们要播放视频的请求，然后从库中取出这个视频。</p><p>3、服务器发送响应。服务器把这个视频发送给我们。</p><p>4、客户端处理响应。我们的电脑/手机的软件，收到这个视频，然后播放在屏幕上。</p><p><strong>一台主机上可以同时运行许多不同的客户端和服务器，而且一个客户端和服务器的事务可以在同一台或者不同的主机上。</strong></p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li><p>从物理上来说，网络是一个按照远近组成的层次系统。最底层是LAN(局域网)，范围只有一栋楼或者校园内。目前，最流行的局域网技术是以太网</p></li><li><p>一个以太网段由一些电缆和一个叫集线器的小盒子组成</p></li><li><p>使用电缆和网桥的小盒子，可以组成一个较大的局域网，我们称之为桥接以太网。</p></li></ul><p>多个不兼容的局域网可以通过路由器进行连接，组成一个internet(互联网)。路由器可以用来由各种局域网和广域网构建互联网络。</p><p>互联网的一个重要的特性就是<em><strong>能由采用完全不同和不兼容技术的各种局域网和广域网组成</strong></em> 。</p><p>互联网兼容如此不同的各种局域网/广域网，是通过协议软件来实现的。</p><p> <strong>全球IP因特网</strong></p><p> 在全球因特网下，每个主机运行实现的都是TCP/IP协议（transmission control protocol/internet protocol,暨传输控住协议/互联网网络协议）</p><ul><li>IP地址结构中存放的地址总是以（大端法）网络字节顺序存放的，我们的主机的字节序为小端法。</li></ul><p><strong>连接</strong> </p><p>因特网客户端和服务器通过在连接上发送和接收字节流来通信，连接是点对点的。这里我们就需要知道一个东西。</p><p><em>套接字</em> 是连接的一个端点。每个套接字都有相应的套接字地址，由一个因特网地址和一个16位的整数端口组成，暨地址+端口。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/image-20230101210029557.png"></p><p>​    像这样我们的手机的app与b站的服务器的就对接上了。</p><ul><li>我们的客户端和服务器端使用socket函数来一个套接字描述符</li><li>客户端通过connect函数来建立和服务器的连接。</li><li>使用bind函数来告诉内核将addr中的服务器套接字地址和套接字描述符sockfd联系起来</li><li>服务器用listen函数来对端口进行监听，进而接受来自客户端的连接请求。</li><li>服务器通过调用accept函数来等待来自客户端的连接请求。</li></ul><p><img lazyload src="/images/loading.svg" data-src="/2022/12/31/csapp-di-shi-yi-zhang-wang-luo-bian-cheng/image-20230101211716102.png" alt="image-20230101211716102"></p><h3 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h3><p>web客户端和服务器之间的交互作用的是一个基于文本的应用级协议—–http(超文本协议)</p><ul><li>URL就是我们俗称的网址。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第八章 异常控制流</title>
      <link href="/2022/12/30/csapp-di-ba-zhang-yi-chang-kong-zhi-liu/"/>
      <url>/2022/12/30/csapp-di-ba-zhang-yi-chang-kong-zhi-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h3 id="异常的类别"><a href="#异常的类别" class="headerlink" title="异常的类别"></a>异常的类别</h3><p>异常（Exception）都是运行时的。编译时产生的不是异常，而是错误（Error）。</p><p>异常分为四类：1，中断。2、陷阱。3、故障、4、终止。</p><p>异步异常是用外部的设备，输入输出设备中的事件产生的。同步异常是执行一条指令的产物。</p><h4 id="1、中断"><a href="#1、中断" class="headerlink" title="1、中断"></a>1、中断</h4><p>中断是异步发生的，是来自外部设备的结果。（硬件中断不是由任何一条专门的指令造成的）。</p><p>硬件中断的异常处理程序被称为<strong>中断处理程序</strong>。</p><p>这个中断，举个例子，比如我们生活中，家庭中有个电器的总闸，总闸里面有保险丝，当电流过大时，会使保险丝熔断，发生跳闸，这个时候，传输到我们家里面的电流，就中断了，需要我们排除异常之后，才能把闸拉上去。</p><h4 id="2、陷阱和系统调用"><a href="#2、陷阱和系统调用" class="headerlink" title="2、陷阱和系统调用"></a>2、陷阱和系统调用</h4><p>陷阱是有意的异常，是执行一条指令的结果。属于同步异常。陷阱的一个重要用途是在用户程序和内核提供一个像过程一样的接口，叫做<strong>系统调用</strong>。</p><p>用户程序（就是如我们的鼠标点击的运行的程序），需要经常向内核请求服务，比如读取一个文件，加载一个新的程序，或者终止当前的程序。为了允许这些请求，处理器提供了一条特殊的指令<strong>syscall</strong> .执行sycall指令会导致一个到异常处理程序的陷阱，从而调用适当的内核程序。</p><p>系统调用和普通函数调用是一样的，但是它们的实现有很大的不同，普通函数运行在用户模式中，而系统调用运行在内核模式中。</p><h4 id="3、-故障"><a href="#3、-故障" class="headerlink" title="3、 故障"></a>3、 故障</h4><p>由错误情况引起，它可能被故障处理程序修正。</p><h4 id="4、终止"><a href="#4、终止" class="headerlink" title="4、终止"></a>4、终止</h4><p>发生不可恢复的致命错误时，会发生终止异常，属于同步异常。通常是一些硬件错误</p><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h4><p>比如好几个程序运行,A程序运行一会儿,然后B程序运行一会儿,然后再C程序运行一会儿,这样交替运行,直到全部程序运行完.它提供了一个假象,好像我们的程序单独的占用处理器.</p><p><strong>关键点就在于进程是轮流使用处理器的,每个进程执行它的流的一部分,然后被”抢占”,暂时挂起,然后轮到其他的进程</strong></p><h4 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h4><p>一个逻辑流的执行在时间上与另一个流重叠,称为<strong>并发流</strong> ,这两个流被称为并发的运行.</p><p>多个流并发的执行的现象被称为<strong>并发</strong> </p><p>一个进程和其他进程轮流运行被称为<strong>多任务</strong> </p><p>一个进程执行它的控制流的一部分的每一段时间叫做<strong>时间片</strong> ,因而多任务也叫做<strong>时间分片</strong> </p><h4 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h4><p>处理器通过一个控制寄存器中的一个模式位来提供这种功能,当设置了模式位时,进程运行就运行在了内核模式中.这时,该进程就可以执行指令集的任何指令,并且可以访问系统中的任何位置.因此内核模式可以被称为超级用户模式.</p><p>在用户模式下,进程不允许执行特权指令,和直接引用地址空间中内核区的代码和数据,这样的任何尝试都会导致致命的保护故障.用户程序必须通过系统调用接口间接的访问内核代码和数据.</p><p>运行应用程序代码的进程初始时是在用户模式中的,进程从用户模式变为内核模式的唯一方法是通过诸如中端,故障或者陷入系统调用的异常.当异常发生时控制传递到异常处理程序,处理器将其从用户模式变成内核模式.</p><p>当程序返回到应用程序代码时,处理器就把模式从内核模式切换回用户模式.</p><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>什么是上下文切换呢？上下文切换就是内核重新启动一个暂时休眠的进程所需的状态，它由一些对象的值组成，包括通用目的寄存器，浮点寄存器，程序计数器，用户栈，状态寄存器，各种内核数据结构，比如进程表，页表，等等</p><p>进程在执行时，内核可以决定是否让当前进程运行，并让其他休眠的进程开始运行。这个决策就叫做<strong>调度</strong> ，由内核中调度器代码处理。当内核选择一个新的进程进行运行的时候，我们就称其为内核调度了这个进程，在这个过程中内核使用上下文切换机制来控制两个进程的休眠运行。</p><p>如果系统调用因为等待一个事件而发生阻塞，那么内核可以让当前进程休眠，然后切换到另一个进程。可以使用sleep系统调用，显式的请求让调用程序进行休眠。</p><p>如图就是两个进程进行切换的表示。</p><p>![image-20230219100641275](/../csapp 第八章 异常控制流/image-20230219100641275.png)</p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><h4 id="1获取进程ID"><a href="#1获取进程ID" class="headerlink" title="1获取进程ID"></a>1获取进程ID</h4><p>每一个进程都有一个唯一正数的进程ID（PID）</p><h4 id="2、创建和终止进程"><a href="#2、创建和终止进程" class="headerlink" title="2、创建和终止进程"></a>2、创建和终止进程</h4><p>我们可以认为进程总是存在三种状态：</p><ul><li>运行。</li><li>停止。进程的执行被挂起（休眠）</li><li>终止。进程永远的停止，不再执行。1、收到终止信号。2、从主程序返回。3、调用exit函数。</li></ul><p><strong>父进程可以通过调用fork函数来创建一个子进程（也就是在进程中再创建一个进程）</strong></p><p>fork函数创建进程的时候 的一些特点：</p><ul><li><p>调用一次，返回两次。</p></li><li><p>并发进行。</p></li><li><p>相同但是独立的地址空间。它们进程的地址空间是相同的，但是因为父进程和子进程是独立的进程，它们有着自己的私有空间。</p></li><li><p>共享文件。因为子进程会继承父进程大部分东西。相似但是有区别。</p><p><img lazyload src="/images/loading.svg" data-src="/image-20230226154844867.png"></p></li></ul><h4 id="3、进程休眠"><a href="#3、进程休眠" class="headerlink" title="3、进程休眠"></a>3、进程休眠</h4><p>一般的，我们运用sleep函数将一个进程挂起指定的一段时间</p><h4 id="4、回收子进程"><a href="#4、回收子进程" class="headerlink" title="4、回收子进程"></a>4、回收子进程</h4><p>当一个进程由于某种原因终止的时候，内核并不会立即将它从系统中清除，而是保持在一种已终止的状态中，直到被父进程回收。一个终止了但是还未被回收的进程被称为僵死进程，虽然他们没有运行，但是它们仍然会消耗系统的内存资源。一般我们用waitpid函数来等待它的子进程终止或者停止。</p><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>信号的作用就是通知进程系统中发生的某种类型的事件。每种信号类型都对应着某种系统事件，当发生了一个异常，就会通知用户进程。</p><p><strong>信号表</strong> </p><p><img lazyload src="/images/loading.svg" data-src="/image-20230226162021483.png" alt="image-20230226162021483"></p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第七章 链接</title>
      <link href="/2022/12/27/csapp-di-qi-zhang-lian-jie/"/>
      <url>/2022/12/27/csapp-di-qi-zhang-lian-jie/</url>
      
        <content type="html"><![CDATA[<p> 正如其名  链接就是将各种代码和数据片段收集组合成一个整体的过程</p><p>链接器的一个重要的用处就是进行分离编译。这样我们就不用将一个大型的项目写成一个非常大的源文件，我们可以将它分解许多小的部分。也就是说一个可以项目拆分，让不同的人负责不同的模块，进行分工。另一方面维护起来也更加方便，只需对相应模块进行调试和修改就行了。</p><p><strong>学习链接器我们可以干什么？</strong> </p><ul><li>帮助我们理解构建大型文件中出现的一些错误。</li><li>帮助我们避免一些危险的编译错误。</li><li>帮助我们理解语音的作用域规则是如何实现的。比如，全局变量与局部变量的区别。</li><li>帮助我们理解一些重要的系统概念。比如，虚拟内存，分页，内存映射。</li><li>让我们更好的利用共享库</li></ul><h3 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h3><p>静态链接器以一组可重定位目标文件和命令行参数作为输入，生成一个完全的链接的，可以加载和运行的执行目标文件作为输出 。简单来说就是，把我们的程序由不可执行变成了可执行文件。在此过程中链接器需要完成的任务：</p><ul><li><p><strong>符号解释</strong>  将我们的数据，比如全局变量，静态变量等，属于static声明的数据，用链接器自己的符号来关联起来</p><blockquote><p><strong>符号</strong> 就是我们平常声明的那些东西比如int  a,char arr[5],等等</p><p><strong>符号表</strong> 将符号整合在一起就形成了符号表。</p></blockquote></li><li><p><strong>重定位</strong>  编译器与汇编器生成从0开始的地址，链接器将先前关联起来的符号，再与内存关联起来，就重定位了这些数据，然后再修改所有对这些符号的引用，使得它们指向内存的这个位置。</p></li></ul><p>总得来说，链接器就是将我们程序的各种块连接起来，然后再确定这些块的运行位置，并且定位这些块。</p><h3 id="目标文件"><a href="#目标文件" class="headerlink" title="目标文件"></a>目标文件</h3><p>目标文件可以分为三种：</p><ul><li>可重定位目标文件。 二进制代码和数据，在编译的时候可以与其他可重定位目标文件合并在一起，形成一个可执行目标文件。</li><li>可执行目标文件。包含二进制代码和数据，可以直接复制到内存中执行。</li><li>共享目标文件。特殊的可重定位目标文件，可以在加载或者运行时被动态的加载内存并链接。（也就是我们常说的动态链接库那些）</li></ul><h2 id="可重定位目标文件"><a href="#可重定位目标文件" class="headerlink" title="可重定位目标文件"></a>可重定位目标文件</h2><p>​      一个可重定位文件的组成如图所示：</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/27/csapp-di-qi-zhang-lian-jie/image-20221229165138290.png" alt="image-20221229165138290"></p><p><strong>elf头</strong>：描述了该文件的系统字的大小与字节顺序，还有帮助链接器语法分析和解释目标文件的信息。包括， elf头的大小，目标文件的类型（上面提到的三种），机器类型（X86-64）,字节头部表的文件偏移，节头部表中条目的大小和数量。</p><p><strong>.text</strong>  :已经编译程序的机器代码。</p><p><strong>.rodata</strong> :只读数据，如在printf语句中的格式串和开关语句的跳转表。</p><p><strong>.data</strong> ：已经初始化的全局和静态变量。而局部变量保存在栈中，没出现在.data和.bss区中。</p><p><strong>.bss</strong> :未初始化的全局和静态变量，和所有被初始为0的全局或者静态变量。在目标文件中这个节不占实际的空间，仅占位符。</p><p>（将目标文件格式区分为已初始化和未初始化变量是为了空间效率，为初始化变量不需要占用任何实际的磁盘空间。运行时，在内存中分配这些变量，初始值为0）</p><p><strong>.symtab</strong> 一个 符号表。存放着程序中定义和引用的函数和全局变量的信息。（每个可重定位目标文件在.symtab中都有一张符号表）</p><p><strong>rel.text</strong> : .text节中位置的列表，当链接器把这个目标文件和其他文件组合在一起时，需要修改这些位置。一般的，任何调用外部函数或者引用全局变量的指令都需要需改。（后面会讲，更好理解一些）</p><p><strong>rel.data</strong> : 被模块引用或定义的所有全局变量的重定位信息。一般的，任何已被初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义的地址，都需要被修改。(后面会讲，更好理解一些)</p><p><strong>debug</strong> :一个调试符号表。</p><p><strong>.line</strong> : 原始c源程序的行号和.text节中机器指令之间的映射。</p><p><strong>.strtab</strong> : 一个字符表，其中内容包括.symtab和.debug节的符号表，以及节头部中的节名字。</p><p><strong>符号和符号表</strong></p><p><strong>符号有三种</strong> ：</p><p><img lazyload src="/images/loading.svg" data-src="/./image-20221229203235962.png" alt="image-20221229203235962"></p><p><strong>符号表</strong> </p><p>由汇编器构造，使用编译器输入到汇编语言.s文件中的符号</p><h3 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h3><p>链接器解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来。</p><p>当多个模块定义同名的全局符号时，Linux系统采用的方法：将全局符号，分为强和弱，一般函数和已初始化的全局变量是强符号，未初始化的全局变量是弱符号。再由此定义，使用以下规则：</p><ul><li>不允许有多个同名的强符号。比如，一个项目中只能有一个main函数。</li><li>如果有一个强符号和多个弱符号同名，那么选择强符号来使用。</li><li>如果有多个弱符号同名，则在其中随机选择一个。（因为都没有初始化，所以都是一样的）——————》（书中有很经典的例子P510）</li></ul><h5 id="静态库链接（P511）"><a href="#静态库链接（P511）" class="headerlink" title="静态库链接（P511）"></a>静态库链接（P511）</h5><p>编译系统将所有相关的目标模块打包成一个单独的文件，这个文件我们称其为静态库，它可以作为链接器的输入，当链接器构造一个可执行文件时，它只需复制静态库里面被程序引用的目标块。（我们使用的printf,scanf这些标准函数利用的也是静态库）</p><h3 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h3><p>重定位由两步组成：</p><ul><li>重定位节和符号定义。使得程序中的每条指令和全局变量都有唯一的运行时内存地址。</li><li>重定位节中的符号引用。链接器修改代码节和数据节中对每个符号的引用，使得其指向正确的运行时地址。</li></ul><p><strong>重定位条目</strong> </p><p>当汇编器生成一个目标模块时，它并不知道数据和代码最终将放在内存中的什么位置。也不知道这个模块引用的任何外部定义的函数或者全局变量的为，因而，当汇编器遇到对最终 未知的目标引用就会生成一个重定位条目，用来告诉链接器在将目标文件合成可执行文件时如何修改这个引用。（相当于汇编器不明确数据后面是怎么分配的，就把那些数据放在重定位条目里面，给链接器一个信息，让链接器处理）</p><ul><li>代码重定位条目放在.rel.text中，而已初始化了的放在.rel.data中。</li></ul><p><img lazyload src="/images/loading.svg" data-src="/./image-20221230145928033.png" alt="image-20221230145928033"></p><p>（书p517）</p><h2 id="可执行目标文件"><a href="#可执行目标文件" class="headerlink" title="可执行目标文件"></a>可执行目标文件</h2><p>一个比较典型的ELF可执行文件：</p><p><img lazyload src="/images/loading.svg" data-src="/./image-20221230150344932.png" alt="image-20221230150344932"></p><p>可执行文件与可重定位目标文件有些许差别：</p><ul><li>ELF头描述文件的总体格式，包括程序的入口点（oep）.</li><li>.init节，定义了一个函数_init。程序初始化代码时会调用它。</li></ul><h2 id="动态链接共享库"><a href="#动态链接共享库" class="headerlink" title="动态链接共享库"></a>动态链接共享库</h2><p>动态链接库是一个目标模块，在运行或加载时，可以加载到任意的内存地址，并和一个在内存中的程序链接起来，这个过程就是动态链接。Linux中通常为.so后缀，在微软的操作系统中为DLL.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第三章 程序的机器级表示</title>
      <link href="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/"/>
      <url>/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="程序编码"><a href="#程序编码" class="headerlink" title="程序编码"></a>程序编码</h3><ul><li>反汇编器是通过机器代码文件中的字节序列来确定汇编代码的。有着特点的机器码，例如：E8就代表call指令</li></ul><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ul><li>字—word，双字—double words ，四字—quad words</li><li><img lazyload src="/images/loading.svg" data-src="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/image-20221227230758891.png" alt="image-20221227230758891"></li></ul><h3 id="访问信息"><a href="#访问信息" class="headerlink" title="访问信息"></a>访问信息</h3><ul><li>一般局部变量是放在寄存器中的，而不是内存中，因为访问寄存器比访问内存要快得多</li><li>栈是一种数据结构，可以添加或者删除数据，但是必须遵守的是“先进后出原则”。相当于一个口管理进出，而这个删除和存入的这一个口，我们叫栈顶。</li></ul><h3 id="算数和逻辑操作"><a href="#算数和逻辑操作" class="headerlink" title="算数和逻辑操作"></a>算数和逻辑操作</h3><ul><li>lea为加载有地址，作用是从内存读取数据到寄存器中。作用就是取地址。</li><li>一元操作与二元操作，就是有几个操作数的意思，比如，++i,就是一元，x+Y,就是二元。</li><li>test与and 的作用都是进行逻辑与的运算，test与and 的区别，test不会改变ax与bx的值，而and是ax与bx计算之后，然后将值存储在ax中。</li><li>跳转表是一个数组，表项i是一个代码段的地址，起到索引的作用。用跳转表的一大优点就是执行开关语句的时间与开关情况的数量无关。意思就是，判断一次，然后就直接执行了，而像if–else这类，就需要分别进行判断，然后才能执行。</li></ul><h3 id="数组分配和访问"><a href="#数组分配和访问" class="headerlink" title="数组分配和访问"></a>数组分配和访问</h3><ul><li><p>c语音允许指针进行运算，，*运算和&amp;运算， *与&amp;是可以相互抵消的。</p></li><li><p>二维数组在内存中排列的顺序是按照<strong>行</strong>优先的原则。列如数组A [5] [3]</p></li><li><p><img lazyload src="/images/loading.svg" data-src="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/image-20221227210346634.png" alt="image-20221227210346634"></p><p>这里可以联想到，一个一维数组可以省略其大小，而二维数组可以省略其行，但是不能省略其列。此时二维数组就可以看做一维数组的嵌套，一维数组必须声明其为什么数组,以表明其装载的数据是int还是char,表明其存储数据的大小，同理二维数组，一维数组的数组，使用里面的数组我们必须表明其大小，而一维数组的大小就是其有多少个数据，因此代表里层数组大小，也就是二维数组的列不能省略。</p><h3 id="异质的数据结构（c语言中的结构体和联合体）"><a href="#异质的数据结构（c语言中的结构体和联合体）" class="headerlink" title="异质的数据结构（c语言中的结构体和联合体）"></a>异质的数据结构（c语言中的结构体和联合体）</h3><ul><li><p><strong>结构体</strong> 将可能不同类型的对象聚合到一个对象中。结构体的所有组成部分都存放在内存的连续的区域内，指向结构体的指针是结构体第一个 字节的地址</p></li><li><p><strong>联合体</strong> 允许多种类型来引用一个对象，一个联合体的总大小为其最大字段的大小</p></li><li><p><strong>数据对齐</strong> 计算机系统要求某种类型对象的地址必须为2、4、8的倍数。（对于x86指令来说，保持数据对齐能提高效率）</p></li><li><p>大多数函数的栈帧的边界都必须是16字节的倍数<img lazyload src="/images/loading.svg" data-src="/2022/12/24/csapp-di-san-zhang-cheng-xu-de-ji-qi-ji-biao-shi/image-20221227220154580.png" alt="image-20221227220154580"></p></li><li><p>在Linux系统中，栈随机化已经变成了标准行为，通过栈随机化使得栈的位置在程序每次运行时都有变化，以避免安全单一化。</p></li><li><p>栈破坏检测。栈保护者机制，在栈帧中任何局部缓冲区与栈状态之间存储一个特殊的金丝雀值，由程序运行时随机产生。原理是，在恢复寄存器和从函数返回之前，程序会检测金丝雀值是否被函数某个操作改变，若改变，程序便会异常终止。（一般用于栈溢出）</p><h3 id="浮点代码"><a href="#浮点代码" class="headerlink" title="浮点代码"></a>浮点代码</h3><ul><li>把浮点值转换成整数时，指令会执行截断，把值向零进行舍入</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>脱壳</title>
      <link href="/2022/12/21/tuo-ke/"/>
      <url>/2022/12/21/tuo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="对于脱壳一些题型的记录"><a href="#对于脱壳一些题型的记录" class="headerlink" title="对于脱壳一些题型的记录"></a>对于脱壳一些题型的记录</h1><p>对于手动脱壳，我们有两种常用的安全工具，一个是od,另一个是ida。两个方法略有不同。对于脱一般的程序壳的时候，我主要用的是ida来脱壳，一般ida实在脱不了了再想到用od来脱，od,，所以我记录的大多都是用的ida来脱的。</p><h3 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h3><h5 id="1、寻找oep"><a href="#1、寻找oep" class="headerlink" title="1、寻找oep"></a>1、寻找oep</h5><p>因为我们的壳经过运行之后，会慢慢的自动解开壳，我们就要去寻找解开后的那个时候的程序入口。而oep就是程序的入口。</p><h5 id="2、寻找到加密函数"><a href="#2、寻找到加密函数" class="headerlink" title="2、寻找到加密函数"></a>2、寻找到加密函数</h5><p>找到oep之后，运行下来，我们的程序就出来了。我们就可以去寻找了。string里面去寻找字符串，然后再跳到函数里面，去就可以直接分析了。</p><h5 id="3、dump与修复"><a href="#3、dump与修复" class="headerlink" title="3、dump与修复"></a>3、dump与修复</h5><p>有些时候，可能我们要将程序剥离出来，这个时候就在oep口的地方将全部程序dump出来即可，dump出来之后还要进行修复文件，因为它的程序地址那些会发生改变，因此我们需要修复IAT。</p><p><strong>对于脱壳运用最多的方法，一个是单步调试法，另一个就是ESP定律来脱壳</strong></p><h3 id="单步调试法"><a href="#单步调试法" class="headerlink" title="单步调试法"></a>单步调试法</h3><p>正如其名，单步调试法就是进行动态调试文件，分析汇编指令，找到关键点,寻找oep</p><h3 id="esp定律（堆栈平衡）"><a href="#esp定律（堆栈平衡）" class="headerlink" title="esp定律（堆栈平衡）"></a>esp定律（堆栈平衡）</h3><p>由于我们壳会在内存中还原程序，跳到oep，执行我们的程序。大致过程就是运行壳程序解壳，然后退出解壳程序，加载原本程序。有着壳程序的运行与退出，根据堆栈平衡原理，壳退出后，必然会操作堆栈指针为进入之前的堆栈指针。因此根据这个原理，我们可以在堆栈处，设置访问断点，让程序运行，当程序暂停的时候，就是壳程序即将执行完的时候，然后在其附近单步跟踪就可以找到原始OEP了。</p><h3 id="UPX"><a href="#UPX" class="headerlink" title="UPX"></a>UPX</h3><h3 id="题目一："><a href="#题目一：" class="headerlink" title="题目一："></a>题目一：</h3><h3 id="链接：https-pan-baidu-com-s-1teQgV5kgKpuNJ60o0byYVg-pwd-j8mj"><a href="#链接：https-pan-baidu-com-s-1teQgV5kgKpuNJ60o0byYVg-pwd-j8mj" class="headerlink" title="链接：https://pan.baidu.com/s/1teQgV5kgKpuNJ60o0byYVg?pwd=j8mj"></a>链接：<a class="link" href="https://pan.baidu.com/s/1teQgV5kgKpuNJ60o0byYVg?pwd=j8mj">https://pan.baidu.com/s/1teQgV5kgKpuNJ60o0byYVg?pwd=j8mj<i class="fas fa-external-link-alt"></i></a></h3><h3 id="提取码：j8mj"><a href="#提取码：j8mj" class="headerlink" title="提取码：j8mj"></a>提取码：j8mj</h3><h6 id="单步调试法-1"><a href="#单步调试法-1" class="headerlink" title="单步调试法"></a>单步调试法</h6><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221172644959.png" alt="image-20221221172644959"></p><p>这个jmp非常可疑（一般那种jmp有大跳转就要注意），我们在这里按下f2 下断点，运行之后，按f7跟入。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221174102488.png" alt="image-20221221174102488"></p><p>到这里大致就可以猜出我们找对了。</p><p>按f8，运行到  jmp,f7跟入</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221175001632.png" alt="image-20221221175001632"></p><p>到这里就差不多知道找到oep了，由于这样ida没有将它分析出来，我们按p，将其分析出来</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221175423558.png" alt="image-20221221175423558"></p><p>进行反汇编之后发现看不懂，也没有找到我们的函数。这里有两个方法，一个就是单步，直到程序等待输入，另一个方法就是直接去string中搜索，字符串。我运用的是第二种。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203234327.png"></p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203609175.png" alt="image-20221221203609175"></p><p>按键盘上的X快捷键。<img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203438864-1671634100072-1.png" alt="image-20221221203438864-1671634100072-1"></p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221221203345394.png" alt="image-20221221203345394"></p><p>查询交叉引用就可以找到我们的加密函数，按f5反汇编即可。然后进行分析即可。</p><h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><h3 id="链接：https-pan-baidu-com-s-1-e-A7gJow71q4s8KYs0JfQ-pwd-fycv"><a href="#链接：https-pan-baidu-com-s-1-e-A7gJow71q4s8KYs0JfQ-pwd-fycv" class="headerlink" title="链接：https://pan.baidu.com/s/1_e_A7gJow71q4s8KYs0JfQ?pwd=fycv"></a>链接：<a class="link" href="https://pan.baidu.com/s/1_e_A7gJow71q4s8KYs0JfQ?pwd=fycv">https://pan.baidu.com/s/1_e_A7gJow71q4s8KYs0JfQ?pwd=fycv<i class="fas fa-external-link-alt"></i></a></h3><h3 id="提取码：fycv"><a href="#提取码：fycv" class="headerlink" title="提取码：fycv"></a>提取码：fycv</h3><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095122670.png" alt="image-20221227095122670"></p><p>直接在程序的第一条指令上下一个断点。然后运行，寻找可疑点。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095328753.png" alt="image-20221227095328753"></p><p>指令的最后有个retn,这里我们按f4运行到此处，再按f7跟入。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095542230.png" alt="image-20221227095542230"></p><p>进入之后发现最后的jmp,我们继续像先前一样，f4,f7跟入。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095720390.png" alt="image-20221227095720390"></p><p>继续重复上面步骤。</p><p><img lazyload src="/images/loading.svg" data-src="/image-20221227095757480.png" alt="image-20221227095757480"></p><p>继续</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095822799.png" alt="image-20221227095822799"></p><p>继续</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095854783.png" alt="image-20221227095854783"></p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095925714.png" alt="image-20221227095925714"></p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227095948589.png" alt="image-20221227095948589"></p><p>跟到了这里我们就大致可以知道了，我们马上成功了，我们找到了oep。继续</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103349134.png" alt="image-20221227103349134"></p><p>到这里之后按p分析，就成了现在的样子，到这里就找到了我们的oep了。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103532762.png" alt="image-20221227103532762"></p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103552479.png" alt="image-20221227103552479"></p><p>在这里按c,再按p，再反汇编就可以得到我们的加密函数了</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/tuo-ke/image-20221227103659899.png" alt="image-20221227103659899"></p><hr><p>通过这两到题，我们大致可以发现，upx脱壳，就是去寻找可疑点，jmp,或者ret，因为壳是一个程序，因此我们脱壳就是要其运行完成的结果，所以我们在脱壳过程中总是要跳到ret，也就是这个原因。最后到oep的时候也很有特点，多脱几次就有感觉了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>csapp 第二章 信息的表示和处理</title>
      <link href="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/"/>
      <url>/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/</url>
      
        <content type="html"><![CDATA[<h1 id="信息的表示和处理"><a href="#信息的表示和处理" class="headerlink" title="信息的表示和处理"></a>信息的表示和处理</h1><p><strong>本章的话，深入的讲解了我们的数据（信息）是如何在内存中表示，以及存储，后面的部分主要是讲解了我们的整数与浮点数的存储与运算，并且在数学上进行了证明与推导。总的来说，在数学证明与推导上，有点晦涩难懂（数学太菜了）。而且在一定程度上，我们平常也用不到这个，我们只需要了解一下就行了，重点关注比较常用的知识点</strong></p><h3 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h3><p><strong>信息是怎么表示？</strong> 我们知道，我们的信息是由位组成的，我们的位就是0,1的集合，这样的表示被成为二进制，由于0101010这样相对于我们人类的十进制，太难理解和阅读了，为了更加简便，人们就思考怎样可以更加简便？因此找到了十六进制来表示。二进制和十六进制的转换很简单而且直观。</p><p><strong>我们存储数据的大小是多少呢？</strong> 我们应该知道的是，在不同的计算机上，我们的一些数据的大小存储是不同的，比如，我们熟悉的int ，在不同的计算机上有的是占4个字节（大多数），有的计算机上占的是2个字节。因此在讨论所占大小时我们应该考虑计算机本身的存储。下面就是32位，与64位的一些区别。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221222221354739.png" alt="image-20221222221354739"></p><p><strong>有一个需要注意的点就是，64位的计算机能够兼容32位的程序，也就是说32位的程序能在64位上跑，64位不的能在32位上跑</strong></p><p><strong>内存中如何排列这些字节序？</strong> 在不同的计算机中对于字节的排序是不同的，因而对于同一个文本，它的解释方式是不一样的。计算机有两种方式，一个是大端法，一个是小端法。对于大小端可以这样记，所谓大端就是大的位存储在前面（也就是低位），小端就是小的位存储在前面。比如1234，有空间0xa,0xb,0xc,0xd。按照大端存储就是1放在0xa,2放在0xb,3放在0xc,4放在0xd.按照小端排序的话，4放在0xa,3放在0xb,2放在0xc,1放在0xd.</p><p><strong>布尔代数</strong> </p><p>这个就只有两个，一个是ture，一个是false。就是真和假，和我们高中学的知识一样，或，且，非，异或，四中逻辑运算。因为ture和false,刚好和我们的存储的二进制0,1对应，因此计算机上运用广泛。</p><p><strong>位运算和逻辑运算</strong> </p><p>主要区别就是位运算处理的是数据运算，而逻辑运算处理的是一种判断，真假。</p><p><em><strong>位运算</strong></em> </p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223002053291.png" alt="image-20221223002053291"></p><p><em><strong>逻辑运算</strong></em></p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223002128217.png" alt="image-20221223002128217"></p><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p><strong>整数的数据类型</strong> </p><p>对于整数来说，整数可以分为有符号数和无符号数。在不同的机器上，我们的整数的表示范围有着不同的差别。</p><p><em><strong>32位机器上</strong></em> </p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223120246269.png" alt="image-20221223120246269"></p><p><em><strong>64位机器上</strong></em> </p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/21/csapp-di-er-zhang-xin-xi-de-biao-shi-he-chu-li/image-20221223120356826.png" alt="image-20221223120356826"></p><p>这个我们可以发现一个问题，有符号数的负数比整数多表示了一个数，这里是因为有一个整数用来表示0去了。</p><ul><li>我们大多数机器都是用补码的形式来表示有符号整数</li><li>对于强制转换类型，是保持位不变改变了解释这些位的解释方式。也就是说存储的数据（0，1）并没有改变，仅仅是解释的方式变了，上下文变了。</li><li>大多数数字是默认有符号的，如果要创建无符号常量就需要在数字后面加上一个u。</li><li>强制转换有显式和隐式的，显式强制转换在前面加括号，在写上要转换的类型。隐式强制转换，由编译器自动进行。比如printf中，一个int型，打印用%x，就是隐式转换。</li><li>一个小的数据类型（float），可以转换为一个交大的数据类型(double)（对位进行扩展），而一个大的数据类型，可能转换不到较小的去（对数字进行截断），因为可能会发生溢出。</li><li>乘法，与除法，在机器上运行是很慢的，我们可以通过位运算，加法和减法的组合运算来实现，从而提高速度。</li></ul><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p><strong>舍入</strong> </p><p>对于一个浮点数，或者说对于一个小数，我们计算机是怎么取舍的呢？如果我们学习过c语音可以知道，浮点数是有精度的，也就是说我们的数都是由无限逼近的数进行取舍的，也就是说，举个例子：5/2=2.5，在我们的计算机中这个2.5并不是准确的2.5，可能是2.49876765.有些时候可能我们会纳闷，有些时候计算机是进行的四舍五入，有些时候我们的计算机又进行的是直接抹除小数后面位数。那么到底是怎么取舍的呢？通常情况下我们采取的舍入规则是在原来的值是舍入值的中间值时，采取向偶数舍入（四舍五入）<strong>而它的原理</strong> 二进制中，末尾为0的数为偶数。而若不是这样的话，我们的计算机一般会有选择性的使用向上和向下舍入，但最终还是会向最接近的值舍入。这是IEEE采取的默认的舍入方式，因为这种舍入方式总是向最近的值的舍入，从而让我们的舍入更加精确。也就是大部分都是四舍五入，只有下面的一种是向零舍入。</p><p><strong>浮点运算</strong> </p><p>这里我们需要知道：</p><ul><li>浮点运算没有结合律和分配律，打个比方（3-3）+0.0000000000002=0.00000000000002，（3+0.0000000000002）-3=0，按照我们的数学来说很奇怪是不是？出现这个的原因，就是因为浮点数有着舍入与精度规则，第二个式子的值被抹去了。</li></ul><p>对此推广开来，我们就可以知道一些问题：</p><ul><li>int转换成float，不会发生溢出，但是可能会发生舍入。</li><li>double转换成int，与float，可能会发生溢出。</li><li><strong>由浮点数转换为整数，float,double,转换成int会发生取舍，取舍规则为向零取舍，即小数点后面的数全部抹除</strong></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cs:app 第一章 计算机系统漫游</title>
      <link href="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/"/>
      <url>/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/</url>
      
        <content type="html"><![CDATA[<h1 id="cs-app-第一章-计算机系统漫游"><a href="#cs-app-第一章-计算机系统漫游" class="headerlink" title="cs:app 第一章 计算机系统漫游"></a>cs:app 第一章 计算机系统漫游</h1> <div class="wb"><div class="t">  </div><div class="c">本章总的来说是本书的一个引入，通过我们所写的一个.c文件由书写到执行的全过程中所经历的历程，从而对于计算机系统的总体进行一个一个大致的描述，和概念的提出，起到一个抛砖引玉的效果。     </div> </div><h3 id="1-1信息就是位-上下文"><a href="#1-1信息就是位-上下文" class="headerlink" title="1.1信息就是位+上下文"></a>1.1信息就是位+上下文</h3><p>这里提到了信息是由位+上下文。那么什么是位呢？什么又是上下文呢？</p><p>我们的所写的程序，本质上都是由值0和1组成的位（bit 比特）。这就是所谓的位，而8个位组成一组，我们称之为字节。而字节可以表示程序的一些文本字符，一群文本字符的集合构成了我们的程序。</p><blockquote><p>大部分的现代计算机系统都使用ASCII标准来表示文本字符。只由ASCII字符构成的文件称为文本文件，所有其他文件都称为二进制文件。</p></blockquote><p>到此我们可以知道了，我们数据就是一串串的比特来表示的。然而面对众多数据，例如：我们的程序数据，我们网上邮箱的数据，我们打游戏而储存的数据……等等，如何区别这些信息（数据）呢？这个时候就需要了解这些数据对象的上下文。在不同的的上下文中，同一个数据，可能表示为数值，可能表示字符串（英文，汉字等），也可能表示某条指令。</p><p>因此我们说位（比特）与该数据对象的上下文构成了信息。</p><h3 id="1-2程序被其他程序翻译成不同的格式"><a href="#1-2程序被其他程序翻译成不同的格式" class="headerlink" title="1.2程序被其他程序翻译成不同的格式"></a>1.2程序被其他程序翻译成不同的格式</h3><p>对于我们写的第一个程序hello，我们得到的是hello.c的文件，而要到我们所执行的hello.exe可执行文件就需要经过一系列的路程，在这个过程中我们的程序就会被翻译成不同的格式。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/image-20221214130847881.png" alt="image-20221214130847881"></p><p>具体有四个过程：</p><ul><li>预处理阶段。将我们.c文件里面的对#开头的命令，例如引用的文件，define 的数据等，插入到文本中，得到.i文件。</li><li>编译阶段。编译器将我们的.i文本翻译成汇编语言。文件由.i变成.s.</li><li>汇编阶段。汇编器将我们的.s文本翻译成机器语言指令（0，1），如何把这些指令打包成可重定位目标程序。到这里.s文件变成了.o文件。这里得到的.o文件属于二进制文件。</li><li>链接阶段。在我们程序中引用了c语言的库函数。而这个时候链接器就将我们引用的库函数，链接合并到我们的文件中。到此处.o文件转化成了.exe文件。</li></ul><p>.exe就可以加载到内存中，由系统执行了。</p><h3 id="1-3了解编译系统的益处"><a href="#1-3了解编译系统的益处" class="headerlink" title="1.3了解编译系统的益处"></a>1.3了解编译系统的益处</h3><ul><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞</li></ul><h3 id="1-4处理器读并解释储存在内存中的指令"><a href="#1-4处理器读并解释储存在内存中的指令" class="headerlink" title="1.4处理器读并解释储存在内存中的指令"></a>1.4处理器读并解释储存在内存中的指令</h3><p>当我们运行.exe文件的时候，这个时候就需要我们的系统进行进行执行，而我们的系统是由硬件组成的，在的硬件配合才能成功的执行我们的.exe文件。首先这里我们要了解我们系统的硬件组成，以及其运行原理。</p><p><strong>硬件组成</strong></p><ol><li><p><strong>总线</strong></p><p>贯穿整个系统的是一组电子管道，称作总线，它 携带信息字节并负责在各个部件间传递。</p></li></ol><p>总线就像我们的公路一般，起到连接作用。</p><ol start="2"><li><p><strong>I/O设备</strong></p><p>I/O（即in与out的缩写，输入/输出），I/O设备就是我们与计算机进行交互的通道。常见的输入设备：鼠标，键盘，USB..等等；输出设备：显示屏，磁盘驱动器。</p><p>这里需要提到的是每个I/O设备都通过一个控制器与适配器与I/O总线相连。控制器与适配器的区别。</p><blockquote><p>控制器是I/O设备本身或者系统的主印制电路板（主板）：适配器是一块插在主板插槽上的卡。</p></blockquote><p>3.<strong>主存</strong></p><p>主存是一个临时储存设备，在程序运行时用来存放程序和程序处理的数据。这个就像是我们做菜的菜板，将要处理的东西临时的放在上面。</p><p>4.<strong>处理器</strong></p><p>中央处理单元（cpu）,即为处理器。作用是解释或者执行存储在主存中的指令引擎。而它的核心是寄存器，又称程序计数器。它的特点是时刻指向主存中的某条机器语言指令。处理器从通电开始，就时刻的在执行寄存器指向的指令。CPU在指令的要求下大致会执行一下操作：</p><blockquote><ul><li><strong>加载</strong> ：从主存复制一个字节或者一个字到寄存器中，以覆盖寄存器原来的内容。</li><li><strong>存储</strong> ：从寄存器复制一个字符或者一个字到主存的某个位置，以覆盖寄存器原来的内容。</li><li><strong>操作</strong> ：把两个寄存器的内容复制到ALU（算术/逻辑单元），ALU对这两个字做算术运算，并将结果存放到一个寄存器中，以覆盖该寄存器中原来的内容。</li><li><strong>跳转</strong>：从指令本身中抽取一个字，并将这个字复制到程序计数（PC）中，以覆盖PC中原来的值。</li></ul></blockquote></li></ol><p>上面就是对于主要硬件的大致介绍，通过硬件的配合，我们的程序就能运行起来了。</p><h3 id="1-5高速缓存至关重要"><a href="#1-5高速缓存至关重要" class="headerlink" title="1.5高速缓存至关重要"></a>1.5高速缓存至关重要</h3><p>为什么说高速缓存至关重要呢？通过上面硬件的流程我们可以知道，程序的机器指令到运行的时候，要经过多次复制，为了提高性能，系统设计者需要设计一个东西使得复制操作尽快完成。然而加快处理器的运行速度比加快主存的运行速度要容易和便宜得多，也就说优化处理器性价比更高，从而系统设计者采用了高速缓存存储器（高速缓存），利用高速缓存的局部性原理，来提高性能。因而我们能够利用高速缓存将程序的性能提高一个数量级。</p><h3 id="1-6存储设备形成层次结构"><a href="#1-6存储设备形成层次结构" class="headerlink" title="1.6存储设备形成层次结构"></a>1.6存储设备形成层次结构</h3><p>计算机系统的存储设备都被组织成了一个存储器层次结构，如图，从上到下设备的访问速度越来越慢，而容量越来越大，造价也越来越便宜。</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/image-20221214181429916.png" alt="image-20221214181429916"></p><p>我们可以通过利用对整个存储器层次结构的理解来提高程序性能。</p><h3 id="1-7操作系统管理硬件"><a href="#1-7操作系统管理硬件" class="headerlink" title="1.7操作系统管理硬件"></a>1.7操作系统管理硬件</h3><p>当我们运行输入命令或者运行程序的时候，其实他们并不是直接去访问我们的硬件的（键盘，显示器 等），而是需要通过一个“媒介”——操作系统。可以这样说，所有应用程序对应硬件的操作尝试都通过操作系统。这里的操作系统就好比一个对于程序与硬件的管理者，一个方面防止硬件被失控的应用程序滥用，另一方面向应用程序提供简单一致的机制来控制复制而又不相同的低级硬件设备。而操作系统通过，进程，虚拟内存，文件，这三个方面实现的。</p><h6 id="进程与线程"><a href="#进程与线程" class="headerlink" title="#进程与线程"></a>#进程与线程</h6><p>什么是进程呢？所谓进程就是操作系统对于一个正在运行的程序的一种抽象，换个方式来理解，一个程序从开始运行到结束这个过程，就是进程。而进程又是由线程组成的，线程指的就是我们程序里面一个个的执行单元。举个例子，当你打开音乐播放器，将音乐播放器运行起来，这个时候，就相当于一个进程，这个时候，你想听歌，这就相当于一个线程，如果你想在听歌的时候同时把歌曲下载下来，这个时候就变成了所谓的多线程。</p><h6 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="#虚拟内存"></a>#虚拟内存</h6><p>我们都知道我们的内存是有限，当我们运行多个进程的时候，就有可能出现主存不足的情况，因此虚拟空间就出现了。虚拟空间的作用就是创建一个更大的连续的空间——利用一部分磁盘的空间。由于是由主存和磁盘上空间上的，物理上并不是连续的，但是逻辑是连续的，虚拟一词就由此而来。</p><p>虚拟空间大致组成就如下图一般：</p><p><img lazyload src="/images/loading.svg" data-src="/2022/12/15/csapp-di-yi-zhang-ji-suan-ji-xi-tong-man-you/image-20221216233613136.png" alt="image-20221216233613136"></p><blockquote><ul><li><strong>程序代码和数据</strong> 。正如其名，这里面就是我们所写的代码和一些数据。</li><li><strong>堆</strong> 这里是我们个人可以管理的空间，比如，c语言中的malloc申请一片空间，free释放一片空间。</li><li><strong>共享库</strong> 这里面存放的是我们的一些c语言库，数学库等等，一些库的代码和数据。</li><li><strong>栈</strong> 这是由编译器管理的空间。存储着我们调用的函数，设置的变量和一些对象的引用，等等，由编译器分配。</li><li><strong>内核存虚拟内存</strong> 系统内核区域</li></ul></blockquote><h6 id="文件"><a href="#文件" class="headerlink" title="#文件"></a>#文件</h6><p>文件就是字节序列。就是一堆0,1构成的的集合体。万物皆文件，在系统里面的所有数据我们都可以称之为文件。</p><h3 id="1-8系统之间利用网络通信"><a href="#1-8系统之间利用网络通信" class="headerlink" title="1.8系统之间利用网络通信"></a>1.8系统之间利用网络通信</h3><p>我们的个人计算机，就是一个单独的系统，然而我们的计算机可以通过网络实现对于其他计算机的连接，这样我们单独的系统就可以连进一个大家庭了。利用网路完成信息的交互。实现上网。</p><p>比如我们去b站看视频。大致过程就是，我们本地的客户端，向着远程的服务端进行传输数据，发送我们的视频请求，服务端接收到数据之后，经过一系列的操作，将我们所请求的视频数据返回到我们本地的客服端，我们接收之后，客户端进行操作，然后显示到我们的显示屏上，这样我们就可以看到视频的内容了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/12/15/xin-pian-zhang/"/>
      <url>/2022/12/15/xin-pian-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一次搭建博客记录一下"><a href="#第一次搭建博客记录一下" class="headerlink" title="第一次搭建博客记录一下"></a>第一次搭建博客记录一下</h2><p>2022.12.15，记录一下二木的博客小屋的诞生。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
